### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.search.documents.aio.SearchClient.autocomplete
  - azure.search.documents.aio.SearchClient.close
  - azure.search.documents.aio.SearchClient.delete_documents
  - azure.search.documents.aio.SearchClient.get_document
  - azure.search.documents.aio.SearchClient.get_document_count
  - azure.search.documents.aio.SearchClient.index_documents
  - azure.search.documents.aio.SearchClient.merge_documents
  - azure.search.documents.aio.SearchClient.merge_or_upload_documents
  - azure.search.documents.aio.SearchClient.search
  - azure.search.documents.aio.SearchClient.suggest
  - azure.search.documents.aio.SearchClient.upload_documents
  class: azure.search.documents.aio.SearchClient
  example:
  - "Creating the SearchClient with an API key.<!--[!code-python[Main](les\\async_samples\\\
    sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-search-documents-1.0.0b3\\\\samples\\\\\
    async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.search.documents.aio import SearchClient\n   service_endpoint =\
    \ os.getenv(\"AZURE_SEARCH_SERVICE_ENDPOINT\")\n   index_name = os.getenv(\"AZURE_SEARCH_INDEX_NAME\"\
    )\n   key = os.getenv(\"AZURE_SEARCH_API_KEY\")\n\n   search_client = SearchClient(service_endpoint,\
    \ index_name, AzureKeyCredential(key))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.search.documents._headers_mixin.HeadersMixin
  langs:
  - python
  module: azure.search.documents.aio
  name: SearchClient
  summary: A client to interact with an existing Azure search index.
  syntax:
    content: SearchClient(endpoint, index_name, credential, **kwargs)
    parameters:
    - description: The URL endpoint of an Azure search service
      id: endpoint
      type:
      - str
    - description: The name of the index to connect to
      id: index_name
      type:
      - str
    - description: A credential to authorize search client requests
      id: credential
      type:
      - azure.core.credentials.AzureKeyCredential
  type: class
  uid: azure.search.documents.aio.SearchClient
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get a auto-completions.<!--[!code-python[Main](les\\async_samples\\sample_autocomplete_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\4\\\\azure-search-documents-1.0.0b3\\\\samples\\\\async_samples\\\\sample_autocomplete_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents.aio import SearchClient\n\
    \   from azure.search.documents import AutocompleteQuery\n\n   search_client =\
    \ SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\n   query\
    \ = AutocompleteQuery(search_text=\"bo\", suggester_name=\"sg\")\n\n   async with\
    \ search_client:\n       results = await search_client.autocomplete(query=query)\n\
    \n       print(\"Autocomplete suggestions for 'bo'\")\n       for result in results:\n\
    \           print(\"    Completion: {}\".format(result[\"text\"]))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.autocomplete
  langs:
  - python
  module: azure.search.documents.aio
  name: autocomplete(query, **kwargs)
  namewithoutparameters: autocomplete
  summary: Get search auto-completion results from the Azure search index.
  syntax:
    content: autocomplete(query, **kwargs)
    parameters:
    - description: An query for auto-completions
      id: query
      isRequired: true
    return:
      type:
      - List[dict]
  type: method
  uid: azure.search.documents.aio.SearchClient.autocomplete
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.close
  langs:
  - python
  module: azure.search.documents.aio
  name: close()
  namewithoutparameters: close
  summary: Close the <xref:azure.search.aio.SearchClient> session.
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.search.documents.aio.SearchClient.close
- class: azure.search.documents.aio.SearchClient
  example:
  - "Delete existing documents to an index<!--[!code-python[Main](les\\async_samples\\\
    sample_crud_operations_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-search-documents-1.0.0b3\\\\samples\\\\\
    async_samples\\\\sample_crud_operations_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   result = await search_client.upload_documents(documents=[{\"\
    HotelId\": \"1000\"}])\n\n   print(\"Delete new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.delete_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: delete_documents(documents, **kwargs)
  namewithoutparameters: delete_documents
  summary: 'Delete documents from the Azure search index


    Delete removes the specified document from the index. Any field you

    specify in a delete operation, other than the key field, will be

    ignored. If you want to remove an individual field from a document, use

    *merge_documents* instead and set the field explicitly to None.


    Delete operations are idempotent. That is, even if a document key does

    not exist in the index, attempting a delete operation with that key will

    result in a 200 status code.'
  syntax:
    content: delete_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to delete.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.delete_documents
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get a specific document from the search index.<!--[!code-python[Main](les\\async_samples\\\
    sample_get_document_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-search-documents-1.0.0b3\\\\samples\\\\\
    async_samples\\\\sample_get_document_async.py\", \"xml:space\": \"preserve\",\
    \ \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.search.documents.aio import SearchClient\n\n   search_client =\
    \ SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\n   async\
    \ with search_client:\n       result = await search_client.get_document(key=\"\
    23\")\n\n       print(\"Details for hotel '23' are:\")\n       print(\"      \
    \  Name: {}\".format(result[\"HotelName\"]))\n       print(\"      Rating: {}\"\
    .format(result[\"Rating\"]))\n       print(\"    Category: {}\".format(result[\"\
    Category\"]))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.get_document
  langs:
  - python
  module: azure.search.documents.aio
  name: get_document(key, selected_fields=None, **kwargs)
  namewithoutparameters: get_document
  summary: Retrieve a document from the Azure search index by its key.
  syntax:
    content: get_document(key, selected_fields=None, **kwargs)
    parameters:
    - description: The primary key value for the document to retrieve
      id: key
      isRequired: true
      type:
      - str
    - description: a whitelist of fields to include in the results
      id: selected_fields
      isRequired: true
      type:
      - List[str]
    return:
      type:
      - dict
  type: method
  uid: azure.search.documents.aio.SearchClient.get_document
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.get_document_count
  langs:
  - python
  module: azure.search.documents.aio
  name: get_document_count(**kwargs)
  namewithoutparameters: get_document_count
  summary: Return the number of documents in the Azure search index.
  syntax:
    content: get_document_count(**kwargs)
    return:
      type:
      - int
  type: method
  uid: azure.search.documents.aio.SearchClient.get_document_count
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.index_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: index_documents(batch, **kwargs)
  namewithoutparameters: index_documents
  summary: Specify a document operations to perform as a batch.
  syntax:
    content: index_documents(batch, **kwargs)
    parameters:
    - description: A batch of document operations to perform.
      id: batch
      isRequired: true
      type:
      - IndexDocumentsBatch
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.index_documents
- class: azure.search.documents.aio.SearchClient
  example:
  - "Merge fields into existing documents to an index<!--[!code-python[Main](les\\\
    async_samples\\sample_crud_operations_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-search-documents-1.0.0b3\\\
    \\samples\\\\async_samples\\\\sample_crud_operations_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   result = await search_client.upload_documents(documents=[{\"\
    HotelId\": \"1000\", \"Rating\": 4.5}])\n\n   print(\"Merge into new document\
    \ succeeded: {}\".format(result[0].succeeded))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.merge_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: merge_documents(documents, **kwargs)
  namewithoutparameters: merge_documents
  summary: 'Merge documents in to existing documents in the Azure search index.


    Merge updates an existing document with the specified fields. If the

    document doesn''t exist, the merge will fail. Any field you specify in a

    merge will replace the existing field in the document. This also applies

    to collections of primitive and complex types.'
  syntax:
    content: merge_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to merge.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.merge_documents
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.merge_or_upload_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: merge_or_upload_documents(documents, **kwargs)
  namewithoutparameters: merge_or_upload_documents
  summary: 'Merge documents in to existing documents in the Azure search index,

    or upload them if they do not yet exist.


    This action behaves like *merge_documents* if a document with the given

    key already exists in the index. If the document does not exist, it

    behaves like *upload_documents* with a new document.'
  syntax:
    content: merge_or_upload_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to merge or upload.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.merge_or_upload_documents
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get search result facets.<!--[!code-python[Main](les\\async_samples\\sample_facet_query_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\4\\\\azure-search-documents-1.0.0b3\\\\samples\\\\async_samples\\\\sample_facet_query_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents.aio import SearchClient\n\
    \   from azure.search.documents import SearchQuery\n\n   search_client = SearchClient(service_endpoint,\
    \ index_name, AzureKeyCredential(key))\n\n   query = SearchQuery(search_text=\"\
    WiFi\", facets=[\"Category\"], top=0)\n\n   async with search_client:\n      \
    \ results = await search_client.search(query=query)\n\n       facets = await results.get_facets()\n\
    \n       print(\"Catgory facet counts for hotels:\")\n       for facet in facets[\"\
    Category\"]:\n           print(\"    {}\".format(facet))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.search
  langs:
  - python
  module: azure.search.documents.aio
  name: search(query, **kwargs)
  namewithoutparameters: search
  summary: Search the Azure search index for documents.
  syntax:
    content: search(query, **kwargs)
    parameters:
    - description: An query for searching the index
      id: query
      isRequired: true
    return:
      type:
      - AsyncSearchItemPaged[dict]
  type: method
  uid: azure.search.documents.aio.SearchClient.search
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get search suggestions.<!--[!code-python[Main](les\\async_samples\\sample_suggestions_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\4\\\\azure-search-documents-1.0.0b3\\\\samples\\\\async_samples\\\\sample_suggestions_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents.aio import SearchClient\n\
    \   from azure.search.documents import SuggestQuery\n\n   search_client = SearchClient(service_endpoint,\
    \ index_name, AzureKeyCredential(key))\n\n   query = SuggestQuery(search_text=\"\
    coffee\", suggester_name=\"sg\")\n\n   async with search_client:\n       results\
    \ = await search_client.suggest(query=query)\n\n       print(\"Search suggestions\
    \ for 'coffee'\")\n       for result in results:\n           hotel = await search_client.get_document(key=result[\"\
    HotelId\"])\n           print(\"    Text: {} for Hotel: {}\".format(repr(result[\"\
    text\"]), hotel[\"HotelName\"]))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.suggest
  langs:
  - python
  module: azure.search.documents.aio
  name: suggest(query, **kwargs)
  namewithoutparameters: suggest
  summary: Get search suggestion results from the Azure search index.
  syntax:
    content: suggest(query, **kwargs)
    parameters:
    - description: An query for search suggestions
      id: query
      isRequired: true
    return:
      type:
      - List[dict]
  type: method
  uid: azure.search.documents.aio.SearchClient.suggest
- class: azure.search.documents.aio.SearchClient
  example:
  - "Upload new documents to an index<!--[!code-python[Main](les\\async_samples\\\
    sample_crud_operations_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\4\\\\azure-search-documents-1.0.0b3\\\\samples\\\\\
    async_samples\\\\sample_crud_operations_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   DOCUMENT = {\n       'Category': 'Hotel',\n    \
    \   'HotelId': '1000',\n       'Rating': 4.0,\n       'Rooms': [],\n       'HotelName':\
    \ 'Azure Inn',\n   }\n\n   result = await search_client.upload_documents(documents=[DOCUMENT])\n\
    \n   print(\"Upload of new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.upload_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: upload_documents(documents, **kwargs)
  namewithoutparameters: upload_documents
  summary: 'Upload documents to the Azure search index.


    An upload action is similar to an "upsert" where the document will be

    inserted if it is new and updated/replaced if it exists. All fields are

    replaced in the update case.'
  syntax:
    content: upload_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to upload.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.upload_documents
references:
- fullName: azure.search.documents.aio.SearchClient.autocomplete
  isExternal: false
  name: autocomplete(query, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.autocomplete
- fullName: azure.search.documents.aio.SearchClient.close
  isExternal: false
  name: close()
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.close
- fullName: azure.search.documents.aio.SearchClient.delete_documents
  isExternal: false
  name: delete_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.delete_documents
- fullName: azure.search.documents.aio.SearchClient.get_document
  isExternal: false
  name: get_document(key, selected_fields=None, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.get_document
- fullName: azure.search.documents.aio.SearchClient.get_document_count
  isExternal: false
  name: get_document_count(**kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.get_document_count
- fullName: azure.search.documents.aio.SearchClient.index_documents
  isExternal: false
  name: index_documents(batch, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.index_documents
- fullName: azure.search.documents.aio.SearchClient.merge_documents
  isExternal: false
  name: merge_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.merge_documents
- fullName: azure.search.documents.aio.SearchClient.merge_or_upload_documents
  isExternal: false
  name: merge_or_upload_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.merge_or_upload_documents
- fullName: azure.search.documents.aio.SearchClient.search
  isExternal: false
  name: search(query, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.search
- fullName: azure.search.documents.aio.SearchClient.suggest
  isExternal: false
  name: suggest(query, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.suggest
- fullName: azure.search.documents.aio.SearchClient.upload_documents
  isExternal: false
  name: upload_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.upload_documents
- fullName: List[dict]
  name: List[dict]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ']'
    name: ']'
  uid: List[dict]
- fullName: List[IndexingResult]
  name: List[IndexingResult]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: IndexingResult
    name: IndexingResult
    uid: IndexingResult
  - fullName: ']'
    name: ']'
  uid: List[IndexingResult]
- fullName: List[str]
  name: List[str]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: List[str]
- fullName: AsyncSearchItemPaged[dict]
  name: AsyncSearchItemPaged[dict]
  spec.python:
  - fullName: AsyncSearchItemPaged
    name: AsyncSearchItemPaged
    uid: AsyncSearchItemPaged
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ']'
    name: ']'
  uid: AsyncSearchItemPaged[dict]
