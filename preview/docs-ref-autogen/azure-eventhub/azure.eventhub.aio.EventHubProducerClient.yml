### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.aio.EventHubProducerClient.close
  - azure.eventhub.aio.EventHubProducerClient.create_batch
  - azure.eventhub.aio.EventHubProducerClient.from_connection_string
  - azure.eventhub.aio.EventHubProducerClient.get_eventhub_properties
  - azure.eventhub.aio.EventHubProducerClient.get_partition_ids
  - azure.eventhub.aio.EventHubProducerClient.get_partition_properties
  - azure.eventhub.aio.EventHubProducerClient.send_batch
  class: azure.eventhub.aio.EventHubProducerClient
  example:
  - "Create a new instance of the EventHubProducerClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\9\\\\azure-eventhub-5.1.0b1\\\\samples\\\
    \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio import EventHubProducerClient,\
    \ EventHubSharedKeyCredential\n\n   fully_qualified_namespace = os.environ['EVENT_HUB_HOSTNAME']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n\
    \   shared_access_key = os.environ['EVENT_HUB_SAS_KEY']\n\n   producer = EventHubProducerClient(fully_qualified_namespace=fully_qualified_namespace,\n\
    \                                     eventhub_name=eventhub_name,\n         \
    \                            credential=EventHubSharedKeyCredential(shared_access_policy,\
    \ shared_access_key))\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubProducerClient
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.eventhub._client_base.ClientBase
    type: azure.eventhub.aio._client_base_async.ClientBaseAsync
  langs:
  - python
  module: azure.eventhub.aio
  name: EventHubProducerClient
  summary: 'The EventHubProducerClient class defines a high level interface for

    sending events to the Azure Event Hubs service.'
  syntax:
    parameters:
    - description: 'The fully qualified host name for the Event Hubs namespace.

        This is likely to be similar to <yournamespace>.servicebus.windows.net'
      id: fully_qualified_namespace
      type:
      - str
    - description: The path of the specific Event Hub to connect the client to.
      id: eventhub_name
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        <xref:azure.eventhub.aio.EventHubSharedKeyCredential>, or credential objects

        generated by the azure-identity library and objects that implement the *get_token(self,
        *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
  type: class
  uid: azure.eventhub.aio.EventHubProducerClient
- class: azure.eventhub.aio.EventHubProducerClient
  example:
  - "Close down the handler.<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\9\\\\azure-eventhub-5.1.0b1\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n  \
    \ from azure.eventhub.aio import EventHubProducerClient\n   from azure.eventhub\
    \ import EventData\n\n   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n   try:\n       event_data_batch = await producer.create_batch()\n    \
    \   while True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # The\
    \ EventDataBatch object reaches its max_size.\n               # You can send the\
    \ full EventDataBatch object and create a new one here.\n               break\n\
    \       await producer.send_batch(event_data_batch)\n   finally:\n       # Close\
    \ down the producer handler.\n       await producer.close()\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubProducerClient.close
  langs:
  - python
  module: azure.eventhub.aio
  name: close() -> None
  namewithoutparameters: close
  summary: Close the Producer client underlying AMQP connection and links.
  syntax:
    content: close() -> None
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.close
- class: azure.eventhub.aio.EventHubProducerClient
  example:
  - "Create EventDataBatch object within limited size<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\9\\\\azure-eventhub-5.1.0b1\\\\samples\\\
    \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n       from azure.eventhub import EventData\n     \
    \  event_data_batch = await producer.create_batch()\n       while True:\n    \
    \       try:\n               event_data_batch.add(EventData('Message inside EventBatchData'))\n\
    \           except ValueError:\n               # The EventDataBatch object reaches\
    \ its max_size.\n               # You can send the full EventDataBatch object\
    \ and create a new one here.\n               break\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubProducerClient.create_batch
  langs:
  - python
  module: azure.eventhub.aio
  name: 'create_batch(*, partition_id: typing.Union[str, NoneType] = None, partition_key:
    typing.Union[str, NoneType] = None, max_size_in_bytes: typing.Union[int, NoneType]
    = None) -> azure.eventhub._common.EventDataBatch'
  namewithoutparameters: create_batch
  summary: 'Create an EventDataBatch object with the max size of all content being
    constrained by max_size_in_bytes.


    The max_size should be no greater than the max allowed message size defined by
    the service.'
  syntax:
    content: 'create_batch(*, partition_id: typing.Union[str, NoneType] = None, partition_key:
      typing.Union[str, NoneType] = None, max_size_in_bytes: typing.Union[int, NoneType]
      = None) -> azure.eventhub._common.EventDataBatch'
    parameters:
    - description: 'The specific partition ID to send to. Default is None, in which
        case the service

        will assign to all partitions using round-robin.'
      id: partition_id
      isRequired: true
      type:
      - str
    - description: 'With the given partition_key, event data will be sent to

        a particular partition of the Event Hub decided by the service.'
      id: partition_key
      isRequired: true
      type:
      - str
    - description: 'The maximum size of bytes data that an EventDataBatch object can
        hold. By

        default, the value is determined by your Event Hubs tier.'
      id: max_size_in_bytes
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.eventhub.EventDataBatch
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.create_batch
- class: azure.eventhub.aio.EventHubProducerClient
  example:
  - "Create a new instance of the EventHubProducerClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\source_code\\\\9\\\\azure-eventhub-5.1.0b1\\\\samples\\\
    \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio import EventHubProducerClient\n\
    \   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name\
    \ = os.environ['EVENT_HUB_NAME']\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n\n   ````\n"
  fullName: azure.eventhub.aio.EventHubProducerClient.from_connection_string
  langs:
  - python
  module: azure.eventhub.aio
  name: from_connection_string
  namewithoutparameters: from_connection_string
  summary: Create an EventHubProducerClient from a connection string.
  syntax:
    parameters:
    - description: The connection string of an Event Hub.
      id: conn_str
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.eventhub.aio.EventHubProducerClient
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.from_connection_string
- class: azure.eventhub.aio.EventHubProducerClient
  fullName: azure.eventhub.aio.EventHubProducerClient.get_eventhub_properties
  langs:
  - python
  module: azure.eventhub.aio
  name: get_eventhub_properties() -> typing.Dict[str, typing.Any]
  namewithoutparameters: get_eventhub_properties
  summary: "Get properties of the Event Hub.\n\nKeys in the returned dictionary include:\n\
    \n   * *eventhub_name* (str) \n\n   * *created_at* (UTC datetime.datetime) \n\n\
    \   * *partition_ids* (list[str])"
  syntax:
    content: get_eventhub_properties() -> typing.Dict[str, typing.Any]
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.get_eventhub_properties
- class: azure.eventhub.aio.EventHubProducerClient
  fullName: azure.eventhub.aio.EventHubProducerClient.get_partition_ids
  langs:
  - python
  module: azure.eventhub.aio
  name: get_partition_ids() -> typing.List[str]
  namewithoutparameters: get_partition_ids
  summary: Get partition IDs of the Event Hub.
  syntax:
    content: get_partition_ids() -> typing.List[str]
    return:
      type:
      - list[str]
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.get_partition_ids
- class: azure.eventhub.aio.EventHubProducerClient
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
  fullName: azure.eventhub.aio.EventHubProducerClient.get_partition_properties
  langs:
  - python
  module: azure.eventhub.aio
  name: 'get_partition_properties(partition_id: str) -> typing.Dict[str, typing.Any]'
  namewithoutparameters: get_partition_properties
  summary: "Get properties of the specified partition.\n\nKeys in the properties dictionary\
    \ include:\n\n   * *eventhub_name* (str) \n\n   * *id* (str) \n\n   * *beginning_sequence_number*\
    \ (int) \n\n   * *last_enqueued_sequence_number* (int) \n\n   * *last_enqueued_offset*\
    \ (str) \n\n   * *last_enqueued_time_utc* (UTC datetime.datetime) \n\n   * *is_empty*\
    \ (bool)"
  syntax:
    content: 'get_partition_properties(partition_id: str) -> typing.Dict[str, typing.Any]'
    parameters:
    - description: The target partition ID.
      id: partition_id
      isRequired: true
      type:
      - str
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.get_partition_properties
- class: azure.eventhub.aio.EventHubProducerClient
  example:
  - "Asynchronously sends event data<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\source_code\\\
    \\9\\\\azure-eventhub-5.1.0b1\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       async with\
    \ producer:\n           event_data_batch = await producer.create_batch()\n   \
    \        while True:\n               try:\n                   event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n               except ValueError:\n              \
    \     # The EventDataBatch object reaches its max_size.\n                   #\
    \ You can send the full EventDataBatch object and create a new one here.\n   \
    \                break\n           await producer.send_batch(event_data_batch)\n\
    \n   ````\n"
  exceptions:
  - type: azure.eventhub.exceptions.AuthenticationError
  fullName: azure.eventhub.aio.EventHubProducerClient.send_batch
  langs:
  - python
  module: azure.eventhub.aio
  name: 'send_batch(event_data_batch: azure.eventhub._common.EventDataBatch, *, timeout:
    typing.Union[int, float, NoneType] = None) -> None'
  namewithoutparameters: send_batch
  summary: Sends event data and blocks until acknowledgement is received or operation
    times out.
  syntax:
    content: 'send_batch(event_data_batch: azure.eventhub._common.EventDataBatch,
      *, timeout: typing.Union[int, float, NoneType] = None) -> None'
    parameters:
    - description: The EventDataBatch object to be sent.
      id: event_data_batch
      isRequired: true
      type:
      - azure.eventhub.EventDataBatch
    - description: 'The maximum wait time to send the event data.

        If not specified, the default wait time specified when the producer was created
        will be used.'
      id: timeout
      isRequired: true
      type:
      - float
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.aio.EventHubProducerClient.send_batch
references:
- fullName: azure.eventhub.aio.EventHubProducerClient.close
  isExternal: false
  name: close() -> None
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.close
- fullName: azure.eventhub.aio.EventHubProducerClient.create_batch
  isExternal: false
  name: 'create_batch(*, partition_id: typing.Union[str, NoneType] = None, partition_key:
    typing.Union[str, NoneType] = None, max_size_in_bytes: typing.Union[int, NoneType]
    = None) -> azure.eventhub._common.EventDataBatch'
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.create_batch
- fullName: azure.eventhub.aio.EventHubProducerClient.from_connection_string
  isExternal: false
  name: from_connection_string
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.from_connection_string
- fullName: azure.eventhub.aio.EventHubProducerClient.get_eventhub_properties
  isExternal: false
  name: get_eventhub_properties() -> typing.Dict[str, typing.Any]
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.get_eventhub_properties
- fullName: azure.eventhub.aio.EventHubProducerClient.get_partition_ids
  isExternal: false
  name: get_partition_ids() -> typing.List[str]
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.get_partition_ids
- fullName: azure.eventhub.aio.EventHubProducerClient.get_partition_properties
  isExternal: false
  name: 'get_partition_properties(partition_id: str) -> typing.Dict[str, typing.Any]'
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.get_partition_properties
- fullName: azure.eventhub.aio.EventHubProducerClient.send_batch
  isExternal: false
  name: 'send_batch(event_data_batch: azure.eventhub._common.EventDataBatch, *, timeout:
    typing.Union[int, float, NoneType] = None) -> None'
  parent: azure.eventhub.aio.EventHubProducerClient
  uid: azure.eventhub.aio.EventHubProducerClient.send_batch
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
