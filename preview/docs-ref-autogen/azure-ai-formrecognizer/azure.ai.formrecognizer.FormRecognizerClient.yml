### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content
  - azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content_from_url
  - azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms
  - azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms_from_url
  - azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts
  - azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts_from_url
  - azure.ai.formrecognizer.FormRecognizerClient.close
  - azure.ai.formrecognizer.FormRecognizerClient.get_form_training_client
  class: azure.ai.formrecognizer.FormRecognizerClient
  example:
  - "Creating the FormRecognizerClient with an endpoint and API key.<!--[!code-python[Main](les\\\
    sample_get_bounding_boxes.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\11\\\\azure-ai-formrecognizer-1.0.0b2\\\\samples\\\
    \\sample_get_bounding_boxes.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.core.credentials import AzureKeyCredential\n   from\
    \ azure.ai.formrecognizer import FormRecognizerClient\n   form_recognizer_client\
    \ = FormRecognizerClient(\n       endpoint=self.endpoint, credential=AzureKeyCredential(self.key)\n\
    \   )\n\n   ````\n"
  fullName: azure.ai.formrecognizer.FormRecognizerClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.ai.formrecognizer
  name: FormRecognizerClient
  summary: 'FormRecognizerClient extracts information from forms and images into structured
    data.

    It is the interface to use for analyzing receipts, recognizing content/layout
    from

    forms, and analyzing custom forms from trained models. It provides different methods

    based on inputs from a URL and inputs from a stream.'
  syntax:
    content: FormRecognizerClient(endpoint, credential, **kwargs)
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and hostname,

        for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This is an instance of AzureKeyCredential if using an API key.'
      id: credential
      type:
      - azure.core.credentials.AzureKeyCredential
  type: class
  uid: azure.ai.formrecognizer.FormRecognizerClient
- class: azure.ai.formrecognizer.FormRecognizerClient
  example:
  - "Recognize text and content/layout information from a form.<!--[!code-python[Main](les\\\
    sample_recognize_content.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\11\\\\azure-ai-formrecognizer-1.0.0b2\\\\samples\\\
    \\sample_recognize_content.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.core.credentials import AzureKeyCredential\n   from\
    \ azure.ai.formrecognizer import FormRecognizerClient\n   form_recognizer_client\
    \ = FormRecognizerClient(endpoint=self.endpoint, credential=AzureKeyCredential(self.key))\n\
    \   with open(\"sample_forms/forms/Invoice_1.pdf\", \"rb\") as f:\n       poller\
    \ = form_recognizer_client.begin_recognize_content(stream=f.read())\n   contents\
    \ = poller.result()\n\n   for idx, content in enumerate(contents):\n       print(\"\
    ----Recognizing content from page #{}----\".format(idx))\n       print(\"Has width:\
    \ {} and height: {}, measured with unit: {}\".format(\n           content.width,\n\
    \           content.height,\n           content.unit\n       ))\n       for table_idx,\
    \ table in enumerate(content.tables):\n           print(\"Table # {} has {} rows\
    \ and {} columns\".format(table_idx, table.row_count, table.column_count))\n \
    \          for cell in table.cells:\n               print(\"...Cell[{}][{}] has\
    \ text '{}' within bounding box '{}'\".format(\n                   cell.row_index,\n\
    \                   cell.column_index,\n                   cell.text,\n      \
    \             format_bounding_box(cell.bounding_box)\n               ))\n\n  \
    \ ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content
  langs:
  - python
  module: azure.ai.formrecognizer
  name: begin_recognize_content(stream, **kwargs)
  namewithoutparameters: begin_recognize_content
  summary: 'Extract text and content/layout information from a given document.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'' or ''image/tiff''.'
  syntax:
    content: begin_recognize_content(stream, **kwargs)
    parameters:
    - description: .pdf, .jpg, .png or .tiff type file stream.
      id: stream
      isRequired: true
      type:
      - stream
    return:
      description: 'An instance of an LROPoller. Call *result()* on the poller

        object to return a list[<xref:azure.ai.formrecognizer.FormPage>].'
      type:
      - azure.core.polling.LROPoller[list[azure.ai.formrecognizer.FormPage]]
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content
- class: azure.ai.formrecognizer.FormRecognizerClient
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content_from_url
  langs:
  - python
  module: azure.ai.formrecognizer
  name: begin_recognize_content_from_url(url, **kwargs)
  namewithoutparameters: begin_recognize_content_from_url
  summary: 'Extract text and layout information from a given document.

    The input document must be the location (Url) of the document to be analyzed.'
  syntax:
    content: begin_recognize_content_from_url(url, **kwargs)
    parameters:
    - description: The url of the document.
      id: url
      isRequired: true
      type:
      - str
    return:
      description: 'An instance of an LROPoller. Call *result()* on the poller

        object to return a list[<xref:azure.ai.formrecognizer.FormPage>].'
      type:
      - azure.core.polling.LROPoller[list[azure.ai.formrecognizer.FormPage]]
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content_from_url
- class: azure.ai.formrecognizer.FormRecognizerClient
  example:
  - "Recognize fields and values from a custom form.<!--[!code-python[Main](les\\\
    sample_recognize_custom_forms.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\11\\\\azure-ai-formrecognizer-1.0.0b2\\\\\
    samples\\\\sample_recognize_custom_forms.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.ai.formrecognizer import FormRecognizerClient\n   form_recognizer_client\
    \ = FormRecognizerClient(\n       endpoint=self.endpoint, credential=AzureKeyCredential(self.key)\n\
    \   )\n\n   # Make sure your form's type is included in the list of form types\
    \ the custom model can recognize\n   with open(\"sample_forms/forms/Form_1.jpg\"\
    , \"rb\") as f:\n       poller = form_recognizer_client.begin_recognize_custom_forms(\n\
    \           model_id=self.model_id, stream=f.read()\n       )\n   forms = poller.result()\n\
    \n   for idx, form in enumerate(forms):\n       print(\"--------Recognizing Form\
    \ #{}--------\".format(idx))\n       print(\"Form {} has type {}\".format(idx,\
    \ form.form_type))\n       for name, field in form.fields.items():\n         \
    \  # each field is of type FormField\n           # The value of the field can\
    \ also be a FormField, or a list of FormFields\n           # In our sample, it\
    \ is just a FormField.\n           print(\"...Field '{}' has value '{}' with a\
    \ confidence score of {}\".format(\n               name, field.value, field.confidence\n\
    \           ))\n           # label data is populated if you are using a model\
    \ trained with unlabeled data, since the service needs to make predictions for\n\
    \           # labels if not explicitly given to it.\n           if field.label_data:\n\
    \               print(\"...Field '{}' has label '{}' with a confidence score of\
    \ {}\".format(\n                   name,\n                   field.label_data.text,\n\
    \                   field.confidence\n               ))\n       print(\"-----------------------------------\"\
    )\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms
  langs:
  - python
  module: azure.ai.formrecognizer
  name: begin_recognize_custom_forms(model_id, stream, **kwargs)
  namewithoutparameters: begin_recognize_custom_forms
  summary: 'Analyze a custom form with a model trained with or without labels. The
    form

    to analyze should be of the same type as the forms that were used to train the
    model.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'' or ''image/tiff''.'
  syntax:
    content: begin_recognize_custom_forms(model_id, stream, **kwargs)
    parameters:
    - description: Custom model identifier.
      id: model_id
      isRequired: true
      type:
      - str
    - description: .pdf, .jpg, .png or .tiff type file stream.
      id: stream
      isRequired: true
      type:
      - stream
    return:
      description: 'An instance of an LROPoller. Call *result()* on the poller

        object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
      type:
      - azure.core.polling.LROPoller[list[azure.ai.formrecognizer.RecognizedForm]
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms
- class: azure.ai.formrecognizer.FormRecognizerClient
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms_from_url
  langs:
  - python
  module: azure.ai.formrecognizer
  name: begin_recognize_custom_forms_from_url(model_id, url, **kwargs)
  namewithoutparameters: begin_recognize_custom_forms_from_url
  summary: 'Analyze a custom form with a model trained with or without labels. The
    form

    to analyze should be of the same type as the forms that were used to train the
    model.

    The input document must be the location (Url) of the document to be analyzed.'
  syntax:
    content: begin_recognize_custom_forms_from_url(model_id, url, **kwargs)
    parameters:
    - description: Custom model identifier.
      id: model_id
      isRequired: true
      type:
      - str
    - description: The url of the document.
      id: url
      isRequired: true
      type:
      - str
    return:
      description: 'An instance of an LROPoller. Call *result()* on the poller

        object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
      type:
      - azure.core.polling.LROPoller[list[azure.ai.formrecognizer.RecognizedForm]
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms_from_url
- class: azure.ai.formrecognizer.FormRecognizerClient
  example:
  - "Recognize US sales receipt fields.<!--[!code-python[Main](les\\sample_recognize_receipts.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\11\\\\azure-ai-formrecognizer-1.0.0b2\\\\samples\\\\sample_recognize_receipts.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer import FormRecognizerClient\n\
    \   form_recognizer_client = FormRecognizerClient(\n       endpoint=self.endpoint,\
    \ credential=AzureKeyCredential(self.key)\n   )\n   with open(\"sample_forms/receipt/contoso-allinone.jpg\"\
    , \"rb\") as f:\n       poller = form_recognizer_client.begin_recognize_receipts(stream=f.read())\n\
    \   receipts = poller.result()\n\n   for idx, receipt in enumerate(receipts):\n\
    \       print(\"--------Recognizing receipt #{}--------\".format(idx))\n     \
    \  print(\"Receipt Type: {} has confidence: {}\".format(receipt.receipt_type.type,\
    \ receipt.receipt_type.confidence))\n       print(\"Merchant Name: {} has confidence:\
    \ {}\".format(receipt.merchant_name.value, receipt.merchant_name.confidence))\n\
    \       print(\"Transaction Date: {} has confidence: {}\".format(receipt.transaction_date.value,\
    \ receipt.transaction_date.confidence))\n       print(\"Receipt items:\")\n  \
    \     for item in receipt.receipt_items:\n           print(\"...Item Name: {}\
    \ has confidence: {}\".format(item.name.value, item.name.confidence))\n      \
    \     print(\"...Item Quantity: {} has confidence: {}\".format(item.quantity.value,\
    \ item.quantity.confidence))\n           print(\"...Individual Item Price: {}\
    \ has confidence: {}\".format(item.price.value, item.price.confidence))\n    \
    \       print(\"...Total Item Price: {} has confidence: {}\".format(item.total_price.value,\
    \ item.total_price.confidence))\n       print(\"Subtotal: {} has confidence: {}\"\
    .format(receipt.subtotal.value, receipt.subtotal.confidence))\n       print(\"\
    Tax: {} has confidence: {}\".format(receipt.tax.value, receipt.tax.confidence))\n\
    \       print(\"Tip: {} has confidence: {}\".format(receipt.tip.value, receipt.tip.confidence))\n\
    \       print(\"Total: {} has confidence: {}\".format(receipt.total.value, receipt.total.confidence))\n\
    \       print(\"--------------------------------------\")\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts
  langs:
  - python
  module: azure.ai.formrecognizer
  name: begin_recognize_receipts(stream, **kwargs)
  namewithoutparameters: begin_recognize_receipts
  summary: 'Extract field text and semantic values from a given US sales receipt.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'' or ''image/tiff''.'
  syntax:
    content: begin_recognize_receipts(stream, **kwargs)
    parameters:
    - description: '.pdf, .jpg, .png or .tiff type file stream.

        Currently only supports US sales receipts.'
      id: stream
      isRequired: true
      type:
      - stream
    return:
      description: 'An instance of an LROPoller. Call *result()* on the poller

        object to return a list[<xref:azure.ai.formrecognizer.USReceipt>].'
      type:
      - azure.core.polling.LROPoller[list[azure.ai.formrecognizer.USReceipt]]
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts
- class: azure.ai.formrecognizer.FormRecognizerClient
  example:
  - "Recognize US sales receipt fields from a URL.<!--[!code-python[Main](les\\sample_recognize_receipts_from_url.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\11\\\\azure-ai-formrecognizer-1.0.0b2\\\\samples\\\\sample_recognize_receipts_from_url.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer import FormRecognizerClient\n\
    \   form_recognizer_client = FormRecognizerClient(\n       endpoint=self.endpoint,\
    \ credential=AzureKeyCredential(self.key)\n   )\n   url = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-python/master/sdk/formrecognizer/azure-ai-formrecognizer/tests/sample_forms/receipt/contoso-receipt.png\"\
    \n   poller = form_recognizer_client.begin_recognize_receipts_from_url(url=url)\n\
    \   receipts = poller.result()\n\n   for idx, receipt in enumerate(receipts):\n\
    \       print(\"--------Recognizing receipt #{}--------\".format(idx))\n     \
    \  print(\"Receipt Type: {} has confidence: {}\".format(receipt.receipt_type.type,\
    \ receipt.receipt_type.confidence))\n       print(\"Merchant Name: {} has confidence:\
    \ {}\".format(receipt.merchant_name.value, receipt.merchant_name.confidence))\n\
    \       print(\"Transaction Date: {} has confidence: {}\".format(receipt.transaction_date.value,\
    \ receipt.transaction_date.confidence))\n       print(\"Receipt items:\")\n  \
    \     for item in receipt.receipt_items:\n           print(\"...Item Name: {}\
    \ has confidence: {}\".format(item.name.value, item.name.confidence))\n      \
    \     print(\"...Item Quantity: {} has confidence: {}\".format(item.quantity.value,\
    \ item.quantity.confidence))\n           print(\"...Individual Item Price: {}\
    \ has confidence: {}\".format(item.price.value, item.price.confidence))\n    \
    \       print(\"...Total Item Price: {} has confidence: {}\".format(item.total_price.value,\
    \ item.total_price.confidence))\n       print(\"Subtotal: {} has confidence: {}\"\
    .format(receipt.subtotal.value, receipt.subtotal.confidence))\n       print(\"\
    Tax: {} has confidence: {}\".format(receipt.tax.value, receipt.tax.confidence))\n\
    \       print(\"Tip: {} has confidence: {}\".format(receipt.tip.value, receipt.tip.confidence))\n\
    \       print(\"Total: {} has confidence: {}\".format(receipt.total.value, receipt.total.confidence))\n\
    \       print(\"--------------------------------------\")\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts_from_url
  langs:
  - python
  module: azure.ai.formrecognizer
  name: begin_recognize_receipts_from_url(url, **kwargs)
  namewithoutparameters: begin_recognize_receipts_from_url
  summary: 'Extract field text and semantic values from a given US sales receipt.

    The input document must be the location (Url) of the receipt to be analyzed.'
  syntax:
    content: begin_recognize_receipts_from_url(url, **kwargs)
    parameters:
    - description: The url of the receipt. Currently only supports US sales receipts.
      id: url
      isRequired: true
      type:
      - str
    return:
      description: 'An instance of an LROPoller. Call *result()* on the poller

        object to return a list[<xref:azure.ai.formrecognizer.USReceipt>].'
      type:
      - azure.core.polling.LROPoller[list[azure.ai.formrecognizer.USReceipt]]
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts_from_url
- class: azure.ai.formrecognizer.FormRecognizerClient
  fullName: azure.ai.formrecognizer.FormRecognizerClient.close
  langs:
  - python
  module: azure.ai.formrecognizer
  name: close()
  namewithoutparameters: close
  summary: Close the <xref:azure.ai.formrecognizer.FormRecognizerClient> session.
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.close
- class: azure.ai.formrecognizer.FormRecognizerClient
  fullName: azure.ai.formrecognizer.FormRecognizerClient.get_form_training_client
  langs:
  - python
  module: azure.ai.formrecognizer
  name: get_form_training_client(**kwargs)
  namewithoutparameters: get_form_training_client
  summary: Get an instance of a FormTrainingClient from FormRecognizerClient.
  syntax:
    content: get_form_training_client(**kwargs)
    parameters: []
    return:
      description: A FormTrainingClient
      type:
      - azure.ai.formrecognizer.FormTrainingClient
  type: method
  uid: azure.ai.formrecognizer.FormRecognizerClient.get_form_training_client
references:
- fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content
  isExternal: false
  name: begin_recognize_content(stream, **kwargs)
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content
- fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content_from_url
  isExternal: false
  name: begin_recognize_content_from_url(url, **kwargs)
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content_from_url
- fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms
  isExternal: false
  name: begin_recognize_custom_forms(model_id, stream, **kwargs)
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms
- fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms_from_url
  isExternal: false
  name: begin_recognize_custom_forms_from_url(model_id, url, **kwargs)
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms_from_url
- fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts
  isExternal: false
  name: begin_recognize_receipts(stream, **kwargs)
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts
- fullName: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts_from_url
  isExternal: false
  name: begin_recognize_receipts_from_url(url, **kwargs)
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts_from_url
- fullName: azure.ai.formrecognizer.FormRecognizerClient.close
  isExternal: false
  name: close()
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.close
- fullName: azure.ai.formrecognizer.FormRecognizerClient.get_form_training_client
  isExternal: false
  name: get_form_training_client(**kwargs)
  parent: azure.ai.formrecognizer.FormRecognizerClient
  uid: azure.ai.formrecognizer.FormRecognizerClient.get_form_training_client
- fullName: azure.core.polling.LROPoller[list[azure.ai.formrecognizer.FormPage]]
  name: LROPoller[list[FormPage]]
  spec.python:
  - fullName: azure.core.polling.LROPoller
    name: LROPoller
    uid: azure.core.polling.LROPoller
  - fullName: '['
    name: '['
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.formrecognizer.FormPage
    name: FormPage
    uid: azure.ai.formrecognizer.FormPage
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.LROPoller[list[azure.ai.formrecognizer.FormPage]]
- fullName: azure.core.polling.LROPoller[list[azure.ai.formrecognizer.RecognizedForm]
  name: LROPoller[list[RecognizedForm]
  spec.python:
  - fullName: azure.core.polling.LROPoller
    name: LROPoller
    uid: azure.core.polling.LROPoller
  - fullName: '['
    name: '['
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.formrecognizer.RecognizedForm
    name: RecognizedForm
    uid: azure.ai.formrecognizer.RecognizedForm
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.LROPoller[list[azure.ai.formrecognizer.RecognizedForm]
- fullName: azure.core.polling.LROPoller[list[azure.ai.formrecognizer.USReceipt]]
  name: LROPoller[list[USReceipt]]
  spec.python:
  - fullName: azure.core.polling.LROPoller
    name: LROPoller
    uid: azure.core.polling.LROPoller
  - fullName: '['
    name: '['
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.formrecognizer.USReceipt
    name: USReceipt
    uid: azure.ai.formrecognizer.USReceipt
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.LROPoller[list[azure.ai.formrecognizer.USReceipt]]
