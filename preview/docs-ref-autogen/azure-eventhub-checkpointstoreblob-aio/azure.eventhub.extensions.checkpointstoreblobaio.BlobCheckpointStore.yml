### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.claim_ownership
  - azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.close
  - azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.from_connection_string
  - azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_checkpoints
  - azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_ownership
  - azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.update_checkpoint
  class: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    type: azure.eventhub.aio._eventprocessor.checkpoint_store.CheckpointStore
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblobaio
  name: BlobCheckpointStore
  summary: 'A CheckpointStore that uses Azure Blob Storage to store the partition
    ownership and checkpoint data.


    This class implements methods list_ownership, claim_ownership, update_checkpoint
    and list_checkpoints that are

    defined in class azure.eventhub.aio.CheckpointStore of package azure-eventhub.'
  syntax:
    content: BlobCheckpointStore(blob_account_url, container_name, *, credential=None,
      **kwargs)
    parameters:
    - description: The URI to the storage account.
      id: blob_account_url
      type:
      - str
    - description: The name of the container for the blobs.
      id: container_name
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
  type: class
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
- class: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.claim_ownership
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblobaio
  name: 'claim_ownership(ownership_list: typing.Iterable[typing.Dict[str, typing.Any]])
    -> typing.Iterable[typing.Dict[str, typing.Any]]'
  namewithoutparameters: claim_ownership
  syntax:
    content: 'claim_ownership(ownership_list: typing.Iterable[typing.Dict[str, typing.Any]])
      -> typing.Iterable[typing.Dict[str, typing.Any]]'
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.claim_ownership
- class: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.close
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblobaio
  name: close() -> None
  namewithoutparameters: close
  summary: Close an open HTTP session and connection.
  syntax:
    content: close() -> None
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.close
- class: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.from_connection_string
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblobaio
  name: from_connection_string(conn_str, container_name, *, credential=None, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create BlobCheckpointStore from a storage connection string.
  syntax:
    content: from_connection_string(conn_str, container_name, *, credential=None,
      **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The container name for the blobs.
      id: container_name
      isRequired: true
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token, or the connection string already has
        shared

        access key values. The value can be a SAS token string, an account shared
        access

        key, or an instance of a TokenCredentials class from azure.identity.

        Credentials provided here will take precedence over those in the connection
        string.'
      id: credential
      isRequired: true
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.from_connection_string
- class: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_checkpoints
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblobaio
  name: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
  namewithoutparameters: list_checkpoints
  syntax:
    content: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
    parameters:
    - id: fully_qualified_namespace
      isRequired: true
    - id: eventhub_name
      isRequired: true
    - id: consumer_group
      isRequired: true
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_checkpoints
- class: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_ownership
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblobaio
  name: 'list_ownership(fully_qualified_namespace: str, eventhub_name: str, consumer_group:
    str) -> typing.Iterable[typing.Dict[str, typing.Any]]'
  namewithoutparameters: list_ownership
  syntax:
    content: 'list_ownership(fully_qualified_namespace: str, eventhub_name: str, consumer_group:
      str) -> typing.Iterable[typing.Dict[str, typing.Any]]'
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_ownership
- class: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.update_checkpoint
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblobaio
  name: 'update_checkpoint(checkpoint: typing.Dict[str, typing.Any]) -> None'
  namewithoutparameters: update_checkpoint
  syntax:
    content: 'update_checkpoint(checkpoint: typing.Dict[str, typing.Any]) -> None'
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.update_checkpoint
references:
- fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.claim_ownership
  isExternal: false
  name: 'claim_ownership(ownership_list: typing.Iterable[typing.Dict[str, typing.Any]])
    -> typing.Iterable[typing.Dict[str, typing.Any]]'
  parent: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.claim_ownership
- fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.close
  isExternal: false
  name: close() -> None
  parent: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.close
- fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, container_name, *, credential=None, **kwargs)
  parent: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.from_connection_string
- fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_checkpoints
  isExternal: false
  name: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
  parent: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_checkpoints
- fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_ownership
  isExternal: false
  name: 'list_ownership(fully_qualified_namespace: str, eventhub_name: str, consumer_group:
    str) -> typing.Iterable[typing.Dict[str, typing.Any]]'
  parent: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_ownership
- fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.update_checkpoint
  isExternal: false
  name: 'update_checkpoint(checkpoint: typing.Dict[str, typing.Any]) -> None'
  parent: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.update_checkpoint
