### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.ServiceBusReceiver.from_connection_string
  - azure.servicebus.ServiceBusReceiver.next
  - azure.servicebus.ServiceBusReceiver.peek
  - azure.servicebus.ServiceBusReceiver.receive
  - azure.servicebus.ServiceBusReceiver.receive_deferred_messages
  class: azure.servicebus.ServiceBusReceiver
  example:
  - "Create a new instance of the ServiceBusReceiver.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusReceiver,\
    \ ServiceBusSharedKeyCredential\n   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
    \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
    \ = os.environ['SERVICE_BUS_SAS_KEY']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
    \   queue_receiver = ServiceBusReceiver(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
    \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
    \           shared_access_key\n       ),\n       queue_name=queue_name\n   )\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusReceiver
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus._base_handler.BaseHandler
  - inheritance:
    - type: builtins.object
    type: azure.servicebus._common.receiver_mixins.ReceiverMixin
  langs:
  - python
  module: azure.servicebus
  name: ServiceBusReceiver
  summary: 'The ServiceBusReceiver class defines a high level interface for

    receiving messages from the Azure Service Bus Queue or Topic Subscription.'
  syntax:
    content: ServiceBusReceiver(fully_qualified_namespace, credential, **kwargs)
    parameters:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        <xref:azure.servicebus.ServiceBusSharedKeyCredential>, or credential objects

        generated by the azure-identity library and objects that implement the *get_token(self,
        *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
    variables:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: The path of the entity that the client connects to.
      id: entity_path
      type:
      - str
  type: class
  uid: azure.servicebus.ServiceBusReceiver
- class: azure.servicebus.ServiceBusReceiver
  example:
  - "Create a new instance of the ServiceBusReceiver from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus import ServiceBusReceiver\n\
    \   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n   queue_name\
    \ = os.environ['SERVICE_BUS_QUEUE_NAME']\n   queue_receiver = ServiceBusReceiver.from_connection_string(\n\
    \       conn_str=servicebus_connection_str,\n       queue_name=queue_name\n  \
    \ )\n\n   ````\n"
  fullName: azure.servicebus.ServiceBusReceiver.from_connection_string
  langs:
  - python
  module: azure.servicebus
  name: from_connection_string(conn_str, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create a ServiceBusReceiver from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of a Service Bus.
      id: conn_str
      isRequired: true
    - id: conn_str
      isRequired: true
    return:
      type:
      - azure.servicebus.ServiceBusReceiverClient
  type: method
  uid: azure.servicebus.ServiceBusReceiver.from_connection_string
- class: azure.servicebus.ServiceBusReceiver
  fullName: azure.servicebus.ServiceBusReceiver.next
  langs:
  - python
  module: azure.servicebus
  name: next()
  namewithoutparameters: next
  syntax:
    content: next()
    parameters: []
  type: method
  uid: azure.servicebus.ServiceBusReceiver.next
- class: azure.servicebus.ServiceBusReceiver
  example:
  - "Look at pending messages in the queue.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   with servicebus_receiver:\n       messages = servicebus_receiver.peek()\n\
    \       for message in messages:\n           print(message)\n\n   ````\n"
  fullName: azure.servicebus.ServiceBusReceiver.peek
  langs:
  - python
  module: azure.servicebus
  name: peek(message_count=1, sequence_number=None)
  namewithoutparameters: peek
  summary: 'Browse messages currently pending in the queue.


    Peeked messages are not removed from queue, nor are they locked. They cannot be
    completed,

    deferred or dead-lettered.'
  syntax:
    content: peek(message_count=1, sequence_number=None)
    parameters:
    - defaultValue: '1'
      description: 'The maximum number of messages to try and peek. The default

        value is 1.'
      id: message_count
      type:
      - int
    - defaultValue: None
      description: A message sequence number from which to start browsing messages.
      id: sequence_number
      type:
      - int
    return:
      type:
      - list[azure.servicebus.PeekMessage]
  type: method
  uid: azure.servicebus.ServiceBusReceiver.peek
- class: azure.servicebus.ServiceBusReceiver
  example:
  - "Receive messages from ServiceBus.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   with servicebus_receiver:\n       messages = servicebus_receiver.receive(max_wait_time=5)\n\
    \       for message in messages:\n           print(message)\n           message.complete()\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusReceiver.receive
  langs:
  - python
  module: azure.servicebus
  name: receive(max_batch_size=None, max_wait_time=None)
  namewithoutparameters: receive
  summary: 'Receive a batch of messages at once.


    This approach it optimal if you wish to process multiple messages simultaneously.
    Note that the

    number of messages retrieved in a single batch will be dependent on

    whether *prefetch* was set for the receiver. This call will prioritize returning

    quickly over meeting a specified batch size, and so will return as soon as at
    least

    one message is received and there is a gap in incoming messages regardless

    of the specified batch size.'
  syntax:
    content: receive(max_batch_size=None, max_wait_time=None)
    parameters:
    - defaultValue: None
      description: 'Maximum number of messages in the batch. Actual number

        returned will depend on prefetch size and incoming stream rate.'
      id: max_batch_size
      type:
      - int
    - defaultValue: None
      description: 'Maximum time to wait in seconds for the first message to arrive.

        If no messages arrive, and no timeout is specified, this call will not return

        until the connection is closed. If specified, an no messages arrive within
        the

        timeout period, an empty list will be returned.'
      id: max_wait_time
      type:
      - float
    return:
      type:
      - list[azure.servicebus.Message]
  type: method
  uid: azure.servicebus.ServiceBusReceiver.receive
- class: azure.servicebus.ServiceBusReceiver
  example:
  - "Receive deferred messages from ServiceBus.<!--[!code-python[Main](les\\sync_samples\\\
    sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\\sync_samples\\\
    \\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   with servicebus_receiver:\n       deferred_sequenced_numbers = []\n     \
    \  messages = servicebus_receiver.receive(max_wait_time=5)\n       for message\
    \ in messages:\n           deferred_sequenced_numbers.append(message.sequence_number)\n\
    \           print(message)\n           message.defer()\n\n       received_deferred_msg\
    \ = servicebus_receiver.receive_deferred_messages(\n           sequence_numbers=deferred_sequenced_numbers\n\
    \       )\n\n       for msg in received_deferred_msg:\n           msg.complete()\n\
    \n   ````\n"
  fullName: azure.servicebus.ServiceBusReceiver.receive_deferred_messages
  langs:
  - python
  module: azure.servicebus
  name: receive_deferred_messages(sequence_numbers)
  namewithoutparameters: receive_deferred_messages
  summary: 'Receive messages that have previously been deferred.


    When receiving deferred messages from a partitioned entity, all of the supplied

    sequence numbers must be messages from the same partition.'
  syntax:
    content: receive_deferred_messages(sequence_numbers)
    parameters:
    - description: 'A list of the sequence numbers of messages that have been

        deferred.'
      id: sequence_numbers
      isRequired: true
      type:
      - list[int]
    return:
      type:
      - list[azure.servicebus.ReceivedMessage]
  type: method
  uid: azure.servicebus.ServiceBusReceiver.receive_deferred_messages
references:
- fullName: azure.servicebus.ServiceBusReceiver.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.servicebus.ServiceBusReceiver
  uid: azure.servicebus.ServiceBusReceiver.from_connection_string
- fullName: azure.servicebus.ServiceBusReceiver.next
  isExternal: false
  name: next()
  parent: azure.servicebus.ServiceBusReceiver
  uid: azure.servicebus.ServiceBusReceiver.next
- fullName: azure.servicebus.ServiceBusReceiver.peek
  isExternal: false
  name: peek(message_count=1, sequence_number=None)
  parent: azure.servicebus.ServiceBusReceiver
  uid: azure.servicebus.ServiceBusReceiver.peek
- fullName: azure.servicebus.ServiceBusReceiver.receive
  isExternal: false
  name: receive(max_batch_size=None, max_wait_time=None)
  parent: azure.servicebus.ServiceBusReceiver
  uid: azure.servicebus.ServiceBusReceiver.receive
- fullName: azure.servicebus.ServiceBusReceiver.receive_deferred_messages
  isExternal: false
  name: receive_deferred_messages(sequence_numbers)
  parent: azure.servicebus.ServiceBusReceiver
  uid: azure.servicebus.ServiceBusReceiver.receive_deferred_messages
- fullName: list[azure.servicebus.PeekMessage]
  name: list[PeekMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.PeekMessage
    name: PeekMessage
    uid: azure.servicebus.PeekMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.PeekMessage]
- fullName: list[azure.servicebus.Message]
  name: list[Message]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.Message
    name: Message
    uid: azure.servicebus.Message
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.Message]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: list[azure.servicebus.ReceivedMessage]
  name: list[ReceivedMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.ReceivedMessage
    name: ReceivedMessage
    uid: azure.servicebus.ReceivedMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.ReceivedMessage]
