### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.ServiceBusSender.cancel_scheduled_messages
  - azure.servicebus.aio.ServiceBusSender.create_batch
  - azure.servicebus.aio.ServiceBusSender.from_connection_string
  - azure.servicebus.aio.ServiceBusSender.schedule
  - azure.servicebus.aio.ServiceBusSender.send
  class: azure.servicebus.aio.ServiceBusSender
  example:
  - "Create a new instance of the ServiceBusSender.<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   import os\n   from azure.servicebus.aio import ServiceBusSender,\
    \ ServiceBusSharedKeyCredential\n   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
    \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
    \ = os.environ['SERVICE_BUS_SAS_KEY']\n   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n\
    \   queue_sender = ServiceBusSender(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
    \       credential=ServiceBusSharedKeyCredential(\n           shared_access_policy,\n\
    \           shared_access_key\n       ),\n       queue_name=queue_name\n   )\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusSender
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.servicebus._base_handler.BaseHandler
    type: azure.servicebus.aio._base_handler_async.BaseHandlerAsync
  - inheritance:
    - type: builtins.object
    type: azure.servicebus._servicebus_sender.SenderMixin
  langs:
  - python
  module: azure.servicebus.aio
  name: ServiceBusSender
  summary: 'The ServiceBusSender class defines a high level interface for

    sending messages to the Azure Service Bus Queue or Topic.'
  syntax:
    parameters:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        <xref:azure.servicebus.ServiceBusSharedKeyCredential>, or credential objects

        generated by the azure-identity library and objects that implement the *get_token(self,
        *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
    variables:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: The name of the entity that the client connects to.
      id: entity_name
      type:
      - str
  type: class
  uid: azure.servicebus.aio.ServiceBusSender
- class: azure.servicebus.aio.ServiceBusSender
  example:
  - "Cancelling messages scheduled to be sent in future<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   async with servicebus_sender:\n\
    \       await servicebus_sender.cancel_scheduled_messages(sequence_nums)\n\n \
    \  ````\n"
  fullName: azure.servicebus.aio.ServiceBusSender.cancel_scheduled_messages
  langs:
  - python
  module: azure.servicebus.aio
  name: cancel_scheduled_messages(sequence_numbers)
  namewithoutparameters: cancel_scheduled_messages
  summary: Cancel one or more messages that have previously been scheduled and are
    still pending.
  syntax:
    content: cancel_scheduled_messages(sequence_numbers)
    parameters:
    - description: The sequence numbers of the scheduled messages.
      id: sequence_numbers
      isRequired: true
      type:
      - int
      - list[int]
    return:
      type:
      - None
  type: method
  uid: azure.servicebus.aio.ServiceBusSender.cancel_scheduled_messages
- class: azure.servicebus.aio.ServiceBusSender
  example:
  - "Create BatchMessage object within limited size<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   async with servicebus_sender:\n       batch_message = await\
    \ servicebus_sender.create_batch()\n       batch_message.add(Message(\"Single\
    \ message inside batch\"))\n\n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusSender.create_batch
  langs:
  - python
  module: azure.servicebus.aio
  name: create_batch(max_size_in_bytes=None)
  namewithoutparameters: create_batch
  summary: 'Create a BatchMessage object with the max size of all content being constrained
    by max_size_in_bytes.

    The max_size should be no greater than the max allowed message size defined by
    the service.'
  syntax:
    content: create_batch(max_size_in_bytes=None)
    parameters:
    - defaultValue: None
      description: 'The maximum size of bytes data that a BatchMessage object can
        hold. By

        default, the value is determined by your Service Bus tier.'
      id: max_size_in_bytes
      type:
      - int
    return:
      type:
      - azure.servicebus.BatchMessage
  type: method
  uid: azure.servicebus.aio.ServiceBusSender.create_batch
- class: azure.servicebus.aio.ServiceBusSender
  example:
  - "Create a new instance of the ServiceBusSender from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus.aio\
    \ import ServiceBusSender\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n   queue_sender = ServiceBusSender.from_connection_string(\n\
    \       conn_str=servicebus_connection_str,\n       queue_name=queue_name\n  \
    \ )\n\n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusSender.from_connection_string
  langs:
  - python
  module: azure.servicebus.aio
  name: 'from_connection_string(conn_str: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_sender_async.ServiceBusSender'
  namewithoutparameters: from_connection_string
  summary: Create a ServiceBusSender from a connection string.
  syntax:
    content: 'from_connection_string(conn_str: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_sender_async.ServiceBusSender'
    parameters:
    - description: The connection string of a Service Bus.
      id: conn_str
      isRequired: true
    return:
      type:
      - azure.servicebus.aio.ServiceBusSender
  type: method
  uid: azure.servicebus.aio.ServiceBusSender.from_connection_string
- class: azure.servicebus.aio.ServiceBusSender
  example:
  - "Schedule a message to be sent in future<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   async with servicebus_sender:\n       scheduled_time_utc =\
    \ datetime.datetime.utcnow() + datetime.timedelta(seconds=30)\n       scheduled_messages\
    \ = [Message(\"Scheduled message\") for _ in range(10)]\n       sequence_nums\
    \ = await servicebus_sender.schedule(scheduled_messages, scheduled_time_utc)\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusSender.schedule
  langs:
  - python
  module: azure.servicebus.aio
  name: schedule(messages, schedule_time_utc)
  namewithoutparameters: schedule
  summary: 'Send Message or multiple Messages to be enqueued at a specific time.

    Returns a list of the sequence numbers of the enqueued messages.

    :param messages: The message or list of messages to schedule.

    :type messages: ~azure.servicebus.Message or list[~azure.servicebus.Message]

    :param schedule_time_utc: The utc date and time to enqueue the messages.

    :type schedule_time_utc: ~datetime.datetime

    :rtype: list[int]'
  syntax:
    content: schedule(messages, schedule_time_utc)
    parameters:
    - id: messages
      isRequired: true
    - id: schedule_time_utc
      isRequired: true
  type: method
  uid: azure.servicebus.aio.ServiceBusSender.schedule
- class: azure.servicebus.aio.ServiceBusSender
  example:
  - "Send message.<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\10\\\\azure-servicebus-7.0.0b2\\\\samples\\\\async_samples\\\\sample_code_servicebus_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   async with servicebus_sender:\n\
    \       message = Message(\"Hello World\")\n       await servicebus_sender.send(message)\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusSender.send
  langs:
  - python
  module: azure.servicebus.aio
  name: send(message)
  namewithoutparameters: send
  summary: 'Sends message and blocks until acknowledgement is received or operation
    times out.


    If a list of messages was provided, attempts to send them as a single batch, throwing
    a

    *ValueError* if they cannot fit in a single batch.'
  syntax:
    content: send(message)
    parameters:
    - description: The ServiceBus message to be sent.
      id: message
      isRequired: true
      type:
      - azure.servicebus.Message
      - azure.servicebus.BatchMessage
      - list[azure.servicebus.Message]
    return:
      type:
      - None
  type: method
  uid: azure.servicebus.aio.ServiceBusSender.send
references:
- fullName: azure.servicebus.aio.ServiceBusSender.cancel_scheduled_messages
  isExternal: false
  name: cancel_scheduled_messages(sequence_numbers)
  parent: azure.servicebus.aio.ServiceBusSender
  uid: azure.servicebus.aio.ServiceBusSender.cancel_scheduled_messages
- fullName: azure.servicebus.aio.ServiceBusSender.create_batch
  isExternal: false
  name: create_batch(max_size_in_bytes=None)
  parent: azure.servicebus.aio.ServiceBusSender
  uid: azure.servicebus.aio.ServiceBusSender.create_batch
- fullName: azure.servicebus.aio.ServiceBusSender.from_connection_string
  isExternal: false
  name: 'from_connection_string(conn_str: str, **kwargs: typing.Any) -> azure.servicebus.aio._servicebus_sender_async.ServiceBusSender'
  parent: azure.servicebus.aio.ServiceBusSender
  uid: azure.servicebus.aio.ServiceBusSender.from_connection_string
- fullName: azure.servicebus.aio.ServiceBusSender.schedule
  isExternal: false
  name: schedule(messages, schedule_time_utc)
  parent: azure.servicebus.aio.ServiceBusSender
  uid: azure.servicebus.aio.ServiceBusSender.schedule
- fullName: azure.servicebus.aio.ServiceBusSender.send
  isExternal: false
  name: send(message)
  parent: azure.servicebus.aio.ServiceBusSender
  uid: azure.servicebus.aio.ServiceBusSender.send
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: list[azure.servicebus.Message]
  name: list[Message]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.Message
    name: Message
    uid: azure.servicebus.Message
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.Message]
