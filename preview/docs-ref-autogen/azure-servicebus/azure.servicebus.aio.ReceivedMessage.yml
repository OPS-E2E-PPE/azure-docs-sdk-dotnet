### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.ReceivedMessage.abandon
  - azure.servicebus.aio.ReceivedMessage.complete
  - azure.servicebus.aio.ReceivedMessage.dead_letter
  - azure.servicebus.aio.ReceivedMessage.defer
  - azure.servicebus.aio.ReceivedMessage.renew_lock
  class: azure.servicebus.aio.ReceivedMessage
  fullName: azure.servicebus.aio.ReceivedMessage
  inheritance:
  - inheritance:
    - inheritance:
      - inheritance:
        - type: builtins.object
        type: azure.servicebus._common.message.Message
      type: azure.servicebus._common.message.PeekMessage
    type: azure.servicebus._common.message.ReceivedMessage
  langs:
  - python
  module: azure.servicebus.aio
  name: ReceivedMessage
  summary: A Service Bus Message received from service side.
  syntax:
    content: 'ReceivedMessage(message, mode=<ReceiveSettleMode.PeekLock: <ReceiverSettleMode.PeekLock:
      1>>, loop=None, **kwargs)'
  type: class
  uid: azure.servicebus.aio.ReceivedMessage
- class: azure.servicebus.aio.ReceivedMessage
  fullName: azure.servicebus.aio.ReceivedMessage.abandon
  langs:
  - python
  module: azure.servicebus.aio
  name: abandon()
  namewithoutparameters: abandon
  summary: 'Abandon the message.


    This message will be returned to the queue and made available to be received again.'
  syntax:
    content: abandon()
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.servicebus.aio.ReceivedMessage.abandon
- class: azure.servicebus.aio.ReceivedMessage
  fullName: azure.servicebus.aio.ReceivedMessage.complete
  langs:
  - python
  module: azure.servicebus.aio
  name: complete()
  namewithoutparameters: complete
  summary: 'Complete the message.


    This removes the message from the queue.'
  syntax:
    content: complete()
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.servicebus.aio.ReceivedMessage.complete
- class: azure.servicebus.aio.ReceivedMessage
  fullName: azure.servicebus.aio.ReceivedMessage.dead_letter
  langs:
  - python
  module: azure.servicebus.aio
  name: dead_letter(reason=None, description=None)
  namewithoutparameters: dead_letter
  summary: 'Move the message to the Dead Letter queue.


    The Dead Letter queue is a sub-queue that can be

    used to store messages that failed to process correctly, or otherwise require
    further inspection

    or processing. The queue can also be configured to send expired messages to the
    Dead Letter queue.'
  syntax:
    content: dead_letter(reason=None, description=None)
    parameters:
    - defaultValue: None
      description: The reason for dead-lettering the message.
      id: reason
      type:
      - str
    - defaultValue: None
      description: The detailed description for dead-lettering the message.
      id: description
      type:
      - str
    return:
      type:
      - None
  type: method
  uid: azure.servicebus.aio.ReceivedMessage.dead_letter
- class: azure.servicebus.aio.ReceivedMessage
  fullName: azure.servicebus.aio.ReceivedMessage.defer
  langs:
  - python
  module: azure.servicebus.aio
  name: defer()
  namewithoutparameters: defer
  summary: 'Defers the message.


    This message will remain in the queue but must be requested

    specifically by its sequence number in order to be received.'
  syntax:
    content: defer()
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.servicebus.aio.ReceivedMessage.defer
- class: azure.servicebus.aio.ReceivedMessage
  fullName: azure.servicebus.aio.ReceivedMessage.renew_lock
  langs:
  - python
  module: azure.servicebus.aio
  name: renew_lock()
  namewithoutparameters: renew_lock
  summary: 'Renew the message lock.


    This will maintain the lock on the message to ensure

    it is not returned to the queue to be reprocessed. In order to complete (or otherwise
    settle)

    the message, the lock must be maintained. Messages received via ReceiveAndDelete
    mode are not

    locked, and therefore cannot be renewed. This operation can also be performed
    as an asynchronous

    background task by registering the message with an *azure.servicebus.aio.AutoLockRenew*
    instance.

    This operation is only available for non-sessionful messages.'
  syntax:
    content: renew_lock()
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.servicebus.aio.ReceivedMessage.renew_lock
references:
- fullName: azure.servicebus.aio.ReceivedMessage.abandon
  isExternal: false
  name: abandon()
  parent: azure.servicebus.aio.ReceivedMessage
  uid: azure.servicebus.aio.ReceivedMessage.abandon
- fullName: azure.servicebus.aio.ReceivedMessage.complete
  isExternal: false
  name: complete()
  parent: azure.servicebus.aio.ReceivedMessage
  uid: azure.servicebus.aio.ReceivedMessage.complete
- fullName: azure.servicebus.aio.ReceivedMessage.dead_letter
  isExternal: false
  name: dead_letter(reason=None, description=None)
  parent: azure.servicebus.aio.ReceivedMessage
  uid: azure.servicebus.aio.ReceivedMessage.dead_letter
- fullName: azure.servicebus.aio.ReceivedMessage.defer
  isExternal: false
  name: defer()
  parent: azure.servicebus.aio.ReceivedMessage
  uid: azure.servicebus.aio.ReceivedMessage.defer
- fullName: azure.servicebus.aio.ReceivedMessage.renew_lock
  isExternal: false
  name: renew_lock()
  parent: azure.servicebus.aio.ReceivedMessage
  uid: azure.servicebus.aio.ReceivedMessage.renew_lock
