<Type Name="BlobBaseClient" FullName="Azure.Storage.Blobs.Specialized.BlobBaseClient">
  <TypeSignature Language="C#" Value="public class BlobBaseClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobBaseClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.Specialized.BlobBaseClient" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobBaseClient" />
  <TypeSignature Language="F#" Value="type BlobBaseClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.Storage.Blobs.BlobClient" /> allows you to manipulate Azure Storage
            blobs.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BlobBaseClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobBaseClient (Uri blobUri, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.#ctor(System.Uri,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlobBaseClient : Uri * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="new Azure.Storage.Blobs.Specialized.BlobBaseClient (blobUri, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> referencing the blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobBaseClient (string connectionString, string containerName, string blobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName, string blobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String, blobName As String)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlobBaseClient : string * string * string -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="new Azure.Storage.Blobs.Specialized.BlobBaseClient (connectionString, containerName, blobName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container containing this blob.
             </param>
        <param name="blobName">
             The name of this blob.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobBaseClient (Uri blobUri, Azure.Core.TokenCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Core.TokenCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, credential As TokenCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlobBaseClient : Uri * Azure.Core.TokenCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="new Azure.Storage.Blobs.Specialized.BlobBaseClient (blobUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> referencing the blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobBaseClient (Uri blobUri, Azure.Storage.StorageSharedKeyCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Storage.StorageSharedKeyCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, credential As StorageSharedKeyCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlobBaseClient : Uri * Azure.Storage.StorageSharedKeyCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="new Azure.Storage.Blobs.Specialized.BlobBaseClient (blobUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> referencing the blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobBaseClient (string connectionString, string containerName, string blobName, Azure.Storage.Blobs.BlobClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName, string blobName, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.#ctor(System.String,System.String,System.String,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String, blobName As String, options As BlobClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlobBaseClient : string * string * string * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="new Azure.Storage.Blobs.Specialized.BlobBaseClient (connectionString, containerName, blobName, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container containing this blob.
             </param>
        <param name="blobName">
             The name of this blob.
             </param>
        <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbortCopyFromUri">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AbortCopyFromUri (string copyId, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AbortCopyFromUri(string copyId, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.AbortCopyFromUri(System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AbortCopyFromUri : string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.AbortCopyFromUri : string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobBaseClient.AbortCopyFromUri (copyId, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copyId" Type="System.String" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="copyId">
             ID of the copy operation to abort.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on aborting the copy operation.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.AbortCopyFromUri(System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation aborts a pending
             <see cref="T:Azure.Storage.Blobs.Models.CopyFromUriOperation" />, and leaves a this
             blob with zero length and full metadata.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully aborting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="AbortCopyFromUriAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AbortCopyFromUriAsync (string copyId, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AbortCopyFromUriAsync(string copyId, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.AbortCopyFromUriAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AbortCopyFromUriAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AbortCopyFromUriAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobBaseClient.AbortCopyFromUriAsync (copyId, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copyId" Type="System.String" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="copyId">
             ID of the copy operation to abort.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on aborting the copy operation.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.AbortCopyFromUriAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation aborts a pending
             <see cref="T:Azure.Storage.Blobs.Models.CopyFromUriOperation" />, and leaves a this
             blob with zero length and full metadata.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully aborting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshot">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt; CreateSnapshot (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt; CreateSnapshot(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.CreateSnapshot(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshot : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;&#xA;override this.CreateSnapshot : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;" Usage="blobBaseClient.CreateSnapshot (metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Optional custom metadata to set for this blob snapshot.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             setting creating this snapshot.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.CreateSnapshot(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation creates a
             read-only snapshot of a blob.
            
             For more infomration, see <see href="https://docs.microsoft.com/rest/api/storageservices/snapshot-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             new blob snapshot.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshotAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;&gt; CreateSnapshotAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;&gt; CreateSnapshotAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.CreateSnapshotAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshotAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;&gt;&#xA;override this.CreateSnapshotAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;&gt;" Usage="blobBaseClient.CreateSnapshotAsync (metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobSnapshotInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Optional custom metadata to set for this blob snapshot.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             setting creating this snapshot.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.CreateSnapshotAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation creates a
             read-only snapshot of a blob.
            
             For more infomration, see <see href="https://docs.microsoft.com/rest/api/storageservices/snapshot-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             new blob snapshot.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Delete(System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Delete : Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Delete : Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobBaseClient.Delete (deleteOptions, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteOptions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="deleteOptions">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Delete(System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation marks the specified blob
             or snapshot for  deletion. The blob is later deleted during
             garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.Include" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DeleteAsync(System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobBaseClient.DeleteAsync (deleteOptions, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteOptions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="deleteOptions">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DeleteAsync(System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation marks the specified blob
             or snapshot for  deletion. The blob is later deleted during
             garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.Include" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Download">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt; Download ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobDownloadInfo&gt; Download() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Download" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Download () As Response(Of BlobDownloadInfo)" />
      <MemberSignature Language="F#" Value="abstract member Download : unit -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&#xA;override this.Download : unit -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;" Usage="blobBaseClient.Download " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Download" /> operation downloads a blob from
             the service, including its metadata and properties.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded blob.  <see cref="P:Azure.Storage.Blobs.Models.BlobDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Download">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt; Download (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobDownloadInfo&gt; Download(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Download(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Download : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&#xA;override this.Download : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;" Usage="blobBaseClient.Download cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Download(System.Threading.CancellationToken)" /> operation downloads
             a blob from the service, including its metadata and properties.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded blob.  <see cref="P:Azure.Storage.Blobs.Models.BlobDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Download">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt; Download (Azure.Core.Http.HttpRange range = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, bool rangeGetContentHash = false, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobDownloadInfo&gt; Download(valuetype Azure.Core.Http.HttpRange range, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, bool rangeGetContentHash, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Download(Azure.Core.Http.HttpRange,System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Download : Azure.Core.Http.HttpRange * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * bool * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&#xA;override this.Download : Azure.Core.Http.HttpRange * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * bool * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;" Usage="blobBaseClient.Download (range, accessConditions, rangeGetContentHash, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Azure.Core.Http.HttpRange" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="rangeGetContentHash" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="range">
             If provided, only donwload the bytes of the blob in the specified
             range.  If not provided, download the entire blob.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             donwloading this blob.
             </param>
        <param name="rangeGetContentHash">
             When set to true and specified together with the <paramref name="range" />,
             the service returns the MD5 hash for the range, as long as the
             range is less than or equal to 4 MB in size.  If this value is
             specified without <paramref name="range" /> or set to true when the
             range exceeds 4 MB in size, a <see cref="T:Azure.Storage.StorageRequestFailedException" />
             is thrown.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Download(Azure.Core.Http.HttpRange,System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Boolean,System.Threading.CancellationToken)" />
             operation downloads a blob from the service, including its metadata
             and properties.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded blob.  <see cref="P:Azure.Storage.Blobs.Models.BlobDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt; DownloadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt; DownloadAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DownloadAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadAsync () As Task(Of Response(Of BlobDownloadInfo))" />
      <MemberSignature Language="F#" Value="abstract member DownloadAsync : unit -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;&#xA;override this.DownloadAsync : unit -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;" Usage="blobBaseClient.DownloadAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DownloadAsync" /> operation downloads a blob from
             the service, including its metadata and properties.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded blob.  <see cref="P:Azure.Storage.Blobs.Models.BlobDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt; DownloadAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt; DownloadAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DownloadAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DownloadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;&#xA;override this.DownloadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;" Usage="blobBaseClient.DownloadAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DownloadAsync(System.Threading.CancellationToken)" /> operation
             downloads a blob from the service, including its metadata and
             properties.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded blob.  <see cref="P:Azure.Storage.Blobs.Models.BlobDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt; DownloadAsync (Azure.Core.Http.HttpRange range = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, bool rangeGetContentHash = false, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt; DownloadAsync(valuetype Azure.Core.Http.HttpRange range, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, bool rangeGetContentHash, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DownloadAsync(Azure.Core.Http.HttpRange,System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DownloadAsync : Azure.Core.Http.HttpRange * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;&#xA;override this.DownloadAsync : Azure.Core.Http.HttpRange * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;" Usage="blobBaseClient.DownloadAsync (range, accessConditions, rangeGetContentHash, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobDownloadInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Azure.Core.Http.HttpRange" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="rangeGetContentHash" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="range">
             If provided, only donwload the bytes of the blob in the specified
             range.  If not provided, download the entire blob.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             donwloading this blob.
             </param>
        <param name="rangeGetContentHash">
             When set to true and specified together with the <paramref name="range" />,
             the service returns the MD5 hash for the range, as long as the
             range is less than or equal to 4 MB in size.  If this value is
             specified without <paramref name="range" /> or set to true when the
             range exceeds 4 MB in size, a <see cref="T:Azure.Storage.StorageRequestFailedException" />
             is thrown.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.DownloadAsync(Azure.Core.Http.HttpRange,System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Boolean,System.Threading.CancellationToken)" />
             operation downloads a blob from the service, including its metadata
             and properties.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded blob.  <see cref="P:Azure.Storage.Blobs.Models.BlobDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt; GetProperties (Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobProperties&gt; GetProperties(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.GetProperties(System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt;&#xA;override this.GetProperties : Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt;" Usage="blobBaseClient.GetProperties (accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add
             conditions on getting the blob's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.GetProperties(System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the blob. It does not return the content of the
             blob.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             blob's properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt;&gt; GetPropertiesAsync (Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobProperties&gt;&gt; GetPropertiesAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.GetPropertiesAsync(System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPropertiesAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt;&gt;&#xA;override this.GetPropertiesAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt;&gt;" Usage="blobBaseClient.GetPropertiesAsync (accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobProperties&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add
             conditions on getting the blob's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.GetPropertiesAsync(System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the blob. It does not return the content of the
             blob.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             blob's properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="protected internal virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Storage.Blobs.Specialized.BlobBaseClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Azure.Core.Pipeline.HttpPipeline" /> transport pipeline used to send
            every request.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHttpHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt; SetHttpHeaders (Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobInfo&gt; SetHttpHeaders(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetHttpHeaders(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetHttpHeaders : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&#xA;override this.SetHttpHeaders : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;" Usage="blobBaseClient.SetHttpHeaders (httpHeaders, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.  If not specified, existing values will be cleared.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             setting the blob's HTTP headers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetHttpHeaders(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation sets system
             properties on the blob.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHttpHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt; SetHttpHeadersAsync (Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobInfo&gt;&gt; SetHttpHeadersAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetHttpHeadersAsync(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetHttpHeadersAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt;&#xA;override this.SetHttpHeadersAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt;" Usage="blobBaseClient.SetHttpHeadersAsync (httpHeaders, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.  If not specified, existing values will be cleared.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             setting the blob's HTTP headers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetHttpHeadersAsync(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation sets system
             properties on the blob.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt; SetMetadata (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobInfo&gt; SetMetadata(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&#xA;override this.SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;" Usage="blobBaseClient.SetMetadata (metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this blob.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             setting the blob's metadata.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified blob as one or more name-value pairs.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt; SetMetadataAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobInfo&gt;&gt; SetMetadataAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt;&#xA;override this.SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt;" Usage="blobBaseClient.SetMetadataAsync (metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this blob.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             setting the blob's metadata.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified blob as one or more name-value pairs.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTier">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SetTier (Azure.Storage.Blobs.Models.AccessTier accessTier, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SetTier(valuetype Azure.Storage.Blobs.Models.AccessTier accessTier, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetTier(Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetTier : Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.SetTier : Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobBaseClient.SetTier (accessTier, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessTier" Type="Azure.Storage.Blobs.Models.AccessTier" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessTier">
             Indicates the tier to be set on the blob.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add conditions on
             setting the access tier.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetTier(Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation sets the tier on a blob.
             The operation is allowed on a page blob in a premium storage
             account and on a block blob in a blob storage or general purpose
             v2 account.
            
             A premium page blob's tier determines the allowed size, IOPS, and
             bandwidth of the blob.  A block blob's tier determines
             Hot/Cool/Archive storage type.  This operation does not update the
             blob's ETag.  For detailed information about block blob level
             tiering <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers" />
            
             For more information about setting the tier, see
             <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully setting the tier.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTierAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SetTierAsync (Azure.Storage.Blobs.Models.AccessTier accessTier, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SetTierAsync(valuetype Azure.Storage.Blobs.Models.AccessTier accessTier, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetTierAsync(Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetTierAsync : Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SetTierAsync : Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobBaseClient.SetTierAsync (accessTier, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessTier" Type="Azure.Storage.Blobs.Models.AccessTier" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessTier">
             Indicates the tier to be set on the blob.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add conditions on
             setting the access tier.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.SetTierAsync(Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation sets the tier on a blob.
             The operation is allowed on a page blob in a premium storage
             account and on a block blob in a blob storage or general purpose
             v2 account.
            
             A premium page blob's tier determines the allowed size, IOPS, and
             bandwidth of the blob.  A block blob's tier determines
             Hot/Cool/Archive storage type.  This operation does not update the
             blob's ETag.  For detailed information about block blob level
             tiering <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers" />
            
             For more information about setting the tier, see
             <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully setting the tier.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyFromUri">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;long&gt; StartCopyFromUri (string copyId, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;int64&gt; StartCopyFromUri(string copyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.StartCopyFromUri(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCopyFromUri : string * System.Threading.CancellationToken -&gt; Azure.Operation&lt;int64&gt;&#xA;override this.StartCopyFromUri : string * System.Threading.CancellationToken -&gt; Azure.Operation&lt;int64&gt;" Usage="blobBaseClient.StartCopyFromUri (copyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="copyId">
             The ID of a copy operation that's already beeen started.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             Get an existing <see cref="T:Azure.Storage.Blobs.Models.CopyFromUriOperation" />.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Operation`1" /> representing the copy
             operation.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyFromUri">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;long&gt; StartCopyFromUri (Uri source, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; sourceAccessConditions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; destinationAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;int64&gt; StartCopyFromUri(class System.Uri source, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; sourceAccessConditions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; destinationAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.StartCopyFromUri(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCopyFromUri : Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;int64&gt;&#xA;override this.StartCopyFromUri : Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;int64&gt;" Usage="blobBaseClient.StartCopyFromUri (source, metadata, sourceAccessConditions, destinationAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Uri" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="sourceAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="destinationAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
             Specifies the <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> of the source blob.  The value may
             be a <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> of up to 2 KB in length that specifies a
             blob.  A source blob in the same storage account can be
             authenticated via Shared Key.  However, if the source is a blob in
             another account, the source blob must either be public or must be
             authenticated via a shared access signature. If the source blob
             is public, no authentication is required to perform the copy
             operation.
            
             The source object may be a file in the Azure File service.  If the
             source object is a file that is to be copied to a blob, then the
             source file must be authenticated using a shared access signature,
             whether it resides in the same account or in a different account.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this blob.
             </param>
        <param name="sourceAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add
             conditions on the copying of data from this source blob.
             </param>
        <param name="destinationAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             the copying of data to this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.StartCopyFromUri(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
             operation copies data at from the <paramref name="source" /> to this
             blob.  You can check the <see cref="P:Azure.Storage.Blobs.Models.BlobProperties.CopyStatus" />
             returned from the <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.GetProperties(System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> to determine if the
             copy has completed.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Operation`1" /> describing the
             state of the copy operation.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyFromUriAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;long&gt;&gt; StartCopyFromUriAsync (string copyId, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;int64&gt;&gt; StartCopyFromUriAsync(string copyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.StartCopyFromUriAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCopyFromUriAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;int64&gt;&gt;&#xA;override this.StartCopyFromUriAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;int64&gt;&gt;" Usage="blobBaseClient.StartCopyFromUriAsync (copyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="copyId">
             The ID of a copy operation that's already beeen started.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             Get an existing <see cref="T:Azure.Storage.Blobs.Models.CopyFromUriOperation" />.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Operation`1" /> representing the copy
             operation.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyFromUriAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;long&gt;&gt; StartCopyFromUriAsync (Uri source, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; sourceAccessConditions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; destinationAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;int64&gt;&gt; StartCopyFromUriAsync(class System.Uri source, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; sourceAccessConditions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; destinationAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.StartCopyFromUriAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCopyFromUriAsync : Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;int64&gt;&gt;&#xA;override this.StartCopyFromUriAsync : Uri * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;int64&gt;&gt;" Usage="blobBaseClient.StartCopyFromUriAsync (source, metadata, sourceAccessConditions, destinationAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Uri" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="sourceAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="destinationAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">
             Specifies the <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> of the source blob.  The value may
             be a <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> of up to 2 KB in length that specifies a
             blob.  A source blob in the same storage account can be
             authenticated via Shared Key.  However, if the source is a blob in
             another account, the source blob must either be public or must be
             authenticated via a shared access signature. If the source blob
             is public, no authentication is required to perform the copy
             operation.
            
             The source object may be a file in the Azure File service.  If the
             source object is a file that is to be copied to a blob, then the
             source file must be authenticated using a shared access signature,
             whether it resides in the same account or in a different account.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this blob.
             </param>
        <param name="sourceAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add
             conditions on the copying of data from this source blob.
             </param>
        <param name="destinationAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             the copying of data to this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.StartCopyFromUri(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
             operation copies data at from the <paramref name="source" /> to this
             blob.  You can check the <see cref="P:Azure.Storage.Blobs.Models.BlobProperties.CopyStatus" />
             returned from the <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.GetPropertiesAsync(System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> to determine if
             the copy has completed.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Operation`1" /> describing the
             state of the copy operation.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Undelete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Undelete (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Undelete(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Undelete(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Undelete : System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Undelete : System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobBaseClient.Undelete cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.Undelete(System.Threading.CancellationToken)" /> operation restores the contents
             and metadata of a soft deleted blob and any associated soft
             deleted snapshots.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/undelete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="UndeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UndeleteAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UndeleteAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.UndeleteAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UndeleteAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UndeleteAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobBaseClient.UndeleteAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.UndeleteAsync(System.Threading.CancellationToken)" /> operation restores the contents
             and metadata of a soft deleted blob and any associated soft
             deleted snapshots.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/undelete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public virtual Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Uri As Uri" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the blob's primary <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSnapshot">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Blobs.Specialized.BlobBaseClient WithSnapshot (string snapshot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Blobs.Specialized.BlobBaseClient WithSnapshot(string snapshot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.WithSnapshot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WithSnapshot (snapshot As String) As BlobBaseClient" />
      <MemberSignature Language="F#" Value="abstract member WithSnapshot : string -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient&#xA;override this.WithSnapshot : string -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="blobBaseClient.WithSnapshot snapshot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.Specialized.BlobBaseClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="snapshot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="snapshot">The snapshot identifier.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" />
             class with an identical <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> source but the specified
             <paramref name="snapshot" /> timestamp.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob" />.
             </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.BlobClient" /> instance.</returns>
        <remarks>
             Pass null or empty string to remove the snapshot returning a URL
             to the base blob.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSnapshotImpl">
      <MemberSignature Language="C#" Value="protected virtual Azure.Storage.Blobs.Specialized.BlobBaseClient WithSnapshotImpl (string snapshot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Azure.Storage.Blobs.Specialized.BlobBaseClient WithSnapshotImpl(string snapshot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBaseClient.WithSnapshotImpl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function WithSnapshotImpl (snapshot As String) As BlobBaseClient" />
      <MemberSignature Language="F#" Value="abstract member WithSnapshotImpl : string -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient&#xA;override this.WithSnapshotImpl : string -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="blobBaseClient.WithSnapshotImpl snapshot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.Specialized.BlobBaseClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="snapshot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="snapshot">The snapshot identifier.</param>
        <summary>
            Creates a new instance of the <see cref="T:Azure.Storage.Blobs.BlobClient" /> class
            with an identical <see cref="P:Azure.Storage.Blobs.Specialized.BlobBaseClient.Uri" /> source but the specified
            <paramref name="snapshot" /> timestamp.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.BlobClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
