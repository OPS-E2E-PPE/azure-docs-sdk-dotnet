<Type Name="LeaseClient" FullName="Azure.Storage.Blobs.Specialized.LeaseClient">
  <TypeSignature Language="C#" Value="public class LeaseClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LeaseClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.Specialized.LeaseClient" />
  <TypeSignature Language="VB.NET" Value="Public Class LeaseClient" />
  <TypeSignature Language="F#" Value="type LeaseClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.Storage.Blobs.Specialized.LeaseClient" /> allows you to manipulate Azure
            Storage leases on containers and blobs.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LeaseClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.LeaseClient" /> class
            for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LeaseClient (Azure.Storage.Blobs.BlobContainerClient client, string leaseId = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Storage.Blobs.BlobContainerClient client, string leaseId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (client As BlobContainerClient, Optional leaseId As String = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.LeaseClient : Azure.Storage.Blobs.BlobContainerClient * string -&gt; Azure.Storage.Blobs.Specialized.LeaseClient" Usage="new Azure.Storage.Blobs.Specialized.LeaseClient (client, leaseId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" />
        <Parameter Name="leaseId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">
            A <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> representing the container
            being leased.
            </param>
        <param name="leaseId">
            An optional lease ID.  If no lease ID is provided, a random lease
            ID will be created.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.LeaseClient" />  class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LeaseClient (Azure.Storage.Blobs.Specialized.BlobBaseClient client, string leaseId = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Storage.Blobs.Specialized.BlobBaseClient client, string leaseId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.#ctor(Azure.Storage.Blobs.Specialized.BlobBaseClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (client As BlobBaseClient, Optional leaseId As String = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.LeaseClient : Azure.Storage.Blobs.Specialized.BlobBaseClient * string -&gt; Azure.Storage.Blobs.Specialized.LeaseClient" Usage="new Azure.Storage.Blobs.Specialized.LeaseClient (client, leaseId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.Specialized.BlobBaseClient" />
        <Parameter Name="leaseId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">
            A <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.BlobClient" /> representing the blob being leased.
            </param>
        <param name="leaseId">
            An optional lease ID.  If no lease ID is provided, a random lease
            ID will be created.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.LeaseClient" />  class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acquire">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt; Acquire (TimeSpan duration, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt; Acquire(valuetype System.TimeSpan duration, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.Acquire(System.TimeSpan,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Acquire : TimeSpan * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&#xA;override this.Acquire : TimeSpan * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;" Usage="leaseClient.Acquire (duration, httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="duration">
             Specifies the duration of the lease, in seconds, or specify 
             <see cref="F:Azure.Storage.Blobs.Specialized.LeaseClient.InfiniteLeaseDuration" /> for a lease that never expires. 
             A non-infinite lease can be between 15 and 60 seconds. 
             A lease duration cannot be changed using <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.RenewAsync(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> or <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.ChangeAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />.
             </param>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on acquiring a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.Acquire(System.TimeSpan,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation acquires a lease on
             the blob or container.  The lease <paramref name="duration" /> must
             be between 15 to 60 seconds, or infinite (-1).
            
             If the container does not have an active lease, the Blob service
             creates a lease on the blob or container and returns it.  If the
             container has an active lease, you can only request a new lease
             using the active lease ID as <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" />, but you can
             specify a new <paramref name="duration" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt; AcquireAsync (TimeSpan duration, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt;&gt; AcquireAsync(valuetype System.TimeSpan duration, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.AcquireAsync(System.TimeSpan,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AcquireAsync : TimeSpan * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;&#xA;override this.AcquireAsync : TimeSpan * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;" Usage="leaseClient.AcquireAsync (duration, httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="duration">
             Specifies the duration of the lease, in seconds, or specify 
             <see cref="F:Azure.Storage.Blobs.Specialized.LeaseClient.InfiniteLeaseDuration" /> for a lease that never expires. 
             A non-infinite lease can be between 15 and 60 seconds. 
             A lease duration cannot be changed using <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.RenewAsync(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> or <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.ChangeAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />.
             </param>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on acquiring a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.AcquireAsync(System.TimeSpan,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation acquires a lease on
             the blob or container.  The lease <paramref name="duration" /> must
             be between 15 to 60 seconds, or infinite (-1).
            
             If the container does not have an active lease, the Blob service
             creates a lease on the blob or container and returns it.  If the
             container has an active lease, you can only request a new lease
             using the active lease ID as <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" />, but you can
             specify a new <paramref name="duration" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="BlobClient">
      <MemberSignature Language="C#" Value="protected virtual Azure.Storage.Blobs.Specialized.BlobBaseClient BlobClient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Storage.Blobs.Specialized.BlobBaseClient BlobClient" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.Specialized.LeaseClient.BlobClient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property BlobClient As BlobBaseClient" />
      <MemberSignature Language="F#" Value="member this.BlobClient : Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="Azure.Storage.Blobs.Specialized.LeaseClient.BlobClient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.Specialized.BlobBaseClient</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.BlobClient" /> to manage leases for.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt; Break (Nullable&lt;int&gt; breakPeriodInSeconds = null, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt; Break(valuetype System.Nullable`1&lt;int32&gt; breakPeriodInSeconds, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.Break(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Break : Nullable&lt;int&gt; * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&#xA;override this.Break : Nullable&lt;int&gt; * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;" Usage="leaseClient.Break (breakPeriodInSeconds, httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakPeriodInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="breakPeriodInSeconds">
             Specifies the proposed duration the lease should continue before
             it is broken, in seconds, between 0 and 60.  This break period is
             only used if it is shorter than the time remaining on the lease.
             If longer, the time remaining on the lease is used.  A new lease
             will not be available before the break period has expired, but the
             lease may be held for longer than the break period.  If this value
             is not provided, a fixed-duration lease breaks after the remaining
             lease period elapses, and an infinite lease breaks immediately.
             </param>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on breaking a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.Break(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation breaks the blob or
             container's previously-acquired lease (if it exists).
            
             Once a lease is broken, it cannot be renewed.  Any authorized
             request can break the lease; the request is not required to
             specify a matching lease ID.  When a lease is broken, the lease
             break <paramref name="breakPeriodInSeconds" /> is allowed to elapse,
             during which time no lease operation except
             <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.Break(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> and <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.Release(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> can be
             performed on the blob or container.  When a lease is successfully
             broken, the response indicates the interval in seconds until a new
             lease can be acquired.
            
             A lease that has been broken can also be released.  A client can
             immediately acquire a blob or container lease that has been
             released.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the broken lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="BreakAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt; BreakAsync (Nullable&lt;int&gt; breakPeriodInSeconds = null, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt;&gt; BreakAsync(valuetype System.Nullable`1&lt;int32&gt; breakPeriodInSeconds, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.BreakAsync(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member BreakAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;&#xA;override this.BreakAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;" Usage="leaseClient.BreakAsync (breakPeriodInSeconds, httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="breakPeriodInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="breakPeriodInSeconds">
             Specifies the proposed duration the lease should continue before
             it is broken, in seconds, between 0 and 60.  This break period is
             only used if it is shorter than the time remaining on the lease.
             If longer, the time remaining on the lease is used.  A new lease
             will not be available before the break period has expired, but the
             lease may be held for longer than the break period.  If this value
             is not provided, a fixed-duration lease breaks after the remaining
             lease period elapses, and an infinite lease breaks immediately.
             </param>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on breaking a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.BreakAsync(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation breaks the blob or
             container's previously-acquired lease (if it exists).
            
             Once a lease is broken, it cannot be renewed.  Any authorized
             request can break the lease; the request is not required to
             specify a matching lease ID.  When a lease is broken, the lease
             break <paramref name="breakPeriodInSeconds" /> is allowed to elapse,
             during which time no lease operation except
             <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.BreakAsync(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> and <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.ReleaseAsync(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> can be
             performed on the blob or container.  When a lease is successfully
             broken, the response indicates the interval in seconds until a new
             lease can be acquired.
            
             A lease that has been broken can also be released.  A client can
             immediately acquire a blob or container lease that has been
             released.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the broken lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt; Change (string proposedId, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt; Change(string proposedId, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.Change(System.String,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Change : string * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&#xA;override this.Change : string * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;" Usage="leaseClient.Change (proposedId, httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedId" Type="System.String" />
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="proposedId">
             An optional proposed lease ID, in a GUID string format. A
             <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if the
             proposed lease ID is not in the correct format.
             </param>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on changing a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.Change(System.String,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation changes the lease
             of an active lease.  A change must include the current
             <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" /> and a new <paramref name="proposedId" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt; ChangeAsync (string proposedId, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt;&gt; ChangeAsync(string proposedId, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.ChangeAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ChangeAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;&#xA;override this.ChangeAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;" Usage="leaseClient.ChangeAsync (proposedId, httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedId" Type="System.String" />
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="proposedId">
             An optional proposed lease ID, in a GUID string format. A
             <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if the
             proposed lease ID is not in the correct format.
             </param>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on changing a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.ChangeAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation changes the lease
             of an active lease.  A change must include the current
             <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" /> and a new <paramref name="proposedId" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerClient">
      <MemberSignature Language="C#" Value="protected virtual Azure.Storage.Blobs.BlobContainerClient ContainerClient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Storage.Blobs.BlobContainerClient ContainerClient" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.Specialized.LeaseClient.ContainerClient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ContainerClient As BlobContainerClient" />
      <MemberSignature Language="F#" Value="member this.ContainerClient : Azure.Storage.Blobs.BlobContainerClient" Usage="Azure.Storage.Blobs.Specialized.LeaseClient.ContainerClient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.BlobContainerClient</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> to manage leases for.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InfiniteLeaseDuration">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteLeaseDuration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteLeaseDuration" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.Specialized.LeaseClient.InfiniteLeaseDuration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteLeaseDuration As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteLeaseDuration : TimeSpan" Usage="Azure.Storage.Blobs.Specialized.LeaseClient.InfiniteLeaseDuration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:System.TimeSpan" /> representing an infinite lease duration.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaseId">
      <MemberSignature Language="C#" Value="public string LeaseId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LeaseId" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LeaseId As String" />
      <MemberSignature Language="F#" Value="member this.LeaseId : string" Usage="Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Lease ID for this lease.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt; Release (Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;valuetype Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt; Release(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.Release(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Release : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&#xA;override this.Release : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;" Usage="leaseClient.Release (httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on releasing a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.Release(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation releases the
             container or blob's previously-acquired lease.
            
             The lease may be released if the <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" />
             matches that associated with the container or blob.  Releasing the
             lease allows another client to immediately acquire the lease for the
             container or blob as soon as the release is complete.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated blob or container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt; ReleaseAsync (Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;valuetype Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt; ReleaseAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.ReleaseAsync(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseAsync : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt;&#xA;override this.ReleaseAsync : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt;" Usage="leaseClient.ReleaseAsync (httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on releasing a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.ReleaseAsync(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation releases the
             container or blob's previously-acquired lease.
            
             The lease may be released if the <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" />
             matches that associated with the container or blob.  Releasing the
             lease allows another client to immediately acquire the lease for the
             container or blob as soon as the release is complete.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated blob or container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInternal">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt; ReleaseInternal (Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, bool async, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;valuetype Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt; ReleaseInternal(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, bool async, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.ReleaseInternal(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInternal : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt;&#xA;override this.ReleaseInternal : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt;" Usage="leaseClient.ReleaseInternal (httpAccessConditions, async, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ReleasedObjectInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="async" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on releasing a lease.
             </param>
        <param name="async">
             Whether to invoke the operation asynchronously.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.ReleaseInternal(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Boolean,System.Threading.CancellationToken)" /> operation releases the
             container or blob's previously-acquired lease.
            
             The lease may be released if the <see cref="P:Azure.Storage.Blobs.Specialized.LeaseClient.LeaseId" />
             matches that associated with the container or blob.  Releasing the
             lease allows another client to immediately acquire the lease for the
             container or blob as soon as the release is complete.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated blob or container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Renew">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt; Renew (Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt; Renew(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.Renew(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Renew : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&#xA;override this.Renew : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;" Usage="leaseClient.Renew (httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on renewing a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.Renew(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation renews the blob or
             container's previously-acquired lease.
            
             The lease can be renewed if the leaseId
             matches that associated with the blob or container.  Note that the]
             lease may be renewed even if it has expired as long as the blob or
             container has not been leased again since the expiration of that
             lease.  When you renew a lease, the lease duration clock resets.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenewAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt; RenewAsync (Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.Lease&gt;&gt; RenewAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; httpAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.LeaseClient.RenewAsync(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member RenewAsync : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;&#xA;override this.RenewAsync : Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;" Usage="leaseClient.RenewAsync (httpAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.Lease&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on renewing a lease.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.LeaseClient.RenewAsync(System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Threading.CancellationToken)" /> operation renews the blob or
             container's previously-acquired lease.
            
             The lease can be renewed if the leaseId
             matches that associated with the blob or container.  Note that the]
             lease may be renewed even if it has expired as long as the blob or
             container has not been leased again since the expiration of that
             lease.  When you renew a lease, the lease duration clock resets.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.Specialized.LeaseClient.Uri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Uri As Uri" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="Azure.Storage.Blobs.Specialized.LeaseClient.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URI of the object being leased.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
