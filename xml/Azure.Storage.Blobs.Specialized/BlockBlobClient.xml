<Type Name="BlockBlobClient" FullName="Azure.Storage.Blobs.Specialized.BlockBlobClient">
  <TypeSignature Language="C#" Value="public class BlockBlobClient : Azure.Storage.Blobs.Specialized.BlobBaseClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlockBlobClient extends Azure.Storage.Blobs.Specialized.BlobBaseClient" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
  <TypeSignature Language="VB.NET" Value="Public Class BlockBlobClient&#xA;Inherits BlobBaseClient" />
  <TypeSignature Language="F#" Value="type BlockBlobClient = class&#xA;    inherit BlobBaseClient" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Storage.Blobs.Specialized.BlobBaseClient</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             The <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> allows you to manipulate Azure
             Storage block blobs.
            
             Block blobs let you upload large blobs efficiently.  Block blobs are
             comprised of blocks, each of which is identified by a block ID. You
             create or modify a block blob by writing a set of blocks and
             committing them by their block IDs. Each block can be a different
             size, up to a maximum of 100 MB (4 MB for requests using REST versions
             before 2016-05-31), and a block blob can include up to 50,000 blocks.
             The maximum size of a block blob is therefore slightly more than 4.75
             TB (100 MB X 50,000 blocks).  If you are writing a block blob that is
             no more than 256 MB in size, you can upload it in its entirety with a
             single write operation; see <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.UploadAsync(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />.
            
             When you upload a block to a blob in your storage account, it is
             associated with the specified block blob, but it does not become part
             of the blob until you commit a list of blocks that includes the new
             block's ID. New blocks remain in an uncommitted state until they are
             specifically committed or discarded. Writing a block does not update
             the last modified time of an existing blob.
            
             Block blobs include features that help you manage large files over
             networks.  With a block blob, you can upload multiple blocks in
             parallel to decrease upload time.  Each block can include an MD5 hash
             to verify the transfer, so you can track upload progress and re-send
             blocks as needed.You can upload blocks in any order, and determine
             their sequence in the final block list commitment step. You can also
             upload a new block to replace an existing uncommitted block of the
             same block ID.  You have one week to commit blocks to a blob before
             they are discarded.  All uncommitted blocks are also discarded when a
             block list commitment operation occurs but does not include them.
            
             You can modify an existing block blob by inserting, replacing, or
             deleting existing blocks. After uploading the block or blocks that
             have changed, you can commit a new version of the blob by committing
             the new blocks with the existing blocks you want to keep using a
             single commit operation. To insert the same range of bytes in two
             different locations of the committed blob, you can commit the same
             block in two places within the same commit operation.For any commit
             operation, if any block is not found, the entire commitment operation
             fails with an error, and the blob is not modified. Any block commitment
             overwrites the blob’s existing properties and metadata, and discards
             all uncommitted blocks.
            
             Block IDs are strings of equal length within a blob. Block client code
             usually uses base-64 encoding to normalize strings into equal lengths.
             When using base-64 encoding, the pre-encoded string must be 64 bytes
             or less.  Block ID values can be duplicated in different blobs.  A
             blob can have up to 100,000 uncommitted blocks, but their total size
             cannot exceed 200,000 MB.
            
             If you write a block for a blob that does not exist, a new block blob
             is created, with a length of zero bytes.  This blob will appear in
             blob lists that include uncommitted blobs.  If you don’t commit any
             block to this blob, it and its uncommitted blocks will be discarded
             one week after the last successful block upload. All uncommitted
             blocks are also discarded when a new blob of the same name is created
             using a single step(rather than the two-step block upload-then-commit
             process).
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BlockBlobClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
            class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlockBlobClient (Uri blobUri, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.#ctor(System.Uri,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlockBlobClient : Uri * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlockBlobClient" Usage="new Azure.Storage.Blobs.Specialized.BlockBlobClient (blobUri, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="T:System.Uri" /> referencing the block blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlockBlobClient (string connectionString, string containerName, string blobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName, string blobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String, blobName As String)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlockBlobClient : string * string * string -&gt; Azure.Storage.Blobs.Specialized.BlockBlobClient" Usage="new Azure.Storage.Blobs.Specialized.BlockBlobClient (connectionString, containerName, blobName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container containing this block blob.
             </param>
        <param name="blobName">
             The name of this block blob.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlockBlobClient (Uri blobUri, Azure.Core.TokenCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Core.TokenCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, credential As TokenCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlockBlobClient : Uri * Azure.Core.TokenCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlockBlobClient" Usage="new Azure.Storage.Blobs.Specialized.BlockBlobClient (blobUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="T:System.Uri" /> referencing the blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlockBlobClient (Uri blobUri, Azure.Storage.StorageSharedKeyCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Storage.StorageSharedKeyCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, credential As StorageSharedKeyCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlockBlobClient : Uri * Azure.Storage.StorageSharedKeyCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlockBlobClient" Usage="new Azure.Storage.Blobs.Specialized.BlockBlobClient (blobUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="T:System.Uri" /> referencing the blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlockBlobClient (string connectionString, string containerName, string blobName, Azure.Storage.Blobs.BlobClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName, string blobName, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.#ctor(System.String,System.String,System.String,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String, blobName As String, options As BlobClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlockBlobClient : string * string * string * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.BlockBlobClient" Usage="new Azure.Storage.Blobs.Specialized.BlockBlobClient (connectionString, containerName, blobName, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container containing this block blob.
             </param>
        <param name="blobName">
             The name of this block blob.
             </param>
        <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlockBlobMaxBlocks">
      <MemberSignature Language="C#" Value="public const int BlockBlobMaxBlocks = 50000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 BlockBlobMaxBlocks = (50000)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Const BlockBlobMaxBlocks As Integer  = 50000" />
      <MemberSignature Language="F#" Value="val mutable BlockBlobMaxBlocks : int" Usage="Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxBlocks" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>50000</MemberValue>
      <Docs>
        <summary>
          <see cref="F:Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxBlocks" /> indicates the maximum number of
            blocks allowed in a block blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlockBlobMaxStageBlockBytes">
      <MemberSignature Language="C#" Value="public const int BlockBlobMaxStageBlockBytes = 104857600;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 BlockBlobMaxStageBlockBytes = (104857600)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxStageBlockBytes" />
      <MemberSignature Language="VB.NET" Value="Public Const BlockBlobMaxStageBlockBytes As Integer  = 104857600" />
      <MemberSignature Language="F#" Value="val mutable BlockBlobMaxStageBlockBytes : int" Usage="Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxStageBlockBytes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>104857600</MemberValue>
      <Docs>
        <summary>
          <see cref="F:Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxStageBlockBytes" /> indicates the maximum
            number of bytes that can be sent in a call to <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockAsync(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlockBlobMaxUploadBlobBytes">
      <MemberSignature Language="C#" Value="public const int BlockBlobMaxUploadBlobBytes = 268435456;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 BlockBlobMaxUploadBlobBytes = (268435456)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxUploadBlobBytes" />
      <MemberSignature Language="VB.NET" Value="Public Const BlockBlobMaxUploadBlobBytes As Integer  = 268435456" />
      <MemberSignature Language="F#" Value="val mutable BlockBlobMaxUploadBlobBytes : int" Usage="Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxUploadBlobBytes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>268435456</MemberValue>
      <Docs>
        <summary>
          <see cref="F:Azure.Storage.Blobs.Specialized.BlockBlobClient.BlockBlobMaxUploadBlobBytes" /> indicates the maximum number of bytes
            that can be sent in a call to <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.UploadAsync(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitBlockList">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt; CommitBlockList (System.Collections.Generic.IEnumerable&lt;string&gt; base64BlockIds, Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt; CommitBlockList(class System.Collections.Generic.IEnumerable`1&lt;string&gt; base64BlockIds, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockList(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CommitBlockList : seq&lt;string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&#xA;override this.CommitBlockList : seq&lt;string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;" Usage="blockBlobClient.CommitBlockList (base64BlockIds, blobHttpHeaders, metadata, blobAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64BlockIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="blobHttpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="blobAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="base64BlockIds">
             Specify the Uncommitted Base64 encoded block IDs to indicate that
             the blob service should search only the uncommitted block list for
             the named blocks.  If the block is not found in the uncommitted
             block list, it will not be written as part of the blob, and a
             <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown.
             </param>
        <param name="blobHttpHeaders">
             Optional standard HTTP header properties that can be set for the
             block blob.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this block blob.
             </param>
        <param name="blobAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> to add
             conditions on committing this block list.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockList(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation writes a blob by
             specifying the list of block IDs that make up the blob.  In order
             to be written as part of a blob, a block must have been
             successfully written to the server in a prior <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlock(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
             operation.  You can call <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockList(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> to
             update a blob by uploading only those blocks that have changed,
             then committing the new and existing blocks together.  You can do
             this by specifying whether to commit a block from the committed
             block list or from the uncommitted block list, or to commit the
             most recently uploaded version of the block, whichever list it
             may belong to.  Any blocks not specified in the block list and
             permanently deleted.
            
             For more information, see  <see href="https://docs.microsoft.com/rest/api/storageservices/put-block-list" /></summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitBlockListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; CommitBlockListAsync (System.Collections.Generic.IEnumerable&lt;string&gt; base64BlockIds, Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; CommitBlockListAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; base64BlockIds, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockListAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CommitBlockListAsync : seq&lt;string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;&#xA;override this.CommitBlockListAsync : seq&lt;string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;" Usage="blockBlobClient.CommitBlockListAsync (base64BlockIds, blobHttpHeaders, metadata, blobAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64BlockIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="blobHttpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="blobAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="base64BlockIds">
             Specify the Uncommitted Base64 encoded block IDs to indicate that
             the blob service should search only the uncommitted block list for
             the named blocks.  If the block is not found in the uncommitted
             block list, it will not be written as part of the blob, and a
             <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown.
             </param>
        <param name="blobHttpHeaders">
             Optional standard HTTP header properties that can be set for the
             block blob.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this block blob.
             </param>
        <param name="blobAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> to add
             conditions on committing this block list.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockListAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation writes a blob by
             specifying the list of block IDs that make up the blob.  In order
             to be written as part of a blob, a block must have been
             successfully written to the server in a prior <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockAsync(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
             operation.  You can call <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockListAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> to
             update a blob by uploading only those blocks that have changed,
             then committing the new and existing blocks together.  You can do
             this by specifying whether to commit a block from the committed
             block list or from the uncommitted block list, or to commit the
             most recently uploaded version of the block, whichever list it
             may belong to.  Any blocks not specified in the block list and
             permanently deleted.
            
             For more information, see  <see href="https://docs.microsoft.com/rest/api/storageservices/put-block-list" /></summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlockList">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt; GetBlockList (Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt; listType = null, string snapshot = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlockList&gt; GetBlockList(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlockListType&gt; listType, string snapshot, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.GetBlockList(System.Nullable{Azure.Storage.Blobs.Models.BlockListType},System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlockList : Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt; * string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt;&#xA;override this.GetBlockList : Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt; * string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt;" Usage="blockBlobClient.GetBlockList (listType, snapshot, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listType" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt;" />
        <Parameter Name="snapshot" Type="System.String" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="listType">
            Specifies whether to return the list of committed blocks, the
            list of uncommitted blocks, or both lists together.  If you omit
            this parameter, Get Block List returns the list of committed blocks.
            </param>
        <param name="snapshot">
            Optionally specifies the blob snapshot to retrieve the block list
            from. For more information on working with blob snapshots, see
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob" />.
            </param>
        <param name="leaseAccessConditions">
            Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
            conditions on retrieving the block list.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
        <summary>
            The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.GetBlockList(System.Nullable{Azure.Storage.Blobs.Models.BlockListType},System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation operation retrieves
            the list of blocks that have been uploaded as part of a block blob.
            There are two block lists maintained for a blob.  The Committed
            Block list has blocks that have been successfully committed to a
            given blob with <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockList(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />.  The
            Uncommitted Block list has blocks that have been uploaded for a
            blob using <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlock(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />, but that have not yet
            been committed.  These blocks are stored in Azure in association
            with a blob, but do not yet form part of the blob.
            </summary>
        <returns>
            A <see cref="T:Azure.Response`1" /> describing requested
            block list.
            </returns>
        <remarks>
            A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlockListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt;&gt; GetBlockListAsync (Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt; listType = null, string snapshot = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlockList&gt;&gt; GetBlockListAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlockListType&gt; listType, string snapshot, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.GetBlockListAsync(System.Nullable{Azure.Storage.Blobs.Models.BlockListType},System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlockListAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt; * string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt;&gt;&#xA;override this.GetBlockListAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt; * string * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt;&gt;" Usage="blockBlobClient.GetBlockListAsync (listType, snapshot, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockList&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listType" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlockListType&gt;" />
        <Parameter Name="snapshot" Type="System.String" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="listType">
            Specifies whether to return the list of committed blocks, the
            list of uncommitted blocks, or both lists together.  If you omit
            this parameter, Get Block List returns the list of committed blocks.
            </param>
        <param name="snapshot">
            Optionally specifies the blob snapshot to retrieve the block list
            from. For more information on working with blob snapshots, see
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob" />.
            </param>
        <param name="leaseAccessConditions">
            Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
            conditions on retrieving the block list.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
        <summary>
            The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.GetBlockListAsync(System.Nullable{Azure.Storage.Blobs.Models.BlockListType},System.String,System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation operation retrieves
            the list of blocks that have been uploaded as part of a block blob.
            There are two block lists maintained for a blob.  The Committed
            Block list has blocks that have been successfully committed to a
            given blob with <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockListAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />.  The
            Uncommitted Block list has blocks that have been uploaded for a
            blob using <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockAsync(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />, but that have not yet
            been committed.  These blocks are stored in Azure in association
            with a blob, but do not yet form part of the blob.
            </summary>
        <returns>
            A <see cref="T:Azure.Response`1" /> describing requested
            block list.
            </returns>
        <remarks>
            A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageBlock">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt; StageBlock (string base64BlockId, System.IO.Stream content, byte[] transactionalContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, IProgress&lt;Azure.Storage.Common.StorageProgress&gt; progressHandler = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlockInfo&gt; StageBlock(string base64BlockId, class System.IO.Stream content, unsigned int8[] transactionalContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, class System.IProgress`1&lt;class Azure.Storage.Common.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlock(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StageBlock : string * System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&#xA;override this.StageBlock : string * System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;" Usage="blockBlobClient.StageBlock (base64BlockId, content, transactionalContentHash, leaseAccessConditions, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64BlockId" Type="System.String" />
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="transactionalContentHash" Type="System.Byte[]" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Azure.Storage.Common.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="base64BlockId">
             A valid Base64 string value that identifies the block. Prior to
             encoding, the string must be less than or equal to 64 bytes in
             size.
            
             For a given blob, the length of the value specified for the
             blockid parameter must be the same size for each block. Note that
             the Base64 string must be URL-encoded.
             </param>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="transactionalContentHash">
             An optional MD5 hash of the block <paramref name="content" />.
             This hash is used to verify the integrity of the block during
             transport.  When this value is specified, the storage service
             compares the hash of the content that has arrived with this value.
             Note that this MD5 hash is not stored with the blob.  If the two
             hashes do not match, the operation will throw a
             <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on the upload of this block.
             </param>
        <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlock(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation creates a new block as
             part of a block blob's "staging area" to be eventually committed
             via the <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockList(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/put-block" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt; StageBlockAsync (string base64BlockId, System.IO.Stream content, byte[] transactionalContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, IProgress&lt;Azure.Storage.Common.StorageProgress&gt; progressHandler = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlockInfo&gt;&gt; StageBlockAsync(string base64BlockId, class System.IO.Stream content, unsigned int8[] transactionalContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, class System.IProgress`1&lt;class Azure.Storage.Common.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockAsync(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StageBlockAsync : string * System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt;&#xA;override this.StageBlockAsync : string * System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt;" Usage="blockBlobClient.StageBlockAsync (base64BlockId, content, transactionalContentHash, leaseAccessConditions, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64BlockId" Type="System.String" />
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="transactionalContentHash" Type="System.Byte[]" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Azure.Storage.Common.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="base64BlockId">
             A valid Base64 string value that identifies the block. Prior to
             encoding, the string must be less than or equal to 64 bytes in
             size.
            
             For a given blob, the length of the value specified for the
             blockid parameter must be the same size for each block. Note that
             the Base64 string must be URL-encoded.
             </param>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="transactionalContentHash">
             An optional MD5 hash of the block <paramref name="content" />.
             This hash is used to verify the integrity of the block during
             transport.  When this value is specified, the storage service
             compares the hash of the content that has arrived with this value.
             Note that this MD5 hash is not stored with the blob.  If the two
             hashes do not match, the operation will throw a
             <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on the upload of this block.
             </param>
        <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockAsync(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation creates a new block as
             part of a block blob's "staging area" to be eventually committed
             via the <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockListAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/put-block" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageBlockFromUri">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt; StageBlockFromUri (Uri sourceUri, string base64BlockId, Azure.Core.Http.HttpRange sourceRange = null, byte[] sourceContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; sourceAccessConditions = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlockInfo&gt; StageBlockFromUri(class System.Uri sourceUri, string base64BlockId, valuetype Azure.Core.Http.HttpRange sourceRange, unsigned int8[] sourceContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; sourceAccessConditions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockFromUri(System.Uri,System.String,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StageBlockFromUri : Uri * string * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&#xA;override this.StageBlockFromUri : Uri * string * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;" Usage="blockBlobClient.StageBlockFromUri (sourceUri, base64BlockId, sourceRange, sourceContentHash, sourceAccessConditions, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceUri" Type="System.Uri" />
        <Parameter Name="base64BlockId" Type="System.String" />
        <Parameter Name="sourceRange" Type="Azure.Core.Http.HttpRange" />
        <Parameter Name="sourceContentHash" Type="System.Byte[]" />
        <Parameter Name="sourceAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceUri">
             Specifies the <see cref="T:System.Uri" /> of the source blob.  The value may
             be a URL of up to 2 KB in length that specifies a blob.  The
             source blob must either be public or must be authenticated via a
             shared access signature. If the source blob is public, no
             authentication is required to perform the operation.
             </param>
        <param name="base64BlockId">
             A valid Base64 string value that identifies the block. Prior to
             encoding, the string must be less than or equal to 64 bytes in
             size.  For a given blob, the length of the value specified for
             the <paramref name="base64BlockId" /> parameter must be the same
             size for each block.  Note that the Base64 string must be
             URL-encoded.
             </param>
        <param name="sourceRange">
             Optionally uploads only the bytes of the blob in the
             <paramref name="sourceUri" /> in the specified range.  If this is
             not specified, the entire source blob contents are uploaded as a
             single block.
             </param>
        <param name="sourceContentHash">
             Optional MD5 hash of the block content from the
             <paramref name="sourceUri" />.  This hash is used to verify the
             integrity of the block during transport of the data from the Uri.
             When this hash is specified, the storage service compares the hash
             of the content that has arrived from the <paramref name="sourceUri" />
             with this value.  Note that this md5 hash is not stored with the
             blob.  If the two hashes do not match, the operation will fail
             with a <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="sourceAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on the copying of data from this source blob.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on the staging of this block.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockFromUri(System.Uri,System.String,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation creates a new
             block to be committed as part of a blob where the contents are
             read from the <paramref name="sourceUri" />.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="StageBlockFromUriAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt; StageBlockFromUriAsync (Uri sourceUri, string base64BlockId, Azure.Core.Http.HttpRange sourceRange = null, byte[] sourceContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; sourceAccessConditions = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlockInfo&gt;&gt; StageBlockFromUriAsync(class System.Uri sourceUri, string base64BlockId, valuetype Azure.Core.Http.HttpRange sourceRange, unsigned int8[] sourceContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.HttpAccessConditions&gt; sourceAccessConditions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockFromUriAsync(System.Uri,System.String,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StageBlockFromUriAsync : Uri * string * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt;&#xA;override this.StageBlockFromUriAsync : Uri * string * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt;" Usage="blockBlobClient.StageBlockFromUriAsync (sourceUri, base64BlockId, sourceRange, sourceContentHash, sourceAccessConditions, leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlockInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceUri" Type="System.Uri" />
        <Parameter Name="base64BlockId" Type="System.String" />
        <Parameter Name="sourceRange" Type="Azure.Core.Http.HttpRange" />
        <Parameter Name="sourceContentHash" Type="System.Byte[]" />
        <Parameter Name="sourceAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.HttpAccessConditions&gt;" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceUri">
             Specifies the <see cref="T:System.Uri" /> of the source blob.  The value may
             be a URL of up to 2 KB in length that specifies a blob.  The
             source blob must either be public or must be authenticated via a
             shared access signature. If the source blob is public, no
             authentication is required to perform the operation.
             </param>
        <param name="base64BlockId">
             A valid Base64 string value that identifies the block. Prior to
             encoding, the string must be less than or equal to 64 bytes in
             size.  For a given blob, the length of the value specified for
             the <paramref name="base64BlockId" /> parameter must be the same
             size for each block.  Note that the Base64 string must be
             URL-encoded.
             </param>
        <param name="sourceRange">
             Optionally uploads only the bytes of the blob in the
             <paramref name="sourceUri" /> in the specified range.  If this is
             not specified, the entire source blob contents are uploaded as a
             single block.
             </param>
        <param name="sourceContentHash">
             Optional MD5 hash of the block content from the
             <paramref name="sourceUri" />.  This hash is used to verify the
             integrity of the block during transport of the data from the Uri.
             When this hash is specified, the storage service compares the hash
             of the content that has arrived from the <paramref name="sourceUri" />
             with this value.  Note that this md5 hash is not stored with the
             blob.  If the two hashes do not match, the operation will fail
             with a <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="sourceAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.HttpAccessConditions" /> to add
             conditions on the copying of data from this source blob.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on the staging of this block.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockFromUriAsync(System.Uri,System.String,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.HttpAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation creates a new
             block to be committed as part of a blob where the contents are
             read from the <paramref name="sourceUri" />.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Upload">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt; Upload (System.IO.Stream content, Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions = null, IProgress&lt;Azure.Storage.Common.StorageProgress&gt; progressHandler = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt; Upload(class System.IO.Stream content, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions, class System.IProgress`1&lt;class Azure.Storage.Common.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.Upload(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Upload : System.IO.Stream * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&#xA;override this.Upload : System.IO.Stream * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;" Usage="blockBlobClient.Upload (content, blobHttpHeaders, metadata, blobAccessConditions, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="blobHttpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="blobAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Azure.Storage.Common.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="blobHttpHeaders">
             Optional standard HTTP header properties that can be set for the
             block blob.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this block blob.
             </param>
        <param name="blobAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> to add
             conditions on the creation of this new block blob.
             </param>
        <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.Upload(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation creates a new block  blob,
             or updates the content of an existing block blob.  Updating an
             existing block blob overwrites any existing metadata on the blob.
            
             Partial updates are not supported with <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.Upload(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />;
             the content of the existing blob is overwritten with the content
             of the new blob.  To perform a partial update of the content of a
             block blob, use the <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlock(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> and
             <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockList(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operations.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; UploadAsync (System.IO.Stream content, Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions = null, IProgress&lt;Azure.Storage.Common.StorageProgress&gt; progressHandler = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; UploadAsync(class System.IO.Stream content, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; blobHttpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; blobAccessConditions, class System.IProgress`1&lt;class Azure.Storage.Common.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.UploadAsync(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UploadAsync : System.IO.Stream * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;&#xA;override this.UploadAsync : System.IO.Stream * Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;" Usage="blockBlobClient.UploadAsync (content, blobHttpHeaders, metadata, blobAccessConditions, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="blobHttpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="blobAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Azure.Storage.Common.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="blobHttpHeaders">
             Optional standard HTTP header properties that can be set for the
             block blob.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this block blob.
             </param>
        <param name="blobAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add
             conditions on the creation of this new block blob.
             </param>
        <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.UploadAsync(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation creates a new block  blob,
             or updates the content of an existing block blob.  Updating an
             existing block blob overwrites any existing metadata on the blob.
            
             Partial updates are not supported with <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.UploadAsync(System.IO.Stream,System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />;
             the content of the existing blob is overwritten with the content
             of the new blob.  To perform a partial update of the content of a
             block blob, use the <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.StageBlockAsync(System.String,System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> and
             <see cref="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.CommitBlockListAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operations.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSnapshot">
      <MemberSignature Language="C#" Value="public Azure.Storage.Blobs.Specialized.BlockBlobClient WithSnapshot (string snapshot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Azure.Storage.Blobs.Specialized.BlockBlobClient WithSnapshot(string snapshot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.WithSnapshot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithSnapshot (snapshot As String) As BlockBlobClient" />
      <MemberSignature Language="F#" Value="override this.WithSnapshot : string -&gt; Azure.Storage.Blobs.Specialized.BlockBlobClient" Usage="blockBlobClient.WithSnapshot snapshot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.Specialized.BlockBlobClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="snapshot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="snapshot">The snapshot identifier.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />
             class with an identical <see cref="T:System.Uri" /> source but the specified
             <paramref name="snapshot" /> timestamp.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob" />.
             </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> instance.</returns>
        <remarks>
             Pass null or empty string to remove the snapshot returning a URL
             to the base blob.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSnapshotImpl">
      <MemberSignature Language="C#" Value="protected override sealed Azure.Storage.Blobs.Specialized.BlobBaseClient WithSnapshotImpl (string snapshot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Azure.Storage.Blobs.Specialized.BlobBaseClient WithSnapshotImpl(string snapshot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlockBlobClient.WithSnapshotImpl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function WithSnapshotImpl (snapshot As String) As BlobBaseClient" />
      <MemberSignature Language="F#" Value="override this.WithSnapshotImpl : string -&gt; Azure.Storage.Blobs.Specialized.BlobBaseClient" Usage="blockBlobClient.WithSnapshotImpl snapshot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.Specialized.BlobBaseClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="snapshot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="snapshot">The snapshot identifier.</param>
        <summary>
            Creates a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> class
            with an identical <see cref="T:System.Uri" /> source but the specified
            <paramref name="snapshot" /> timestamp.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
