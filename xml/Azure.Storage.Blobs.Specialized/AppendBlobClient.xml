<Type Name="AppendBlobClient" FullName="Azure.Storage.Blobs.Specialized.AppendBlobClient">
  <TypeSignature Language="C#" Value="public class AppendBlobClient : Azure.Storage.Blobs.Specialized.BlobBaseClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AppendBlobClient extends Azure.Storage.Blobs.Specialized.BlobBaseClient" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
  <TypeSignature Language="VB.NET" Value="Public Class AppendBlobClient&#xA;Inherits BlobBaseClient" />
  <TypeSignature Language="F#" Value="type AppendBlobClient = class&#xA;    inherit BlobBaseClient" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Storage.Blobs.Specialized.BlobBaseClient</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             The <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" /> allows you to manipulate Azure
             Storage append blobs.
            
             An append blob is comprised of blocks and is optimized for append
             operations.  When you modify an append blob, blocks are added to the
             end of the blob only, via the <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockAsync(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
             operation.  Updating or deleting of existing blocks is not supported.
             Unlike a block blob, an append blob does not expose its block IDs.
            
             Each block in an append blob can be a different size, up to a maximum
             of 4 MB, and an append blob can include up to 50,000 blocks.  The
             maximum size of an append blob is therefore slightly more than 195 GB
             (4 MB X 50,000 blocks).
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AppendBlobClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
            class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppendBlobClient (Uri blobUri, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.#ctor(System.Uri,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.AppendBlobClient : Uri * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.AppendBlobClient" Usage="new Azure.Storage.Blobs.Specialized.AppendBlobClient (blobUri, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="T:System.Uri" /> referencing the append blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppendBlobClient (string connectionString, string containerName, string blobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName, string blobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String, blobName As String)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.AppendBlobClient : string * string * string -&gt; Azure.Storage.Blobs.Specialized.AppendBlobClient" Usage="new Azure.Storage.Blobs.Specialized.AppendBlobClient (connectionString, containerName, blobName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container containing this append blob.
             </param>
        <param name="blobName">
             The name of this append blob.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppendBlobClient (Uri blobUri, Azure.Core.TokenCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Core.TokenCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, credential As TokenCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.AppendBlobClient : Uri * Azure.Core.TokenCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.AppendBlobClient" Usage="new Azure.Storage.Blobs.Specialized.AppendBlobClient (blobUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="T:System.Uri" /> referencing the append blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppendBlobClient (Uri blobUri, Azure.Storage.StorageSharedKeyCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobUri, class Azure.Storage.StorageSharedKeyCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobUri As Uri, credential As StorageSharedKeyCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.AppendBlobClient : Uri * Azure.Storage.StorageSharedKeyCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.AppendBlobClient" Usage="new Azure.Storage.Blobs.Specialized.AppendBlobClient (blobUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobUri">
            A <see cref="T:System.Uri" /> referencing the append blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppendBlobClient (string connectionString, string containerName, string blobName, Azure.Storage.Blobs.BlobClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName, string blobName, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.#ctor(System.String,System.String,System.String,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String, blobName As String, options As BlobClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.AppendBlobClient : string * string * string * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.Specialized.AppendBlobClient" Usage="new Azure.Storage.Blobs.Specialized.AppendBlobClient (connectionString, containerName, blobName, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container containing this append blob.
             </param>
        <param name="blobName">
             The name of this append blob.
             </param>
        <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlobMaxAppendBlockBytes">
      <MemberSignature Language="C#" Value="public const int AppendBlobMaxAppendBlockBytes = 4194304;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 AppendBlobMaxAppendBlockBytes = (4194304)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlobMaxAppendBlockBytes" />
      <MemberSignature Language="VB.NET" Value="Public Const AppendBlobMaxAppendBlockBytes As Integer  = 4194304" />
      <MemberSignature Language="F#" Value="val mutable AppendBlobMaxAppendBlockBytes : int" Usage="Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlobMaxAppendBlockBytes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>4194304</MemberValue>
      <Docs>
        <summary>
          <see cref="F:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlobMaxAppendBlockBytes" /> indicates the maximum
            number of bytes that can be sent in a call to AppendBlock.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlobMaxBlocks">
      <MemberSignature Language="C#" Value="public const int AppendBlobMaxBlocks = 50000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 AppendBlobMaxBlocks = (50000)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlobMaxBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Const AppendBlobMaxBlocks As Integer  = 50000" />
      <MemberSignature Language="F#" Value="val mutable AppendBlobMaxBlocks : int" Usage="Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlobMaxBlocks" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>50000</MemberValue>
      <Docs>
        <summary>
          <see cref="F:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlobMaxBlocks" /> indicates the maximum number of
            blocks allowed in an append blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlock">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt; AppendBlock (System.IO.Stream content, byte[] transactionalContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions = null, IProgress&lt;Azure.Storage.Common.StorageProgress&gt; progressHandler = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobAppendInfo&gt; AppendBlock(class System.IO.Stream content, unsigned int8[] transactionalContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions, class System.IProgress`1&lt;class Azure.Storage.Common.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlock(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlock : System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&#xA;override this.AppendBlock : System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;" Usage="appendBlobClient.AppendBlock (content, transactionalContentHash, accessConditions, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="transactionalContentHash" Type="System.Byte[]" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Azure.Storage.Common.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content of the block to
             append.
             </param>
        <param name="transactionalContentHash">
             Optional MD5 hash of the block content.  This hash is used to
             verify the integrity of the block during transport. When this hash
             is specified, the storage service compares the hash of the content
             that has arrived with this value.  Note that this MD5 hash is not
             stored with the blob.  If the two hashes do not match, the
             operation will fail with a <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on appending content to this append blob.
             </param>
        <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlock(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation commits a new block
             of data, represented by the <paramref name="content" /><see cref="T:System.IO.Stream" />,
             to the end of the existing append blob.  The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlock(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
             operation is only permitted if the blob was created as an append
             blob.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/append-block" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated append blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt; AppendBlockAsync (System.IO.Stream content, byte[] transactionalContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions = null, IProgress&lt;Azure.Storage.Common.StorageProgress&gt; progressHandler = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt; AppendBlockAsync(class System.IO.Stream content, unsigned int8[] transactionalContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions, class System.IProgress`1&lt;class Azure.Storage.Common.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockAsync(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockAsync : System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt;&#xA;override this.AppendBlockAsync : System.IO.Stream * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * IProgress&lt;Azure.Storage.Common.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt;" Usage="appendBlobClient.AppendBlockAsync (content, transactionalContentHash, accessConditions, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="transactionalContentHash" Type="System.Byte[]" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Azure.Storage.Common.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content of the block to
             append.
             </param>
        <param name="transactionalContentHash">
             Optional MD5 hash of the block content.  This hash is used to
             verify the integrity of the block during transport. When this hash
             is specified, the storage service compares the hash of the content
             that has arrived with this value.  Note that this MD5 hash is not
             stored with the blob.  If the two hashes do not match, the
             operation will fail with a <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on appending content to this append blob.
             </param>
        <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockAsync(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation commits a new block
             of data, represented by the <paramref name="content" /><see cref="T:System.IO.Stream" />,
             to the end of the existing append blob.  The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockAsync(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" />
             operation is only permitted if the blob was created as an append
             blob.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/append-block" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated append blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockFromUri">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt; AppendBlockFromUri (Uri sourceUri, Azure.Core.Http.HttpRange sourceRange = null, byte[] sourceContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; sourceAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobAppendInfo&gt; AppendBlockFromUri(class System.Uri sourceUri, valuetype Azure.Core.Http.HttpRange sourceRange, unsigned int8[] sourceContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; sourceAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockFromUri(System.Uri,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockFromUri : Uri * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&#xA;override this.AppendBlockFromUri : Uri * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;" Usage="appendBlobClient.AppendBlockFromUri (sourceUri, sourceRange, sourceContentHash, accessConditions, sourceAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceUri" Type="System.Uri" />
        <Parameter Name="sourceRange" Type="Azure.Core.Http.HttpRange" />
        <Parameter Name="sourceContentHash" Type="System.Byte[]" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="sourceAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceUri">
             Specifies the <see cref="T:System.Uri" /> of the source blob.  The value may
             be a <see cref="T:System.Uri" /> of up to 2 KB in length that specifies a
             blob.  The source blob must either be public or must be
             authenticated via a shared access signature.  If the source blob
             is public, no authentication is required to perform the operation.
             </param>
        <param name="sourceRange">
             Optionally only upload the bytes of the blob in the
             <paramref name="sourceUri" /> in the specified range.  If this is
             not specified, the entire source blob contents are uploaded as a
             single append block.
             </param>
        <param name="sourceContentHash">
             Optional MD5 hash of the append block content from the
             <paramref name="sourceUri" />.  This hash is used to verify the
             integrity of the block during transport of the data from the Uri.
             When this hash is specified, the storage service compares the hash
             of the content that has arrived from the <paramref name="sourceUri" />
             with this value.  Note that this md5 hash is not stored with the
             blob.  If the two hashes do not match, the operation will fail
             with a <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on the copying of data to this append blob.
             </param>
        <param name="sourceAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on the copying of data from this source blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockFromUri(System.Uri,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" /> operation commits a new
             block of data, represented by the <paramref name="sourceUri" />,
             to the end of the existing append blob.  The
             <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockFromUri(System.Uri,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" /> operation is only permitted
             if the blob was created as an append blob.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated append blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockFromUriAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt; AppendBlockFromUriAsync (Uri sourceUri, Azure.Core.Http.HttpRange sourceRange = null, byte[] sourceContentHash = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; sourceAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt; AppendBlockFromUriAsync(class System.Uri sourceUri, valuetype Azure.Core.Http.HttpRange sourceRange, unsigned int8[] sourceContentHash, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; sourceAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockFromUriAsync(System.Uri,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockFromUriAsync : Uri * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt;&#xA;override this.AppendBlockFromUriAsync : Uri * Azure.Core.Http.HttpRange * byte[] * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt;" Usage="appendBlobClient.AppendBlockFromUriAsync (sourceUri, sourceRange, sourceContentHash, accessConditions, sourceAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobAppendInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceUri" Type="System.Uri" />
        <Parameter Name="sourceRange" Type="Azure.Core.Http.HttpRange" />
        <Parameter Name="sourceContentHash" Type="System.Byte[]" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="sourceAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceUri">
             Specifies the <see cref="T:System.Uri" /> of the source blob.  The value may
             be a <see cref="T:System.Uri" /> of up to 2 KB in length that specifies a
             blob.  The source blob must either be public or must be
             authenticated via a shared access signature.  If the source blob
             is public, no authentication is required to perform the operation.
             </param>
        <param name="sourceRange">
             Optionally only upload the bytes of the blob in the
             <paramref name="sourceUri" /> in the specified range.  If this is
             not specified, the entire source blob contents are uploaded as a
             single append block.
             </param>
        <param name="sourceContentHash">
             Optional MD5 hash of the append block content from the
             <paramref name="sourceUri" />.  This hash is used to verify the
             integrity of the block during transport of the data from the Uri.
             When this hash is specified, the storage service compares the hash
             of the content that has arrived from the <paramref name="sourceUri" />
             with this value.  Note that this md5 hash is not stored with the
             blob.  If the two hashes do not match, the operation will fail
             with a <see cref="T:Azure.Storage.StorageRequestFailedException" />.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on the copying of data to this append blob.
             </param>
        <param name="sourceAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on the copying of data from this source blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockFromUriAsync(System.Uri,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" /> operation commits a new
             block of data, represented by the <paramref name="sourceUri" />,
             to the end of the existing append blob.  The
             <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockFromUriAsync(System.Uri,Azure.Core.Http.HttpRange,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" /> operation is only permitted
             if the blob was created as an append blob.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated append blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt; Create (Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt; Create(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.Create(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Create : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&#xA;override this.Create : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;" Usage="appendBlobClient.Create (httpHeaders, metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new append blob.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this append blob.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on the creation of this new append blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.Create(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" /> operation creates a new 0-length
             append blob.  The content of any existing blob is overwritten with
             the newly initialized append blob.  To add content to the append
             blob, call the <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlock(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created append blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; CreateAsync (Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; CreateAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.CreateAsync(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;&#xA;override this.CreateAsync : Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;" Usage="appendBlobClient.CreateAsync (httpHeaders, metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobHttpHeaders&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.AppendBlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new append blob.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this append blob.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.AppendBlobAccessConditions" /> to add
             conditions on the creation of this new append blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.CreateAsync(System.Nullable{Azure.Storage.Blobs.Models.BlobHttpHeaders},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.Threading.CancellationToken)" /> operation creates a new 0-length
             append blob.  The content of any existing blob is overwritten with
             the newly initialized append blob.  To add content to the append
             blob, call the <see cref="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.AppendBlockAsync(System.IO.Stream,System.Byte[],System.Nullable{Azure.Storage.Blobs.Models.AppendBlobAccessConditions},System.IProgress{Azure.Storage.Common.StorageProgress},System.Threading.CancellationToken)" /> operation.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created append blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSnapshot">
      <MemberSignature Language="C#" Value="public Azure.Storage.Blobs.Specialized.AppendBlobClient WithSnapshot (string snapshot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Azure.Storage.Blobs.Specialized.AppendBlobClient WithSnapshot(string snapshot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.AppendBlobClient.WithSnapshot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithSnapshot (snapshot As String) As AppendBlobClient" />
      <MemberSignature Language="F#" Value="override this.WithSnapshot : string -&gt; Azure.Storage.Blobs.Specialized.AppendBlobClient" Usage="appendBlobClient.WithSnapshot snapshot" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.Specialized.AppendBlobClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="snapshot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="snapshot">The snapshot identifier.</param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />
             class with an identical <see cref="T:System.Uri" /> source but the specified
             <paramref name="snapshot" /> timestamp.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/creating-a-snapshot-of-a-blob" />.
             </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" /> instance.</returns>
        <remarks>
             Pass null or empty string to remove the snapshot returning a URL
             to the base blob.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
