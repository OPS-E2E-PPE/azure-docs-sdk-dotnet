<Type Name="BlobBatch" FullName="Azure.Storage.Blobs.Specialized.BlobBatch">
  <TypeSignature Language="C#" Value="public class BlobBatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobBatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.Specialized.BlobBatch" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobBatch" />
  <TypeSignature Language="F#" Value="type BlobBatch = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs.Batching</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             A <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> allows you to batch multiple Azure Storage
             operations in a single request via <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatch(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch" />.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BlobBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batching</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Creates a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobBatch (Azure.Storage.Blobs.Specialized.BlobBatchClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Storage.Blobs.Specialized.BlobBatchClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatch.#ctor(Azure.Storage.Blobs.Specialized.BlobBatchClient)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (client As BlobBatchClient)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlobBatch : Azure.Storage.Blobs.Specialized.BlobBatchClient -&gt; Azure.Storage.Blobs.Specialized.BlobBatch" Usage="new Azure.Storage.Blobs.Specialized.BlobBatch client" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batching</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.Specialized.BlobBatchClient" />
      </Parameters>
      <Docs>
        <param name="client">
            The <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatchClient" /> associated with this batch.
            </param>
        <summary>
            Creates a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteBlob (Uri blobUri, Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteBlob(class System.Uri blobUri, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatch.DeleteBlob(System.Uri,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlob (blobUri As Uri, Optional deleteOptions As Nullable(Of DeleteSnapshotsOption) = null, Optional accessConditions As Nullable(Of BlobAccessConditions) = null) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlob : Uri * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; -&gt; Azure.Response&#xA;override this.DeleteBlob : Uri * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; -&gt; Azure.Response" Usage="blobBatch.DeleteBlob (blobUri, deleteOptions, accessConditions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batching</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="deleteOptions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
      </Parameters>
      <Docs>
        <param name="blobUri">
             The blob to delete's primary <see cref="T:System.Uri" /> endpoint.
             </param>
        <param name="deleteOptions">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             deleting this blob.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatch.DeleteBlob(System.Uri,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions})" />
             operation marks the specified blob or snapshot for deletion. The
             blob is later deleted during garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.Include" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.  The response
             cannot be used until the batch has been submitted with
             <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatchAsync(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteBlob (string blobContainerName, string blobName, Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteBlob(string blobContainerName, string blobName, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatch.DeleteBlob(System.String,System.String,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlob (blobContainerName As String, blobName As String, Optional deleteOptions As Nullable(Of DeleteSnapshotsOption) = null, Optional accessConditions As Nullable(Of BlobAccessConditions) = null) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlob : string * string * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; -&gt; Azure.Response&#xA;override this.DeleteBlob : string * string * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; -&gt; Azure.Response" Usage="blobBatch.DeleteBlob (blobContainerName, blobName, deleteOptions, accessConditions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batching</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobContainerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="deleteOptions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
      </Parameters>
      <Docs>
        <param name="blobContainerName">
             The name of the container containing the blob to delete.
             </param>
        <param name="blobName">
             The name of the blob to delete.
             </param>
        <param name="deleteOptions">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             deleting this blob.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatch.DeleteBlob(System.String,System.String,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions})" />
             operation marks the specified blob or snapshot for  deletion. The
             blob is later deleted during garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.Include" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.  The response
             cannot be used until the batch has been submitted with
             <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatchAsync(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlobAccessTier">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SetBlobAccessTier (Uri blobUri, Azure.Storage.Blobs.Models.AccessTier accessTier, Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; rehydratePriority = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SetBlobAccessTier(class System.Uri blobUri, valuetype Azure.Storage.Blobs.Models.AccessTier accessTier, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.RehydratePriority&gt; rehydratePriority, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatch.SetBlobAccessTier(System.Uri,Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.RehydratePriority},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions})" />
      <MemberSignature Language="F#" Value="abstract member SetBlobAccessTier : Uri * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; -&gt; Azure.Response&#xA;override this.SetBlobAccessTier : Uri * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; -&gt; Azure.Response" Usage="blobBatch.SetBlobAccessTier (blobUri, accessTier, rehydratePriority, leaseAccessConditions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batching</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="accessTier" Type="Azure.Storage.Blobs.Models.AccessTier" />
        <Parameter Name="rehydratePriority" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt;" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
      </Parameters>
      <Docs>
        <param name="blobUri">
             The blob's primary <see cref="T:System.Uri" /> endpoint.
             </param>
        <param name="accessTier">
             Indicates the tier to be set on the blob.
             </param>
        <param name="rehydratePriority">
             Optional <see cref="T:Azure.Storage.Blobs.Models.RehydratePriority" />
             Indicates the priority with which to rehydrate an archived blob.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add conditions on
             setting the access tier.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatch.SetBlobAccessTier(System.Uri,Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.RehydratePriority},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions})" />
             operation sets the tier on a blob.  The operation is allowed on
             block blobs in a blob storage or general purpose v2 account.
            
             A block blob's tier determines Hot/Cool/Archive storage type.  This
             operation does not update the blob's ETag.  For detailed
             information about block blob level tiering
             <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.  The response
             cannot be used until the batch has been submitted with
             <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatchAsync(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlobAccessTier">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SetBlobAccessTier (string blobContainerName, string blobName, Azure.Storage.Blobs.Models.AccessTier accessTier, Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; rehydratePriority = null, Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SetBlobAccessTier(string blobContainerName, string blobName, valuetype Azure.Storage.Blobs.Models.AccessTier accessTier, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.RehydratePriority&gt; rehydratePriority, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatch.SetBlobAccessTier(System.String,System.String,Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.RehydratePriority},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions})" />
      <MemberSignature Language="F#" Value="abstract member SetBlobAccessTier : string * string * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; -&gt; Azure.Response&#xA;override this.SetBlobAccessTier : string * string * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; -&gt; Azure.Response" Usage="blobBatch.SetBlobAccessTier (blobContainerName, blobName, accessTier, rehydratePriority, leaseAccessConditions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batching</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobContainerName" Type="System.String" />
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="accessTier" Type="Azure.Storage.Blobs.Models.AccessTier" />
        <Parameter Name="rehydratePriority" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt;" />
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
      </Parameters>
      <Docs>
        <param name="blobContainerName">
             The name of the container containing the blob to set the tier of.
             </param>
        <param name="blobName">
             The name of the blob to set the tier of.
             </param>
        <param name="accessTier">
             Indicates the tier to be set on the blob.
             </param>
        <param name="rehydratePriority">
             Optional <see cref="T:Azure.Storage.Blobs.Models.RehydratePriority" />
             Indicates the priority with which to rehydrate an archived blob.
             </param>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add conditions on
             setting the access tier.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatch.SetBlobAccessTier(System.String,System.String,Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.RehydratePriority},System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions})" />
             operation sets the tier on a blob.  The operation is allowed on
             block blobs in a blob storage or general purpose v2 account.
            
             A block blob's tier determines Hot/Cool/Archive storage type.  This
             operation does not update the blob's ETag.  For detailed
             information about block blob level tiering
             <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.  The response
             cannot be used until the batch has been submitted with
             <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatchAsync(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
