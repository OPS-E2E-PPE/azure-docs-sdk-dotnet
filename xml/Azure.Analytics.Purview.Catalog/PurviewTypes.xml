<Type Name="PurviewTypes" FullName="Azure.Analytics.Purview.Catalog.PurviewTypes">
  <TypeSignature Language="C#" Value="public class PurviewTypes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewTypes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Catalog.PurviewTypes" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewTypes" />
  <TypeSignature Language="F#" Value="type PurviewTypes = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewTypes service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewTypes for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateTypeDefinitions (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateTypeDefinitions(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.CreateTypeDefinitions(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTypeDefinitions (content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateTypeDefinitions : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.CreateTypeDefinitions : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.CreateTypeDefinitions (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary>
            Create all atlas type definitions in bulk, only new definitions will be created.
            Any changes to the existing definitions will be discarded.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateTypeDefinitionsAsync (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateTypeDefinitionsAsync(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.CreateTypeDefinitionsAsync(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTypeDefinitionsAsync (content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.CreateTypeDefinitionsAsync (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary>
            Create all atlas type definitions in bulk, only new definitions will be created.
            Any changes to the existing definitions will be discarded.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTypeByName (string name, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTypeByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeByName (name As String, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.DeleteTypeByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.DeleteTypeByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="options"> The request options. </param>
        <summary> Delete API for type identified by its name. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTypeByNameAsync (string name, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTypeByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeByNameAsync (name As String, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTypeByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.DeleteTypeByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="options"> The request options. </param>
        <summary> Delete API for type identified by its name. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTypeDefinitions (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTypeDefinitions(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeDefinitions(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeDefinitions (content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeDefinitions : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.DeleteTypeDefinitions : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.DeleteTypeDefinitions (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Delete API for all types in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTypeDefinitionsAsync (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTypeDefinitionsAsync(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.DeleteTypeDefinitionsAsync(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTypeDefinitionsAsync (content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.DeleteTypeDefinitionsAsync (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Delete API for all types in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAllTypeDefinitions (Azure.RequestOptions options, bool? includeTermTemplate = default, string type = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAllTypeDefinitions(class Azure.RequestOptions options, valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetAllTypeDefinitions(Azure.RequestOptions,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllTypeDefinitions (options As RequestOptions, Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAllTypeDefinitions : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; Azure.Response&#xA;override this.GetAllTypeDefinitions : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; Azure.Response" Usage="purviewTypes.GetAllTypeDefinitions (options, includeTermTemplate, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <summary> Get all type definitions in Atlas in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAllTypeDefinitionsAsync (Azure.RequestOptions options, bool? includeTermTemplate = default, string type = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAllTypeDefinitionsAsync(class Azure.RequestOptions options, valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetAllTypeDefinitionsAsync(Azure.RequestOptions,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllTypeDefinitionsAsync (options As RequestOptions, Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAllTypeDefinitionsAsync : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAllTypeDefinitionsAsync : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetAllTypeDefinitionsAsync (options, includeTermTemplate, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <summary> Get all type definitions in Atlas in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetClassificationDefByGuid (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetClassificationDefByGuid(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByGuid(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByGuid (guid As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetClassificationDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetClassificationDefByGuid (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the classification. </param>
        <param name="options"> The request options. </param>
        <summary> Get the classification definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetClassificationDefByGuidAsync (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetClassificationDefByGuidAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByGuidAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByGuidAsync (guid As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetClassificationDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetClassificationDefByGuidAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the classification. </param>
        <param name="options"> The request options. </param>
        <summary> Get the classification definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetClassificationDefByName (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetClassificationDefByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByName (name As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetClassificationDefByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetClassificationDefByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the classification. </param>
        <param name="options"> The request options. </param>
        <summary> Get the classification definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetClassificationDefByNameAsync (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetClassificationDefByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetClassificationDefByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationDefByNameAsync (name As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetClassificationDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetClassificationDefByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the classification. </param>
        <param name="options"> The request options. </param>
        <summary> Get the classification definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntityDefinitionByGuid (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntityDefinitionByGuid(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByGuid(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByGuid (guid As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByGuid : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetEntityDefinitionByGuid : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetEntityDefinitionByGuid (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="options"> The request options. </param>
        <summary> Get the Entity definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntityDefinitionByGuidAsync (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntityDefinitionByGuidAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByGuidAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByGuidAsync (guid As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntityDefinitionByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEntityDefinitionByGuidAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="options"> The request options. </param>
        <summary> Get the Entity definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntityDefinitionByName (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntityDefinitionByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByName (name As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetEntityDefinitionByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetEntityDefinitionByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity. </param>
        <param name="options"> The request options. </param>
        <summary> Get the entity definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityDefinitionByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntityDefinitionByNameAsync (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntityDefinitionByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEntityDefinitionByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityDefinitionByNameAsync (name As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntityDefinitionByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntityDefinitionByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEntityDefinitionByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the entity. </param>
        <param name="options"> The request options. </param>
        <summary> Get the entity definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEnumDefByGuid (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEnumDefByGuid(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByGuid(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByGuid (guid As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetEnumDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetEnumDefByGuid (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the enum. </param>
        <param name="options"> The request options. </param>
        <summary> Get the enum definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEnumDefByGuidAsync (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEnumDefByGuidAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByGuidAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByGuidAsync (guid As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEnumDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEnumDefByGuidAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the enum. </param>
        <param name="options"> The request options. </param>
        <summary> Get the enum definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEnumDefByName (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEnumDefByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByName (name As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetEnumDefByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetEnumDefByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the enum. </param>
        <param name="options"> The request options. </param>
        <summary> Get the enum definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEnumDefByNameAsync (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEnumDefByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetEnumDefByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumDefByNameAsync (name As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEnumDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetEnumDefByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the enum. </param>
        <param name="options"> The request options. </param>
        <summary> Get the enum definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelationshipDefByGuid (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelationshipDefByGuid(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByGuid(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByGuid (guid As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetRelationshipDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetRelationshipDefByGuid (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="options"> The request options. </param>
        <summary> Get the relationship definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelationshipDefByGuidAsync (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelationshipDefByGuidAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByGuidAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByGuidAsync (guid As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelationshipDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetRelationshipDefByGuidAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="options"> The request options. </param>
        <summary> Get the relationship definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelationshipDefByName (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelationshipDefByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByName (name As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetRelationshipDefByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetRelationshipDefByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the relationship. </param>
        <param name="options"> The request options. </param>
        <summary> Get the relationship definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelationshipDefByNameAsync (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelationshipDefByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetRelationshipDefByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelationshipDefByNameAsync (name As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRelationshipDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelationshipDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetRelationshipDefByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the relationship. </param>
        <param name="options"> The request options. </param>
        <summary> Get the relationship definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetStructDefByGuid (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetStructDefByGuid(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByGuid(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByGuid (guid As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetStructDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetStructDefByGuid (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the struct. </param>
        <param name="options"> The request options. </param>
        <summary> Get the struct definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetStructDefByGuidAsync (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetStructDefByGuidAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByGuidAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByGuidAsync (guid As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetStructDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetStructDefByGuidAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the struct. </param>
        <param name="options"> The request options. </param>
        <summary> Get the struct definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetStructDefByName (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetStructDefByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByName (name As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetStructDefByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetStructDefByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the struct. </param>
        <param name="options"> The request options. </param>
        <summary> Get the struct definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStructDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetStructDefByNameAsync (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetStructDefByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetStructDefByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStructDefByNameAsync (name As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetStructDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetStructDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetStructDefByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the struct. </param>
        <param name="options"> The request options. </param>
        <summary> Get the struct definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTermTemplateDefByGuid (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTermTemplateDefByGuid(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByGuid(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByGuid (guid As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetTermTemplateDefByGuid : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetTermTemplateDefByGuid (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the term template. </param>
        <param name="options"> The request options. </param>
        <summary> Get the term template definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermTemplateDefByGuidAsync (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermTemplateDefByGuidAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByGuidAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByGuidAsync (guid As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermTemplateDefByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTermTemplateDefByGuidAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the term template. </param>
        <param name="options"> The request options. </param>
        <summary> Get the term template definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTermTemplateDefByName (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTermTemplateDefByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByName (name As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetTermTemplateDefByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetTermTemplateDefByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the term template. </param>
        <param name="options"> The request options. </param>
        <summary> Get the term template definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermTemplateDefByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermTemplateDefByNameAsync (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermTemplateDefByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTermTemplateDefByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermTemplateDefByNameAsync (name As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTermTemplateDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermTemplateDefByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTermTemplateDefByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the term template. </param>
        <param name="options"> The request options. </param>
        <summary> Get the term template definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ],
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTypeDefinitionByGuid (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTypeDefinitionByGuid(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByGuid(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByGuid (guid As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByGuid : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetTypeDefinitionByGuid : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetTypeDefinitionByGuid (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the type. </param>
        <param name="options"> The request options. </param>
        <summary> Get the type definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ],
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ],
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTypeDefinitionByGuidAsync (string guid, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTypeDefinitionByGuidAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByGuidAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByGuidAsync (guid As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTypeDefinitionByGuidAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTypeDefinitionByGuidAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the type. </param>
        <param name="options"> The request options. </param>
        <summary> Get the type definition for the given GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ],
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ],
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTypeDefinitionByName (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTypeDefinitionByName(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByName(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByName (name As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByName : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetTypeDefinitionByName : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.GetTypeDefinitionByName (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="options"> The request options. </param>
        <summary> Get the type definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ],
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ],
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTypeDefinitionByNameAsync (string name, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTypeDefinitionByNameAsync(string name, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionByNameAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionByNameAsync (name As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTypeDefinitionByNameAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTypeDefinitionByNameAsync (name, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the type. </param>
        <param name="options"> The request options. </param>
        <summary> Get the type definition by its name (unique). </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              createTime: number,
              createdBy: string,
              dateFormatter: {
                availableLocales: [string],
                calendar: number,
                dateInstance: DateFormat,
                dateTimeInstance: DateFormat,
                instance: DateFormat,
                lenient: boolean,
                numberFormat: {
                  availableLocales: [string],
                  currency: string,
                  currencyInstance: NumberFormat,
                  groupingUsed: boolean,
                  instance: NumberFormat,
                  integerInstance: NumberFormat,
                  maximumFractionDigits: number,
                  maximumIntegerDigits: number,
                  minimumFractionDigits: number,
                  minimumIntegerDigits: number,
                  numberInstance: NumberFormat,
                  parseIntegerOnly: boolean,
                  percentInstance: NumberFormat,
                  roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                },
                timeInstance: DateFormat,
                timeZone: {
                  dstSavings: number,
                  id: string,
                  availableIds: [string],
                  default: TimeZone,
                  displayName: string,
                  rawOffset: number
                }
              },
              description: string,
              guid: string,
              name: string,
              options: Dictionary&lt;string, string&gt;,
              serviceType: string,
              typeVersion: string,
              updateTime: number,
              updatedBy: string,
              version: number,
              lastModifiedTS: string,
              entityTypes: [string],
              subTypes: [string],
              superTypes: [string],
              relationshipAttributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [
                    {
                      params: Dictionary&lt;string, AnyObject&gt;,
                      type: string
                    }
                  ],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number,
                  isLegacyAttribute: boolean,
                  relationshipTypeName: string
                }
              ],
              defaultValue: string,
              elementDefs: [
                {
                  description: string,
                  ordinal: number,
                  value: string
                }
              ],
              endDef1: {
                cardinality: "SINGLE" | "LIST" | "SET",
                description: string,
                isContainer: boolean,
                isLegacyAttribute: boolean,
                name: string,
                type: string
              },
              endDef2: AtlasRelationshipEndDef,
              relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
              relationshipLabel: string,
              attributeDefs: [
                {
                  cardinality: "SINGLE" | "LIST" | "SET",
                  constraints: [AtlasConstraintDef],
                  defaultValue: string,
                  description: string,
                  includeInNotification: boolean,
                  isIndexable: boolean,
                  isOptional: boolean,
                  isUnique: boolean,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  typeName: string,
                  valuesMaxCount: number,
                  valuesMinCount: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTypeDefinitionHeaders (Azure.RequestOptions options, bool? includeTermTemplate = default, string type = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTypeDefinitionHeaders(class Azure.RequestOptions options, valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionHeaders(Azure.RequestOptions,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionHeaders (options As RequestOptions, Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionHeaders : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; Azure.Response&#xA;override this.GetTypeDefinitionHeaders : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; Azure.Response" Usage="purviewTypes.GetTypeDefinitionHeaders (options, includeTermTemplate, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <summary> List all type definitions returned as a list of minimal information header. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              guid: string,
              name: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeDefinitionHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTypeDefinitionHeadersAsync (Azure.RequestOptions options, bool? includeTermTemplate = default, string type = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTypeDefinitionHeadersAsync(class Azure.RequestOptions options, valuetype System.Nullable`1&lt;bool&gt; includeTermTemplate, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.GetTypeDefinitionHeadersAsync(Azure.RequestOptions,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDefinitionHeadersAsync (options As RequestOptions, Optional includeTermTemplate As Nullable(Of Boolean) = Nothing, Optional type As String = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDefinitionHeadersAsync : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTypeDefinitionHeadersAsync : Azure.RequestOptions * Nullable&lt;bool&gt; * string -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.GetTypeDefinitionHeadersAsync (options, includeTermTemplate, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="includeTermTemplate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <param name="includeTermTemplate">
            Whether include termtemplatedef when return all typedefs.
            This is always true when search filter type=term_template
            </param>
        <param name="type"> Typedef name as search filter when get typedefs. Allowed values: "enum" | "entity" | "classification" | "relationship" | "struct" | "term_template". </param>
        <summary> List all type definitions returned as a list of minimal information header. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
              guid: string,
              name: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Catalog.PurviewTypes.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Catalog.PurviewTypes.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAtlasTypeDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateAtlasTypeDefinitions (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateAtlasTypeDefinitions(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.UpdateAtlasTypeDefinitions(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAtlasTypeDefinitions (content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateAtlasTypeDefinitions : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.UpdateAtlasTypeDefinitions : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewTypes.UpdateAtlasTypeDefinitions (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAtlasTypeDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAtlasTypeDefinitionsAsync (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAtlasTypeDefinitionsAsync(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewTypes.UpdateAtlasTypeDefinitionsAsync(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAtlasTypeDefinitionsAsync (content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAtlasTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAtlasTypeDefinitionsAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewTypes.UpdateAtlasTypeDefinitionsAsync (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Update all types in bulk, changes detected in the type definitions would be persisted. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classificationDefs: [
                {
                  attributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [
                        {
                          params: Dictionary&lt;string, AnyObject&gt;,
                          type: string
                        }
                      ],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number
                    }
                  ],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: {
                    availableLocales: [string],
                    calendar: number,
                    dateInstance: DateFormat,
                    dateTimeInstance: DateFormat,
                    instance: DateFormat,
                    lenient: boolean,
                    numberFormat: {
                      availableLocales: [string],
                      currency: string,
                      currencyInstance: NumberFormat,
                      groupingUsed: boolean,
                      instance: NumberFormat,
                      integerInstance: NumberFormat,
                      maximumFractionDigits: number,
                      maximumIntegerDigits: number,
                      minimumFractionDigits: number,
                      minimumIntegerDigits: number,
                      numberInstance: NumberFormat,
                      parseIntegerOnly: boolean,
                      percentInstance: NumberFormat,
                      roundingMode: "UP" | "DOWN" | "CEILING" | "FLOOR" | "HALF_UP" | "HALF_DOWN" | "HALF_EVEN" | "UNNECESSARY"
                    },
                    timeInstance: DateFormat,
                    timeZone: {
                      dstSavings: number,
                      id: string,
                      availableIds: [string],
                      default: TimeZone,
                      displayName: string,
                      rawOffset: number
                    }
                  },
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  entityTypes: [string],
                  subTypes: [string],
                  superTypes: [string]
                }
              ],
              entityDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  subTypes: [string],
                  superTypes: [string],
                  relationshipAttributeDefs: [
                    {
                      cardinality: "SINGLE" | "LIST" | "SET",
                      constraints: [AtlasConstraintDef],
                      defaultValue: string,
                      description: string,
                      includeInNotification: boolean,
                      isIndexable: boolean,
                      isOptional: boolean,
                      isUnique: boolean,
                      name: string,
                      options: Dictionary&lt;string, string&gt;,
                      typeName: string,
                      valuesMaxCount: number,
                      valuesMinCount: number,
                      isLegacyAttribute: boolean,
                      relationshipTypeName: string
                    }
                  ]
                }
              ],
              enumDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  defaultValue: string,
                  elementDefs: [
                    {
                      description: string,
                      ordinal: number,
                      value: string
                    }
                  ]
                }
              ],
              relationshipDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  endDef1: {
                    cardinality: "SINGLE" | "LIST" | "SET",
                    description: string,
                    isContainer: boolean,
                    isLegacyAttribute: boolean,
                    name: string,
                    type: string
                  },
                  endDef2: AtlasRelationshipEndDef,
                  relationshipCategory: "ASSOCIATION" | "AGGREGATION" | "COMPOSITION",
                  relationshipLabel: string
                }
              ],
              structDefs: [
                {
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string,
                  attributeDefs: [AtlasAttributeDef]
                }
              ],
              termTemplateDefs: [
                {
                  attributeDefs: [AtlasAttributeDef],
                  category: "PRIMITIVE" | "OBJECT_ID_TYPE" | "ENUM" | "STRUCT" | "CLASSIFICATION" | "ENTITY" | "ARRAY" | "MAP" | "RELATIONSHIP" | "TERM_TEMPLATE",
                  createTime: number,
                  createdBy: string,
                  dateFormatter: DateFormat,
                  description: string,
                  guid: string,
                  name: string,
                  options: Dictionary&lt;string, string&gt;,
                  serviceType: string,
                  typeVersion: string,
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  lastModifiedTS: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
