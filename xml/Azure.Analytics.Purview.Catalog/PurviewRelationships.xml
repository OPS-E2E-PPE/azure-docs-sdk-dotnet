<Type Name="PurviewRelationships" FullName="Azure.Analytics.Purview.Catalog.PurviewRelationships">
  <TypeSignature Language="C#" Value="public class PurviewRelationships" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewRelationships extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Catalog.PurviewRelationships" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewRelationships" />
  <TypeSignature Language="F#" Value="type PurviewRelationships = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewRelationships service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewRelationships for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Create (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Create(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.Create(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.Create : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewRelationships.Create (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Create a new relationship between entities. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAsync (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAsync(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.CreateAsync(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewRelationships.CreateAsync (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Create a new relationship between entities. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (string guid, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.Delete(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (guid As String, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.Delete : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewRelationships.Delete (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="options"> The request options. </param>
        <summary> Delete a relationship between entities by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (string guid, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(string guid, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.DeleteAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (guid As String, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewRelationships.DeleteAsync (guid, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="options"> The request options. </param>
        <summary> Delete a relationship between entities by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Get (string guid, Azure.RequestOptions options, bool? extendedInfo = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Get(string guid, class Azure.RequestOptions options, valuetype System.Nullable`1&lt;bool&gt; extendedInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.Get(System.String,Azure.RequestOptions,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (guid As String, options As RequestOptions, Optional extendedInfo As Nullable(Of Boolean) = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Get : string * Azure.RequestOptions * Nullable&lt;bool&gt; -&gt; Azure.Response&#xA;override this.Get : string * Azure.RequestOptions * Nullable&lt;bool&gt; -&gt; Azure.Response" Usage="purviewRelationships.Get (guid, options, extendedInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="extendedInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="options"> The request options. </param>
        <param name="extendedInfo"> Limits whether includes extended information. </param>
        <summary> Get relationship information between entities by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntityHeader&gt;,
              relationship: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                createTime: number,
                createdBy: string,
                end1: {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
                },
                end2: AtlasObjectId,
                guid: string,
                homeId: string,
                label: string,
                provenanceType: number,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAsync (string guid, Azure.RequestOptions options, bool? extendedInfo = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAsync(string guid, class Azure.RequestOptions options, valuetype System.Nullable`1&lt;bool&gt; extendedInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.GetAsync(System.String,Azure.RequestOptions,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (guid As String, options As RequestOptions, Optional extendedInfo As Nullable(Of Boolean) = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * Azure.RequestOptions * Nullable&lt;bool&gt; -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAsync : string * Azure.RequestOptions * Nullable&lt;bool&gt; -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewRelationships.GetAsync (guid, options, extendedInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
        <Parameter Name="extendedInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the relationship. </param>
        <param name="options"> The request options. </param>
        <param name="extendedInfo"> Limits whether includes extended information. </param>
        <summary> Get relationship information between entities by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntityHeader&gt;,
              relationship: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                createTime: number,
                createdBy: string,
                end1: {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
                },
                end2: AtlasObjectId,
                guid: string,
                homeId: string,
                label: string,
                provenanceType: number,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Catalog.PurviewRelationships.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Catalog.PurviewRelationships.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Update (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Update(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.Update(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.Update : Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewRelationships.Update (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Update an existing relationship between entities. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAsync (Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAsync(class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewRelationships.UpdateAsync(Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAsync : Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewRelationships.UpdateAsync (content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Update an existing relationship between entities. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              createTime: number,
              createdBy: string,
              end1: {
                guid: string,
                typeName: string,
                uniqueAttributes: Dictionary&lt;string, AnyObject&gt;
              },
              end2: AtlasObjectId,
              guid: string,
              homeId: string,
              label: string,
              provenanceType: number,
              status: "ACTIVE" | "DELETED",
              updateTime: number,
              updatedBy: string,
              version: number
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
