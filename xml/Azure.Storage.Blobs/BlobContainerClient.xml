<Type Name="BlobContainerClient" FullName="Azure.Storage.Blobs.BlobContainerClient">
  <TypeSignature Language="C#" Value="public class BlobContainerClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobContainerClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.BlobContainerClient" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobContainerClient" />
  <TypeSignature Language="F#" Value="type BlobContainerClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> allows you to manipulate Azure
            Storage containers and their blobs.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BlobContainerClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (string connectionString, string containerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : string * string -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (connectionString, containerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container in the storage account to reference.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (string connectionString, string containerName, Azure.Storage.Blobs.BlobClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string containerName, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.String,System.String,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, containerName As String, options As BlobClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : string * string * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (connectionString, containerName, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="containerName">
             The name of the container in the storage account to reference.
             </param>
        <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (Uri containerUri, Azure.Core.TokenCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri containerUri, class Azure.Core.TokenCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (containerUri As Uri, credential As TokenCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : Uri * Azure.Core.TokenCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (containerUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="containerUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="containerUri">
            A <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> referencing the container that includes the
            name of the account and the name of the container.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (Uri containerUri, Azure.Storage.StorageSharedKeyCredential credential, Azure.Storage.Blobs.BlobClientOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri containerUri, class Azure.Storage.StorageSharedKeyCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (containerUri As Uri, credential As StorageSharedKeyCredential, Optional options As BlobClientOptions = null)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : Uri * Azure.Storage.StorageSharedKeyCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (containerUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="containerUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="containerUri">
            A <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> referencing the container that includes the
            name of the account and the name of the container.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt; Create (Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; publicAccessType = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerInfo&gt; Create(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.PublicAccessType&gt; publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.Create(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Create : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&#xA;override this.Create : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;" Usage="blobContainerClient.Create (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Container" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  If this parameter is null, container data is private to
             the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.Create(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new container
             under the specified account. If the container with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt; CreateAsync (Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; publicAccessType = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt; CreateAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.PublicAccessType&gt; publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateAsync(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;&#xA;override this.CreateAsync : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;" Usage="blobContainerClient.CreateAsync (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Container" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  If this parameter is null, container data is private to
             the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateAsync(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new container
             under the specified account. If the container with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.Delete(System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Delete : Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Delete : Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobContainerClient.Delete (accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.ContainerAccessConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.Delete(System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" /> operation marks the specified
             container for deletion. The container and any blobs contained
             within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteAsync(System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobContainerClient.DeleteAsync (accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.ContainerAccessConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteAsync(System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" /> operation marks the specified
             container for deletion. The container and any blobs contained
             within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteBlob (string blobName, Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteBlob(string blobName, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlob(System.String,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlob : string * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteBlob : string * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobContainerClient.DeleteBlob (blobName, deleteOptions, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Azure.Core.ForwardsClientCalls</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="deleteOptions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to delete.</param>
        <param name="deleteOptions">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlob(System.String,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation marks the specified
             blob or snapshot for deletion. The blob is later deleted during
             garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.Include" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteBlobAsync (string blobName, Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions = null, Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteBlobAsync(string blobName, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; deleteOptions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.BlobAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteBlobAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt; * Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobContainerClient.DeleteBlobAsync (blobName, deleteOptions, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Azure.Core.ForwardsClientCalls</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="deleteOptions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.DeleteSnapshotsOption&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.BlobAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to delete.</param>
        <param name="deleteOptions">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobAccessConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.DeleteSnapshotsOption},System.Nullable{Azure.Storage.Blobs.Models.BlobAccessConditions},System.Threading.CancellationToken)" /> operation marks the specified
             blob or snapshot for deletion. The blob is later deleted during
             garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.Include" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt; GetAccessPolicy (Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt; GetAccessPolicy(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicy(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessPolicy : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;&#xA;override this.GetAccessPolicy : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;" Usage="blobContainerClient.GetAccessPolicy (leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on getting the container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicy(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation gets the
             permissions for this container. The permissions indicate whether
             container data may be accessed publicly.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the container's access policy.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;&gt; GetAccessPolicyAsync (Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;&gt; GetAccessPolicyAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicyAsync(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessPolicyAsync : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;&gt;&#xA;override this.GetAccessPolicyAsync : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;&gt;" Usage="blobContainerClient.GetAccessPolicyAsync (leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerAccessPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on getting the container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicyAsync(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation gets the
             permissions for this container. The permissions indicate whether
             container data may be accessed publicly.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the container's access policy.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Blobs.BlobClient GetBlobClient (string blobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Blobs.BlobClient GetBlobClient(string blobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobClient (blobName As String) As BlobClient" />
      <MemberSignature Language="F#" Value="abstract member GetBlobClient : string -&gt; Azure.Storage.Blobs.BlobClient&#xA;override this.GetBlobClient : string -&gt; Azure.Storage.Blobs.BlobClient" Usage="blobContainerClient.GetBlobClient blobName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.BlobClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob.</param>
        <summary>
            Create a new <see cref="T:Azure.Storage.Blobs.BlobClient" /> object by appending
            <paramref name="blobName" /> to the end of <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" />.  The
            new <see cref="T:Azure.Storage.Blobs.BlobClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.BlobClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobs">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobItem&gt;&gt; GetBlobs (Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobItem&gt;&gt; GetBlobs(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobs(System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobs : Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobItem&gt;&gt;&#xA;override this.GetBlobs : Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobItem&gt;&gt;" Usage="blobContainerClient.GetBlobs (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">
             Specifies options for listing, filtering, and shaping the
             blobs.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobs(System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" /> operation returns an async sequence
             of blobs in this container.  Enumerating the blobs may make
             multiple requests to the service while fetching all the values.
             Blobs are ordered lexicographically by name.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Azure.Response`1" />
             describing the blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobItem&gt; GetBlobsAsync (Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncCollection`1&lt;class Azure.Storage.Blobs.Models.BlobItem&gt; GetBlobsAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsAsync(System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsAsync : Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobItem&gt;&#xA;override this.GetBlobsAsync : Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobItem&gt;" Usage="blobContainerClient.GetBlobsAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">
             Specifies options for listing, filtering, and shaping the
             blobs.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsAsync(System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" /> operation returns an async
             sequence of blobs in this container.  Enumerating the blobs may
             make multiple requests to the service while fetching all the
             values.  Blobs are ordered lexicographically by name.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:Azure.AsyncCollection`1" /> describing the
             blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsByHierarchy">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&gt; GetBlobsByHierarchy (string delimiter = null, Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&gt; GetBlobsByHierarchy(string delimiter, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchy(System.String,System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsByHierarchy : string * Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&gt;&#xA;override this.GetBlobsByHierarchy : string * Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&gt;" Usage="blobContainerClient.GetBlobsByHierarchy (delimiter, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiter" Type="System.String" />
        <Parameter Name="options" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delimiter">
             A <paramref name="delimiter" /> that can be used to traverse a
             virtual hierarchy of blobs as though it were a file system.  The
             delimiter may be a single character or a string.
             <see cref="P:Azure.Storage.Blobs.Models.BlobHierarchyItem.Prefix" /> will be returned
             in place of all blobs whose names begin with the same substring up
             to the appearance of the delimiter character.  The value of a
             prefix is substring+delimiter, where substring is the common
             substring that begins one or more blob  names, and delimiter is the
             value of <paramref name="delimiter" />. You can use the value of
             prefix to make a subsequent call to list the blobs that begin with
             this prefix, by specifying the value of the prefix for the
             <see cref="P:Azure.Storage.Blobs.Models.GetBlobsOptions.Prefix" />.
            
             Note that each BlobPrefix element returned counts toward the
             maximum result, just as each Blob element does.
             </param>
        <param name="options">
             Specifies options for listing, filtering, and shaping the
             blobs.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchy(System.String,System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" /> operation returns
             an async collection of blobs in this container.  Enumerating the
             blobs may make multiple requests to the service while fetching all
             the values.  Blobs are ordered lexicographically by name.   A
             <paramref name="delimiter" /> can be used to traverse a virtual
             hierarchy of blobs as though it were a file system.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Azure.Response`1" />
             describing the blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsByHierarchyAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt; GetBlobsByHierarchyAsync (string delimiter = null, Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncCollection`1&lt;class Azure.Storage.Blobs.Models.BlobHierarchyItem&gt; GetBlobsByHierarchyAsync(string delimiter, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.GetBlobsOptions&gt; options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchyAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsByHierarchyAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&#xA;override this.GetBlobsByHierarchyAsync : string * Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;" Usage="blobContainerClient.GetBlobsByHierarchyAsync (delimiter, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncCollection&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiter" Type="System.String" />
        <Parameter Name="options" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.GetBlobsOptions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delimiter">
             A <paramref name="delimiter" /> that can be used to traverse a
             virtual hierarchy of blobs as though it were a file system.  The
             delimiter may be a single character or a string.
             <see cref="P:Azure.Storage.Blobs.Models.BlobHierarchyItem.Prefix" /> will be returned
             in place of all blobs whose names begin with the same substring up
             to the appearance of the delimiter character.  The value of a
             prefix is substring+delimiter, where substring is the common
             substring that begins one or more blob  names, and delimiter is the
             value of <paramref name="delimiter" />. You can use the value of
             prefix to make a subsequent call to list the blobs that begin with
             this prefix, by specifying the value of the prefix for the
             <see cref="P:Azure.Storage.Blobs.Models.GetBlobsOptions.Prefix" />.
            
             Note that each BlobPrefix element returned counts toward the
             maximum result, just as each Blob element does.
             </param>
        <param name="options">
             Specifies options for listing, filtering, and shaping the
             blobs.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchyAsync(System.String,System.Nullable{Azure.Storage.Blobs.Models.GetBlobsOptions},System.Threading.CancellationToken)" /> operation returns
             an async collection of blobs in this container.  Enumerating the
             blobs may make multiple requests to the service while fetching all
             the values.  Blobs are ordered lexicographically by name.   A
             <paramref name="delimiter" /> can be used to traverse a virtual
             hierarchy of blobs as though it were a file system.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:Azure.AsyncCollection`1" /> describing the
             blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt; GetProperties (Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerItem&gt; GetProperties(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetProperties(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt;&#xA;override this.GetProperties : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt;" Usage="blobContainerClient.GetProperties (leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on getting the container's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetProperties(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             container. The data returned does not include the container's
             list of blobs.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             container and its properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt;&gt; GetPropertiesAsync (Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerItem&gt;&gt; GetPropertiesAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; leaseAccessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetPropertiesAsync(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPropertiesAsync : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt;&gt;&#xA;override this.GetPropertiesAsync : Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt;&gt;" Usage="blobContainerClient.GetPropertiesAsync (leaseAccessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leaseAccessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.LeaseAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="leaseAccessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.LeaseAccessConditions" /> to add
             conditions on getting the container's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetPropertiesAsync(System.Nullable{Azure.Storage.Blobs.Models.LeaseAccessConditions},System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             container. The data returned does not include the container's
             list of blobs.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             container and its properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogsContainerName">
      <MemberSignature Language="C#" Value="public const string LogsContainerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string LogsContainerName" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.BlobContainerClient.LogsContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Const LogsContainerName As String " />
      <MemberSignature Language="F#" Value="val mutable LogsContainerName : string" Usage="Azure.Storage.Blobs.BlobContainerClient.LogsContainerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Azure Storage name used to identify a storage account's logs container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="protected internal virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.BlobContainerClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Storage.Blobs.BlobContainerClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Azure.Core.Pipeline.HttpPipeline" /> transport pipeline used to send
            every request.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootContainerName">
      <MemberSignature Language="C#" Value="public const string RootContainerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string RootContainerName" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.BlobContainerClient.RootContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Const RootContainerName As String " />
      <MemberSignature Language="F#" Value="val mutable RootContainerName : string" Usage="Azure.Storage.Blobs.BlobContainerClient.RootContainerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Azure Storage name used to identify a storage account's root container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt; SetAccessPolicy (Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; accessType = null, System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt; permissions = null, Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerInfo&gt; SetAccessPolicy(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.PublicAccessType&gt; accessType, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Storage.Blobs.Models.SignedIdentifier&gt; permissions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicy(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.SignedIdentifier},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetAccessPolicy : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * seq&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&#xA;override this.SetAccessPolicy : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * seq&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;" Usage="blobContainerClient.SetAccessPolicy (accessType, permissions, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessType" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt;" />
        <Parameter Name="permissions" Type="System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Container" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  If this parameter is null, container data is private to
             the account owner.
             </param>
        <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over container permissions.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.ContainerAccessConditions" /> to add
             conditions on setting this container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicy(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.SignedIdentifier},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified container. The permissions indicate
             whether container data may be accessed publicly.
            
             For more information, see <see href=" https://docs.microsoft.com/rest/api/storageservices/set-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt; SetAccessPolicyAsync (Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; accessType = null, System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt; permissions = null, Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt; SetAccessPolicyAsync(valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.PublicAccessType&gt; accessType, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Storage.Blobs.Models.SignedIdentifier&gt; permissions, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicyAsync(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.SignedIdentifier},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetAccessPolicyAsync : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * seq&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;&#xA;override this.SetAccessPolicyAsync : Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt; * seq&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;" Usage="blobContainerClient.SetAccessPolicyAsync (accessType, permissions, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessType" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.PublicAccessType&gt;" />
        <Parameter Name="permissions" Type="System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.SignedIdentifier&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Container" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  If this parameter is null, container data is private to
             the account owner.
             </param>
        <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over container permissions.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.ContainerAccessConditions" /> to add
             conditions on setting this container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicyAsync(System.Nullable{Azure.Storage.Blobs.Models.PublicAccessType},System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.SignedIdentifier},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified container. The permissions indicate
             whether container data may be accessed publicly.
            
             For more information, see <see href=" https://docs.microsoft.com/rest/api/storageservices/set-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated container.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt; SetMetadata (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerInfo&gt; SetMetadata(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&#xA;override this.SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;" Usage="blobContainerClient.SetMetadata (metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this container.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.ContainerAccessConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified container.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt; SetMetadataAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt; SetMetadataAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; accessConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;&#xA;override this.SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;" Usage="blobContainerClient.SetMetadataAsync (metadata, accessConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.ContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessConditions" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.ContainerAccessConditions&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this container.
             </param>
        <param name="accessConditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.ContainerAccessConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.Storage.Blobs.Models.ContainerAccessConditions},System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified container.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt; UploadBlob (string blobName, System.IO.Stream content, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt; UploadBlob(string blobName, class System.IO.Stream content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlob(System.String,System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UploadBlob : string * System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&#xA;override this.UploadBlob : string * System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;" Usage="blobContainerClient.UploadBlob (blobName, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Azure.Core.ForwardsClientCalls</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to upload.</param>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlob(System.String,System.IO.Stream,System.Threading.CancellationToken)" /> operation creates a new block
             blob or updates the content of an existing block blob in this
             container.  Updating an existing block blob overwrites any existing
             metadata on the blob.
            
             For partial block blob updates and other advanced features, please
             see <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />.  To create or modify page or
             append blobs, please see <see cref="T:Azure.Storage.Blobs.Specialized.PageBlobClient" /> or
             <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; UploadBlobAsync (string blobName, System.IO.Stream content, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; UploadBlobAsync(string blobName, class System.IO.Stream content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlobAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UploadBlobAsync : string * System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;&#xA;override this.UploadBlobAsync : string * System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;" Usage="blobContainerClient.UploadBlobAsync (blobName, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Azure.Core.ForwardsClientCalls</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to upload.</param>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlobAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)" /> operation creates a new block
             blob or updates the content of an existing block blob in this
             container.  Updating an existing block blob overwrites any existing
             metadata on the blob.
            
             For partial block blob updates and other advanced features, please
             see <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />.  To create or modify page or
             append blobs, please see <see cref="T:Azure.Storage.Blobs.Specialized.PageBlobClient" /> or
             <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.Storage.StorageRequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public virtual Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.BlobContainerClient.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Uri As Uri" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="Azure.Storage.Blobs.BlobContainerClient.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the container's primary <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
