<Type Name="ManagementGroupContainer" FullName="Azure.ResourceManager.Management.ManagementGroupContainer">
  <TypeSignature Language="C#" Value="public class ManagementGroupContainer : Azure.ResourceManager.Core.ArmContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManagementGroupContainer extends Azure.ResourceManager.Core.ArmContainer" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Management.ManagementGroupContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class ManagementGroupContainer&#xA;Inherits ArmContainer" />
  <TypeSignature Language="F#" Value="type ManagementGroupContainer = class&#xA;    inherit ArmContainer" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.Core.ArmContainer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A class representing collection of ManagementGroupContainer and their operations over a ManagementGroup.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ManagementGroupContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.ResourceManager.Management.ManagementGroupContainer" /> class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckIfExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; CheckIfExists (string groupId, Azure.ResourceManager.Management.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; CheckIfExists(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.CheckIfExists(System.String,System.Nullable{Azure.ResourceManager.Management.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckIfExists (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CheckIfExists : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.CheckIfExists : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="managementGroupContainer.CheckIfExists (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the management group exists.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckIfExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; CheckIfExistsAsync (string groupId, Azure.ResourceManager.Management.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; CheckIfExistsAsync(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.CheckIfExistsAsync(System.String,System.Nullable{Azure.ResourceManager.Management.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckIfExistsAsync (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member CheckIfExistsAsync : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.CheckIfExistsAsync : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="managementGroupContainer.CheckIfExistsAsync (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the management group exists.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckNameAvailability">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt; CheckNameAvailability (Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions checkNameAvailabilityOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt; CheckNameAvailability(class Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions checkNameAvailabilityOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.CheckNameAvailability(Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckNameAvailability (checkNameAvailabilityOptions As CheckNameAvailabilityOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CheckNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckNameAvailability : Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;&#xA;override this.CheckNameAvailability : Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;" Usage="managementGroupContainer.CheckNameAvailability (checkNameAvailabilityOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkNameAvailabilityOptions" Type="Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="checkNameAvailabilityOptions"> Management group name availability check parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Checks if the specified management group name is valid and unique. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;&gt; CheckNameAvailabilityAsync (Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions checkNameAvailabilityOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;&gt; CheckNameAvailabilityAsync(class Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions checkNameAvailabilityOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.CheckNameAvailabilityAsync(Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckNameAvailabilityAsync (checkNameAvailabilityOptions As CheckNameAvailabilityOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CheckNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="abstract member CheckNameAvailabilityAsync : Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;&gt;&#xA;override this.CheckNameAvailabilityAsync : Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;&gt;" Usage="managementGroupContainer.CheckNameAvailabilityAsync (checkNameAvailabilityOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.Models.CheckNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkNameAvailabilityOptions" Type="Azure.ResourceManager.Management.Models.CheckNameAvailabilityOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="checkNameAvailabilityOptions"> Management group name availability check parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Checks if the specified management group name is valid and unique. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation CreateOrUpdate (string groupId, Azure.ResourceManager.Management.Models.CreateManagementGroupOptions createManagementGroupOptions, string cacheControl = default, bool waitForCompletion = true, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation CreateOrUpdate(string groupId, class Azure.ResourceManager.Management.Models.CreateManagementGroupOptions createManagementGroupOptions, string cacheControl, bool waitForCompletion, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.CreateOrUpdate(System.String,Azure.ResourceManager.Management.Models.CreateManagementGroupOptions,System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (groupId As String, createManagementGroupOptions As CreateManagementGroupOptions, Optional cacheControl As String = Nothing, Optional waitForCompletion As Boolean = true, Optional cancellationToken As CancellationToken = Nothing) As ManagementGroupCreateOrUpdateOperation" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : string * Azure.ResourceManager.Management.Models.CreateManagementGroupOptions * string * bool * System.Threading.CancellationToken -&gt; Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation&#xA;override this.CreateOrUpdate : string * Azure.ResourceManager.Management.Models.CreateManagementGroupOptions * string * bool * System.Threading.CancellationToken -&gt; Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation" Usage="managementGroupContainer.CreateOrUpdate (groupId, createManagementGroupOptions, cacheControl, waitForCompletion, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="createManagementGroupOptions" Type="Azure.ResourceManager.Management.Models.CreateManagementGroupOptions" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="createManagementGroupOptions"> Management group creation parameters. </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> or <paramref name="createManagementGroupOptions" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation&gt; CreateOrUpdateAsync (string groupId, Azure.ResourceManager.Management.Models.CreateManagementGroupOptions createManagementGroupOptions, string cacheControl = default, bool waitForCompletion = true, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation&gt; CreateOrUpdateAsync(string groupId, class Azure.ResourceManager.Management.Models.CreateManagementGroupOptions createManagementGroupOptions, string cacheControl, bool waitForCompletion, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.CreateOrUpdateAsync(System.String,Azure.ResourceManager.Management.Models.CreateManagementGroupOptions,System.String,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (groupId As String, createManagementGroupOptions As CreateManagementGroupOptions, Optional cacheControl As String = Nothing, Optional waitForCompletion As Boolean = true, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ManagementGroupCreateOrUpdateOperation)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : string * Azure.ResourceManager.Management.Models.CreateManagementGroupOptions * string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation&gt;&#xA;override this.CreateOrUpdateAsync : string * Azure.ResourceManager.Management.Models.CreateManagementGroupOptions * string * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation&gt;" Usage="managementGroupContainer.CreateOrUpdateAsync (groupId, createManagementGroupOptions, cacheControl, waitForCompletion, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.Management.Models.ManagementGroupCreateOrUpdateOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="createManagementGroupOptions" Type="Azure.ResourceManager.Management.Models.CreateManagementGroupOptions" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="createManagementGroupOptions"> Management group creation parameters. </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> or <paramref name="createManagementGroupOptions" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt; Get (string groupId, Azure.ResourceManager.Management.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Management.ManagementGroup&gt; Get(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.Get(System.String,System.Nullable{Azure.ResourceManager.Management.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ManagementGroup)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&#xA;override this.Get : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;" Usage="managementGroupContainer.Get (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the details of the management group.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt; GetAll (string cacheControl = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Management.ManagementGroup&gt; GetAll(string cacheControl, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.GetAll(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAll (Optional cacheControl As String = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ManagementGroup)" />
      <MemberSignature Language="F#" Value="abstract member GetAll : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&#xA;override this.GetAll : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt;" Usage="managementGroupContainer.GetAll (cacheControl, skiptoken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result.
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            .
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List management groups for the authenticated user.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt; GetAllAsync (string cacheControl = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Management.ManagementGroup&gt; GetAllAsync(string cacheControl, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.GetAllAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllAsync (Optional cacheControl As String = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ManagementGroup)" />
      <MemberSignature Language="F#" Value="abstract member GetAllAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&#xA;override this.GetAllAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt;" Usage="managementGroupContainer.GetAllAsync (cacheControl, skiptoken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Management.ManagementGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result.
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            .
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List management groups for the authenticated user.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt; GetAsync (string groupId, Azure.ResourceManager.Management.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Management.ManagementGroup&gt;&gt; GetAsync(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.GetAsync(System.String,System.Nullable{Azure.ResourceManager.Management.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ManagementGroup))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt;&#xA;override this.GetAsync : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt;" Usage="managementGroupContainer.GetAsync (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the details of the management group.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIfExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt; GetIfExists (string groupId, Azure.ResourceManager.Management.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Management.ManagementGroup&gt; GetIfExists(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.GetIfExists(System.String,System.Nullable{Azure.ResourceManager.Management.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIfExists (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ManagementGroup)" />
      <MemberSignature Language="F#" Value="abstract member GetIfExists : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&#xA;override this.GetIfExists : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;" Usage="managementGroupContainer.GetIfExists (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Tries to get the details of the management group.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIfExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt; GetIfExistsAsync (string groupId, Azure.ResourceManager.Management.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Management.ManagementGroup&gt;&gt; GetIfExistsAsync(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Management.ManagementGroupContainer.GetIfExistsAsync(System.String,System.Nullable{Azure.ResourceManager.Management.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIfExistsAsync (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ManagementGroup))" />
      <MemberSignature Language="F#" Value="abstract member GetIfExistsAsync : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt;&#xA;override this.GetIfExistsAsync : string * Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt;" Usage="managementGroupContainer.GetIfExistsAsync (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Management.ManagementGroup&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.Management.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Tries to get the details of the management group.
            .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="protected Azure.ResourceManager.Resources.Tenant Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.Resources.Tenant Parent" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Management.ManagementGroupContainer.Parent" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Parent As Tenant" />
      <MemberSignature Language="F#" Value="member this.Parent : Azure.ResourceManager.Resources.Tenant" Usage="Azure.ResourceManager.Management.ManagementGroupContainer.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Resources.Tenant</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the parent resource of this resource.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidResourceType">
      <MemberSignature Language="C#" Value="protected override Azure.ResourceManager.ResourceType ValidResourceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.ResourceType ValidResourceType" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Management.ManagementGroupContainer.ValidResourceType" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ValidResourceType As ResourceType" />
      <MemberSignature Language="F#" Value="member this.ValidResourceType : Azure.ResourceManager.ResourceType" Usage="Azure.ResourceManager.Management.ManagementGroupContainer.ValidResourceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the valid Azure resource type for the current operations.
            </summary>
        <value> A valid Azure resource type. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
