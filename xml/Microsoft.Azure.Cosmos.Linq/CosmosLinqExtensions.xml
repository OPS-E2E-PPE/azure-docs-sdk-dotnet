<Type Name="CosmosLinqExtensions" FullName="Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions">
  <TypeSignature Language="C#" Value="public static class CosmosLinqExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CosmosLinqExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CosmosLinqExtensions" />
  <TypeSignature Language="F#" Value="type CosmosLinqExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class provides extension methods for cosmos LINQ code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (this object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsDefined (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsDefined : obj -&gt; bool" Usage="Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsDefined obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" RefType="this" />
      </Parameters>
      <Docs>
        <param name="obj"></param>
        <summary>
            Determines if a certain property is defined or not.
            This method is to be used in LINQ expressions only and will be evaluated on server.
            There's no implementation provided in the client library.
            </summary>
        <returns>Returns true if this property is defined otherwise returns false.</returns>
        <remarks>To be added.</remarks>
        <example>
          <code><![CDATA[
            var isDefinedQuery = documents.Where(document => document.Name.IsDefined());
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static bool IsNull (this object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNull(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNull (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNull : obj -&gt; bool" Usage="Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsNull obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" RefType="this" />
      </Parameters>
      <Docs>
        <param name="obj"></param>
        <summary>
            Determines if a certain property is null or not.
            This method is to be used in LINQ expressions only and will be evaluated on server.
            There's no implementation provided in the client library.
            </summary>
        <returns>Returns true if this property is null otherwise returns false.</returns>
        <remarks>To be added.</remarks>
        <example>
          <code><![CDATA[
            var isNullQuery = documents.Where(document => document.Name.IsNull());
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public static bool IsPrimitive (this object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPrimitive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsPrimitive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsPrimitive (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsPrimitive : obj -&gt; bool" Usage="Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.IsPrimitive obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" RefType="this" />
      </Parameters>
      <Docs>
        <param name="obj"></param>
        <summary>
            Determines if a certain property is of primitive JSON type.
            This method is to be used in LINQ expressions only and will be evaluated on server.
            There's no implementation provided in the client library.
            </summary>
        <returns>Returns true if this property is null otherwise returns false.</returns>
        <remarks>
            Primitive JSON types (Double, String, Boolean and Null)
            </remarks>
        <example>
          <code><![CDATA[
            var isPrimitiveQuery = documents.Where(document => document.Name.IsPrimitive());
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ToFeedIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt; ToFeedIterator&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Cosmos.FeedIterator`1&lt;!!T&gt; ToFeedIterator&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToFeedIterator``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFeedIterator(Of T) (query As IQueryable(Of T)) As FeedIterator(Of T)" />
      <MemberSignature Language="F#" Value="static member ToFeedIterator : System.Linq.IQueryable&lt;'T&gt; -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;'T&gt;" Usage="Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToFeedIterator query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="query">the IQueryable{T} to be converted.</param>
        <summary>
             This extension method gets the FeedIterator from LINQ IQueryable to execute query asynchronously.
             This will create the fresh new FeedIterator when called.
             </summary>
        <returns>An iterator to go through the items.</returns>
        <remarks>To be added.</remarks>
        <example>
             This example shows how to get FeedIterator from LINQ.
            
             <code language="c#"><![CDATA[
             IOrderedQueryable<ToDoActivity> linqQueryable = this.Container.GetItemLinqQueryable<ToDoActivity>();
             FeedIterator<ToDoActivity> setIterator = linqQueryable.Where(item => (item.taskNum < 100)).ToFeedIterator()
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ToQueryDefinition&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Cosmos.QueryDefinition ToQueryDefinition&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Cosmos.QueryDefinition ToQueryDefinition&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToQueryDefinition``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToQueryDefinition(Of T) (query As IQueryable(Of T)) As QueryDefinition" />
      <MemberSignature Language="F#" Value="static member ToQueryDefinition : System.Linq.IQueryable&lt;'T&gt; -&gt; Microsoft.Azure.Cosmos.QueryDefinition" Usage="Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToQueryDefinition query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.QueryDefinition</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="query">the IQueryable{T} to be converted.</param>
        <summary>
             This method generate query definition from LINQ query.
             </summary>
        <returns>The queryDefinition which can be used in query execution.</returns>
        <remarks>To be added.</remarks>
        <example>
             This example shows how to generate query definition from LINQ.
            
             <code language="c#"><![CDATA[
             IQueryable<T> queryable = container.GetItemsQueryIterator<T>(allowSynchronousQueryExecution = true)
                                  .Where(t => b.id.contains("test"));
             QueryDefinition queryDefinition = queryable.ToQueryDefinition();
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ToStreamIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Cosmos.FeedIterator ToStreamIterator&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Cosmos.FeedIterator ToStreamIterator&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToStreamIterator``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToStreamIterator(Of T) (query As IQueryable(Of T)) As FeedIterator" />
      <MemberSignature Language="F#" Value="static member ToStreamIterator : System.Linq.IQueryable&lt;'T&gt; -&gt; Microsoft.Azure.Cosmos.FeedIterator" Usage="Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions.ToStreamIterator query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="query">the IQueryable{T} to be converted.</param>
        <summary>
             This extension method gets the FeedIterator from LINQ IQueryable to execute query asynchronously.
             This will create the fresh new FeedIterator when called.
             </summary>
        <returns>An iterator to go through the items.</returns>
        <remarks>To be added.</remarks>
        <example>
             This example shows how to get FeedIterator from LINQ.
            
             <code language="c#"><![CDATA[
             IOrderedQueryable<ToDoActivity> linqQueryable = this.Container.GetItemLinqQueryable<ToDoActivity>();
             FeedIterator setIterator = linqQueryable.Where(item => (item.taskNum < 100)).ToFeedIterator()
             ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
