<Type Name="IReliableDictionary3&lt;TKey,TValue&gt;" FullName="Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public interface IReliableDictionary3&lt;TKey,TValue&gt; : Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, Microsoft.ServiceFabric.Data.Collections.IReliableDictionary&lt;TKey,TValue&gt;, Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2&lt;TKey,TValue&gt; where TKey : IComparable&lt;TKey&gt;, IEquatable&lt;TKey&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReliableDictionary3`2&lt;(class System.IComparable`1&lt;!TKey&gt;, class System.IEquatable`1&lt;!TKey&gt;) TKey, TValue&gt; implements class Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2&lt;!TKey, !TValue&gt;, class Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2&lt;!TKey, !TValue&gt;, class Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReliableDictionary3(Of TKey, TValue)&#xA;Implements IReliableCollection(Of KeyValuePair(Of TKey, TValue)), IReliableDictionary(Of TKey, TValue), IReliableDictionary2(Of TKey, TValue)" />
  <TypeSignature Language="F#" Value="type IReliableDictionary3&lt;'Key, 'Value (requires 'Key :&gt; IComparable&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt;)&gt; = interface&#xA;    interface IReliableDictionary2&lt;'Key, 'Value (requires 'Key :&gt; IComparable&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt;)&gt;&#xA;    interface IReliableDictionary&lt;'Key, 'Value (requires 'Key :&gt; IComparable&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt;)&gt;&#xA;    interface IReliableCollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IReliableState" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <InterfaceName>System.IComparable&lt;TKey&gt;</InterfaceName>
        <InterfaceName>System.IEquatable&lt;TKey&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.Collections.IReliableDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">The type of the keys in the reliable dictionary.</typeparam>
    <typeparam name="TValue">
             The type of the values in the reliable dictionary.</typeparam>
    <summary>
             (Beta) Not for production use - API is subject to change in the future.
             Represents a reliable collection of key/value pairs that are persisted and replicated.
             </summary>
    <remarks>Keys or values stored in this dictionary MUST NOT be mutated outside the context of an operation on the
             dictionary.  It is highly recommended to make both <typeparamref name="TKey" /> and <typeparamref name="TValue" />
             immutable in order to avoid accidental data corruption.
            
             <para>
             The transaction is the unit of concurrency. Users can have multiple transactions in-flight at any given point of time, but for a given transaction each API must be called one at a time.
             When calling any asynchronous Reliable Collection method that takes an <see cref="T:Microsoft.ServiceFabric.Data.ITransaction" />, you must wait for completion of the returned Task before calling
             another method using the same transaction.
             </para></remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateVersionedEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedEnumerableAsync (txn As ITransaction) As Task(Of IAsyncEnumerable(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedEnumerableAsync txn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <summary>
            (Beta) Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, Func&lt;TKey,bool&gt; filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, class System.Func`2&lt;!TKey, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedEnumerableAsync (txn As ITransaction, filter As Func(Of TKey, Boolean)) As Task(Of IAsyncEnumerable(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction * Func&lt;'Key, bool (requires 'Key :&gt; IComparable&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt;)&gt; -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedEnumerableAsync (txn, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="filter" Type="System.Func&lt;TKey,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <param name="filter">Predicate that filters the versioned key-value pairs to include in the enumeration based on the key.</param>
        <summary>
            (Beta) Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, TKey firstKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, !TKey firstKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedEnumerableAsync (txn As ITransaction, firstKey As TKey) As Task(Of IAsyncEnumerable(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedEnumerableAsync (txn, firstKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="firstKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <param name="firstKey">The key to start enumerating from in ordered enumeration.</param>
        <summary>
            (Beta) Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, Func&lt;TKey,bool&gt; filter, TKey firstKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, class System.Func`2&lt;!TKey, bool&gt; filter, !TKey firstKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedEnumerableAsync (txn As ITransaction, filter As Func(Of TKey, Boolean), firstKey As TKey) As Task(Of IAsyncEnumerable(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction * Func&lt;'Key, bool (requires 'Key :&gt; IComparable&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt;)&gt; * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedEnumerableAsync (txn, filter, firstKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="filter" Type="System.Func&lt;TKey,System.Boolean&gt;" />
        <Parameter Name="firstKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <param name="filter">Predicate that filters the versioned key-value pairs to include in the enumeration based on the key.</param>
        <param name="firstKey">The key to start enumerating from in ordered enumeration.</param>
        <summary>
            (Beta) Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, TKey firstKey, TKey lastKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, !TKey firstKey, !TKey lastKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedEnumerableAsync (txn As ITransaction, firstKey As TKey, lastKey As TKey) As Task(Of IAsyncEnumerable(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedEnumerableAsync (txn, firstKey, lastKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="firstKey" Type="TKey" />
        <Parameter Name="lastKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <param name="firstKey">The key to start enumerating from in ordered enumeration.</param>
        <param name="lastKey">The key to stop enumerating at in ordered enumeration.</param>
        <summary>
            (Beta) Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, Func&lt;TKey,bool&gt; filter, TKey firstKey, TKey lastKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateVersionedEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, class System.Func`2&lt;!TKey, bool&gt; filter, !TKey firstKey, !TKey lastKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedEnumerableAsync (txn As ITransaction, filter As Func(Of TKey, Boolean), firstKey As TKey, lastKey As TKey) As Task(Of IAsyncEnumerable(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction * Func&lt;'Key, bool (requires 'Key :&gt; IComparable&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt;)&gt; * 'Key * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedEnumerableAsync (txn, filter, firstKey, lastKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="filter" Type="System.Func&lt;TKey,System.Boolean&gt;" />
        <Parameter Name="firstKey" Type="TKey" />
        <Parameter Name="lastKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <param name="filter">Predicate that filters the versioned key-value pairs to include in the enumeration based on the key.</param>
        <param name="firstKey">The key to start enumerating from in ordered enumeration.</param>
        <param name="lastKey">The key to stop enumerating at in ordered enumeration.</param>
        <summary>
            (Beta) Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedKeyEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;TKey&gt;&gt;&gt; CreateVersionedKeyEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKey`1&lt;!TKey&gt;&gt;&gt; CreateVersionedKeyEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedKeyEnumerableAsync (txn As ITransaction) As Task(Of IAsyncEnumerable(Of VersionedKey(Of TKey)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedKeyEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;'Key&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedKeyEnumerableAsync txn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;TKey&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="txn">Transaction to associate this operation with.</param>
        <summary>
            (Beta) Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> to enumerate the versioned keys.
            </summary>
        <returns>An enumerable for the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> versioned keys.</returns>
        <remarks>
            The enumerable returned from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedKeyEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;TKey&gt;&gt;&gt; CreateVersionedKeyEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, TKey firstKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKey`1&lt;!TKey&gt;&gt;&gt; CreateVersionedKeyEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, !TKey firstKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedKeyEnumerableAsync (txn As ITransaction, firstKey As TKey) As Task(Of IAsyncEnumerable(Of VersionedKey(Of TKey)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedKeyEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;'Key&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedKeyEnumerableAsync (txn, firstKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;TKey&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="firstKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="txn">Transaction to associate this operation with.</param>
        <param name="firstKey">The key to start enumerating from in ordered enumeration.</param>
        <summary>
            (Beta) Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> to enumerate the versioned keys.
            </summary>
        <returns>An enumerable for the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> versioned keys.</returns>
        <remarks>
            The enumerable returned from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVersionedKeyEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;TKey&gt;&gt;&gt; CreateVersionedKeyEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, TKey firstKey, TKey lastKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKey`1&lt;!TKey&gt;&gt;&gt; CreateVersionedKeyEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, !TKey firstKey, !TKey lastKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.CreateVersionedKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateVersionedKeyEnumerableAsync (txn As ITransaction, firstKey As TKey, lastKey As TKey) As Task(Of IAsyncEnumerable(Of VersionedKey(Of TKey)))" />
      <MemberSignature Language="F#" Value="abstract member CreateVersionedKeyEnumerableAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;'Key&gt;&gt;&gt;" Usage="iReliableDictionary3.CreateVersionedKeyEnumerableAsync (txn, firstKey, lastKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.VersionedKey&lt;TKey&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="firstKey" Type="TKey" />
        <Parameter Name="lastKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="txn">Transaction to associate this operation with.</param>
        <param name="firstKey">The key to start enumerating from in ordered enumeration.</param>
        <param name="lastKey">The key to stop enumerating at in ordered enumeration.</param>
        <summary>
            (Beta) Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> to enumerate the versioned keys.
            </summary>
        <returns>An enumerable for the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> versioned keys.</returns>
        <remarks>
            The enumerable returned from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2" /> is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetSequenceNumberAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;long&gt;&gt; TryGetSequenceNumberAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;int64&gt;&gt; TryGetSequenceNumberAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryGetSequenceNumberAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSequenceNumberAsync (tx As ITransaction, key As TKey) As Task(Of ConditionalValue(Of Long))" />
      <MemberSignature Language="F#" Value="abstract member TryGetSequenceNumberAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;int64&gt;&gt;" Usage="iReliableDictionary3.TryGetSequenceNumberAsync (tx, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element's sequence number to get.</param>
        <summary>
            (Beta) Attempts to get the sequence number associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if found, the sequence number.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetSequenceNumberAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;long&gt;&gt; TryGetSequenceNumberAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;int64&gt;&gt; TryGetSequenceNumberAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryGetSequenceNumberAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSequenceNumberAsync (tx As ITransaction, key As TKey, lockMode As LockMode) As Task(Of ConditionalValue(Of Long))" />
      <MemberSignature Language="F#" Value="abstract member TryGetSequenceNumberAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * Microsoft.ServiceFabric.Data.Collections.LockMode -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;int64&gt;&gt;" Usage="iReliableDictionary3.TryGetSequenceNumberAsync (tx, key, lockMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element's sequence number to get.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <summary>
            (Beta) Attempts to get the sequence number associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if found, the sequence number.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetSequenceNumberAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;long&gt;&gt; TryGetSequenceNumberAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;int64&gt;&gt; TryGetSequenceNumberAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryGetSequenceNumberAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSequenceNumberAsync (tx As ITransaction, key As TKey, lockMode As LockMode, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of Long))" />
      <MemberSignature Language="F#" Value="abstract member TryGetSequenceNumberAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * Microsoft.ServiceFabric.Data.Collections.LockMode * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;int64&gt;&gt;" Usage="iReliableDictionary3.TryGetSequenceNumberAsync (tx, key, lockMode, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element's sequence number to get.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            (Beta) Attempts to get the sequence number associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if found, the sequence number.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetVersionedKeyValuePairAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; TryGetVersionedKeyValuePairAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; TryGetVersionedKeyValuePairAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryGetVersionedKeyValuePairAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetVersionedKeyValuePairAsync (tx As ITransaction, key As TKey) As Task(Of ConditionalValue(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member TryGetVersionedKeyValuePairAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.TryGetVersionedKeyValuePairAsync (tx, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the versioned element to get.</param>
        <summary>
            (Beta) Attempts to get the versioned element associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if found, the value and sequence number.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetVersionedKeyValuePairAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; TryGetVersionedKeyValuePairAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; TryGetVersionedKeyValuePairAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryGetVersionedKeyValuePairAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetVersionedKeyValuePairAsync (tx As ITransaction, key As TKey, lockMode As LockMode) As Task(Of ConditionalValue(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member TryGetVersionedKeyValuePairAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * Microsoft.ServiceFabric.Data.Collections.LockMode -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.TryGetVersionedKeyValuePairAsync (tx, key, lockMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the versioned element to get.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <summary>
            (Beta) Attempts to get the versioned element associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if found, the value and sequence number.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetVersionedKeyValuePairAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt; TryGetVersionedKeyValuePairAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;valuetype Microsoft.ServiceFabric.Data.VersionedKeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; TryGetVersionedKeyValuePairAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryGetVersionedKeyValuePairAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetVersionedKeyValuePairAsync (tx As ITransaction, key As TKey, lockMode As LockMode, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of VersionedKeyValuePair(Of TKey, TValue)))" />
      <MemberSignature Language="F#" Value="abstract member TryGetVersionedKeyValuePairAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * Microsoft.ServiceFabric.Data.Collections.LockMode * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;'Key, 'Value&gt;&gt;&gt;" Usage="iReliableDictionary3.TryGetVersionedKeyValuePairAsync (tx, key, lockMode, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;Microsoft.ServiceFabric.Data.VersionedKeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the versioned element to get.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            (Beta) Attempts to get the versioned element associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if found, the value and sequence number.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryRemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, long checkSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryRemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, int64 checkSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRemoveAsync (tx As ITransaction, key As TKey, checkSequenceNumber As Long) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryRemoveAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * int64 -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iReliableDictionary3.TryRemoveAsync (tx, key, checkSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to remove.</param>
        <param name="checkSequenceNumber">The expected sequence number of the element to be removed.</param>
        <summary>
            (Beta) Attempts to remove the value with the specified key given the sequence number is matching.
            </summary>
        <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryRemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, long checkSequenceNumber, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryRemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, int64 checkSequenceNumber, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRemoveAsync (tx As ITransaction, key As TKey, checkSequenceNumber As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryRemoveAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * int64 * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iReliableDictionary3.TryRemoveAsync (tx, key, checkSequenceNumber, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to remove.</param>
        <param name="checkSequenceNumber">The expected sequence number of the element to be removed.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            (Beta) Attempts to remove the value with the specified key given the sequence number is matching.
            </summary>
        <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue newValue, long checkSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue newValue, int64 checkSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUpdateAsync (tx As ITransaction, key As TKey, newValue As TValue, checkSequenceNumber As Long) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryUpdateAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * 'Value * int64 -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iReliableDictionary3.TryUpdateAsync (tx, key, newValue, checkSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to be updated.</param>
        <param name="newValue">The value to be updated to if the specified <paramref name="key" /> has the expected <paramref name="checkSequenceNumber" />.</param>
        <param name="checkSequenceNumber">The expected sequence number of the element to be updated.</param>
        <summary>
            (Beta) Attempts to update the value for the specified key given the sequence number is matching.
            </summary>
        <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue newValue, long checkSequenceNumber, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue newValue, int64 checkSequenceNumber, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.Beta.IReliableDictionary3`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUpdateAsync (tx As ITransaction, key As TKey, newValue As TValue, checkSequenceNumber As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TryUpdateAsync : Microsoft.ServiceFabric.Data.ITransaction * 'Key * 'Value * int64 * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iReliableDictionary3.TryUpdateAsync (tx, key, newValue, checkSequenceNumber, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces.V2</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to be updated.</param>
        <param name="newValue">The value to be updated to if the specified <paramref name="key" /> has the expected <paramref name="checkSequenceNumber" />.</param>
        <param name="checkSequenceNumber">The expected sequence number of the element to be updated.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            (Beta) Attempts to update the value for the specified key given the sequence number is matching.
            </summary>
        <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
