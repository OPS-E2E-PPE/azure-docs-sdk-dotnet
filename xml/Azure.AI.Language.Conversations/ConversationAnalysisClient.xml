<Type Name="ConversationAnalysisClient" FullName="Azure.AI.Language.Conversations.ConversationAnalysisClient">
  <TypeSignature Language="C#" Value="public class ConversationAnalysisClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConversationAnalysisClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Language.Conversations.ConversationAnalysisClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ConversationAnalysisClient" />
  <TypeSignature Language="F#" Value="type ConversationAnalysisClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ConversationAnalysis service client. </summary>
    <remarks>
            See <see href="https://docs.microsoft.com/rest/api/language/conversation-analysis-runtime" /> for more information about models you can pass to this client.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConversationAnalysisClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ConversationAnalysisClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.Core.TokenCredential -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.Language.Conversations.ConversationAnalysisClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.Language.Conversations.ConversationAnalysisClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.Language.Conversations.ConversationAnalysisClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As ConversationAnalysisClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.AzureKeyCredential * Azure.AI.Language.Conversations.ConversationAnalysisClientOptions -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.ConversationAnalysisClientOptions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="endpoint">The Conversation Analysis endpoint on which to operate.</param>
        <param name="credential">An <see cref="T:Azure.AzureKeyCredential" /> used to authenticate requests to the <paramref name="endpoint" />.</param>
        <param name="options">Optional <see cref="T:Azure.AI.Language.Conversations.ConversationAnalysisClientOptions" /> to customize requests sent to the endpoint.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Language.Conversations.ConversationAnalysisClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.Language.Conversations.ConversationsClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.Language.Conversations.ConversationsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.Language.Conversations.ConversationsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As ConversationsClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.AzureKeyCredential * Azure.AI.Language.Conversations.ConversationsClientOptions -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.ConversationsClientOptions" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.AI.Language.Conversations.ConversationsClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.Language.Conversations.ConversationsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.AI.Language.Conversations.ConversationsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As ConversationsClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.Core.TokenCredential * Azure.AI.Language.Conversations.ConversationsClientOptions -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.ConversationsClientOptions" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AnalyzeConversation (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AnalyzeConversation(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversation(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversation (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AnalyzeConversation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="conversationAnalysisClient.AnalyzeConversation (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Analyzes the input conversation utterance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>ConversationalTask</summary>Schema for <c>ConversationalTask</c>:
            <code>{
              kind: Conversation, # Required. Enumeration of supported Conversation tasks.
              analysisInput: {
                conversationItem: {
                  id: string, # Required. The ID of a conversation item.
                  participantId: string, # Required. The participant ID of a conversation item.
                  language: string, # Optional. The override language of a conversation item in BCP 47 language representation.
                  modality: "transcript" | "text", # Optional. Enumeration of supported conversational modalities.
                }, # Required. The abstract base for a user input formatted conversation (e.g., Text, Transcript).
              }, # Required. The input ConversationItem and its optional parameters
              parameters: {
                projectName: string, # Required. The name of the project to use.
                deploymentName: string, # Required. The name of the deployment to use.
                verbose: boolean, # Optional. If true, the service will return more detailed information in the response.
                isLoggingEnabled: boolean, # Optional. If true, the service will keep the query for further review.
                stringIndexType: "Utf16CodeUnit", # Optional. Specifies the method used to interpret string offsets. Set this to "Utf16CodeUnit" for .NET strings, which are encoded as UTF-16.
                directTarget: string, # Optional. The name of a target project to forward the request to.
                targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. A dictionary representing the parameters for each target project.
              }, # Required. Input parameters necessary for a Conversation task.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>ConversationalTaskResult</summary>Schema for <c>ConversationalTaskResult</c>:
            <code>{
              kind: ConversationResult, # Required. Enumeration of supported conversational task results
              result: {
                query: string, # Required. The conversation utterance given by the caller.
                detectedLanguage: string, # Optional. The system detected language for the query in BCP 47 language representation..
                prediction: {
                  projectKind: "Conversation" | "Orchestration", # Required. The type of the project.
                  topIntent: string, # Optional. The intent with the highest score.
                }, # Required. The prediction result of a conversation project.
              }, # Required. Represents a conversation analysis response.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt; AnalyzeConversation (string utterance, Azure.AI.Language.Conversations.ConversationsProject project, Azure.AI.Language.Conversations.AnalyzeConversationOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt; AnalyzeConversation(string utterance, class Azure.AI.Language.Conversations.ConversationsProject project, class Azure.AI.Language.Conversations.AnalyzeConversationOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversation(System.String,Azure.AI.Language.Conversations.ConversationsProject,Azure.AI.Language.Conversations.AnalyzeConversationOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversation (utterance As String, project As ConversationsProject, Optional options As AnalyzeConversationOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeConversationTaskResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversation : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&#xA;override this.AnalyzeConversation : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;" Usage="conversationAnalysisClient.AnalyzeConversation (utterance, project, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utterance" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="project" Type="Azure.AI.Language.Conversations.ConversationsProject" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.AnalyzeConversationOptions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="utterance">The conversation utterance to be analyzed.</param>
        <param name="project">The <see cref="T:Azure.AI.Language.Conversations.ConversationsProject" /> used for conversation analysis.</param>
        <param name="options">Optional <see cref="T:Azure.AI.Language.Conversations.AnalyzeConversationOptions" /> with additional query options.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> to cancel the request.</param>
        <summary>Analyzes a conversational utterance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="utterance" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="utterance" /> or <paramref name="project" /> or is null.</exception>
        <exception cref="T:Azure.RequestFailedException">The service returned an error. The exception contains details of the service error.</exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AnalyzeConversationAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AnalyzeConversationAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversationAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversationAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AnalyzeConversationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="conversationAnalysisClient.AnalyzeConversationAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Analyzes the input conversation utterance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>ConversationalTask</summary>Schema for <c>ConversationalTask</c>:
            <code>{
              kind: Conversation, # Required. Enumeration of supported Conversation tasks.
              analysisInput: {
                conversationItem: {
                  id: string, # Required. The ID of a conversation item.
                  participantId: string, # Required. The participant ID of a conversation item.
                  language: string, # Optional. The override language of a conversation item in BCP 47 language representation.
                  modality: "transcript" | "text", # Optional. Enumeration of supported conversational modalities.
                }, # Required. The abstract base for a user input formatted conversation (e.g., Text, Transcript).
              }, # Required. The input ConversationItem and its optional parameters
              parameters: {
                projectName: string, # Required. The name of the project to use.
                deploymentName: string, # Required. The name of the deployment to use.
                verbose: boolean, # Optional. If true, the service will return more detailed information in the response.
                isLoggingEnabled: boolean, # Optional. If true, the service will keep the query for further review.
                stringIndexType: "Utf16CodeUnit", # Optional. Specifies the method used to interpret string offsets. Set this to "Utf16CodeUnit" for .NET strings, which are encoded as UTF-16.
                directTarget: string, # Optional. The name of a target project to forward the request to.
                targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. A dictionary representing the parameters for each target project.
              }, # Required. Input parameters necessary for a Conversation task.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>ConversationalTaskResult</summary>Schema for <c>ConversationalTaskResult</c>:
            <code>{
              kind: ConversationResult, # Required. Enumeration of supported conversational task results
              result: {
                query: string, # Required. The conversation utterance given by the caller.
                detectedLanguage: string, # Optional. The system detected language for the query in BCP 47 language representation..
                prediction: {
                  projectKind: "Conversation" | "Orchestration", # Required. The type of the project.
                  topIntent: string, # Optional. The intent with the highest score.
                }, # Required. The prediction result of a conversation project.
              }, # Required. Represents a conversation analysis response.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt; AnalyzeConversationAsync (string utterance, Azure.AI.Language.Conversations.ConversationsProject project, Azure.AI.Language.Conversations.AnalyzeConversationOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt; AnalyzeConversationAsync(string utterance, class Azure.AI.Language.Conversations.ConversationsProject project, class Azure.AI.Language.Conversations.AnalyzeConversationOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversationAsync(System.String,Azure.AI.Language.Conversations.ConversationsProject,Azure.AI.Language.Conversations.AnalyzeConversationOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversationAsync (utterance As String, project As ConversationsProject, Optional options As AnalyzeConversationOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeConversationTaskResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversationAsync : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt;&#xA;override this.AnalyzeConversationAsync : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt;" Usage="conversationAnalysisClient.AnalyzeConversationAsync (utterance, project, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utterance" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="project" Type="Azure.AI.Language.Conversations.ConversationsProject" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.AnalyzeConversationOptions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="utterance">The conversation utterance to be analyzed.</param>
        <param name="project">The <see cref="T:Azure.AI.Language.Conversations.ConversationsProject" /> used for conversation analysis.</param>
        <param name="options">Optional <see cref="T:Azure.AI.Language.Conversations.AnalyzeConversationOptions" /> with additional query options.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> to cancel the request.</param>
        <summary>Analyzes a conversational utterance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="utterance" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="utterance" /> or <paramref name="project" /> or is null.</exception>
        <exception cref="T:Azure.RequestFailedException">The service returned an error. The exception contains details of the service error.</exception>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public virtual Uri Endpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Endpoint" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Language.Conversations.ConversationAnalysisClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Endpoint As Uri" />
      <MemberSignature Language="F#" Value="member this.Endpoint : Uri" Usage="Azure.AI.Language.Conversations.ConversationAnalysisClient.Endpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the service endpoint for this client.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Language.Conversations.ConversationAnalysisClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Language.Conversations.ConversationAnalysisClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
