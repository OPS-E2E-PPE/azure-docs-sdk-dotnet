<Type Name="DataFactoryResource" FullName="Azure.ResourceManager.DataFactory.DataFactoryResource">
  <TypeSignature Language="C#" Value="public class DataFactoryResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataFactoryResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.DataFactory.DataFactoryResource" />
  <TypeSignature Language="VB.NET" Value="Public Class DataFactoryResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type DataFactoryResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a DataFactory along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetDataFactoryResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> using the GetDataFactory method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataFactoryResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDataFlowDataFlowDebugSession">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt; AddDataFlowDataFlowDebugSession (Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt; AddDataFlowDataFlowDebugSession(class Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddDataFlowDataFlowDebugSession(Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddDataFlowDataFlowDebugSession (content As DataFlowDebugPackage, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AddDataFlowToDebugSessionResult)" />
      <MemberSignature Language="F#" Value="abstract member AddDataFlowDataFlowDebugSession : Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;&#xA;override this.AddDataFlowDataFlowDebugSession : Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;" Usage="dataFactoryResource.AddDataFlowDataFlowDebugSession (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition with debug content. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a data flow into debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession
            Operation Id: DataFlowDebugSession_AddDataFlow
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddDataFlowDataFlowDebugSessionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;&gt; AddDataFlowDataFlowDebugSessionAsync (Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;&gt; AddDataFlowDataFlowDebugSessionAsync(class Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddDataFlowDataFlowDebugSessionAsync(Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddDataFlowDataFlowDebugSessionAsync (content As DataFlowDebugPackage, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AddDataFlowToDebugSessionResult))" />
      <MemberSignature Language="F#" Value="abstract member AddDataFlowDataFlowDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;&gt;&#xA;override this.AddDataFlowDataFlowDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;&gt;" Usage="dataFactoryResource.AddDataFlowDataFlowDebugSessionAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AddDataFlowToDebugSessionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DataFlowDebugPackage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition with debug content. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a data flow into debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession
            Operation Id: DataFlowDebugSession_AddDataFlow
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; AddTag (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; AddTag(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddTag(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTag (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.AddTag (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; AddTagAsync (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; AddTagAsync(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTagAsync (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.AddTagAsync (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelPipelineRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelPipelineRun (string runId, bool? isRecursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelPipelineRun(string runId, valuetype System.Nullable`1&lt;bool&gt; isRecursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CancelPipelineRun(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelPipelineRun (runId As String, Optional isRecursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelPipelineRun : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CancelPipelineRun : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataFactoryResource.CancelPipelineRun (runId, isRecursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="isRecursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="isRecursive"> If true, cancel all the Child pipelines that are triggered by the current pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cancel a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/cancel
            Operation Id: PipelineRuns_Cancel
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelPipelineRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelPipelineRunAsync (string runId, bool? isRecursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelPipelineRunAsync(string runId, valuetype System.Nullable`1&lt;bool&gt; isRecursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CancelPipelineRunAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelPipelineRunAsync (runId As String, Optional isRecursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelPipelineRunAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelPipelineRunAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataFactoryResource.CancelPipelineRunAsync (runId, isRecursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="isRecursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="isRecursive"> If true, cancel all the Child pipelines that are triggered by the current pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cancel a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/cancel
            Operation Id: PipelineRuns_Cancel
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataFlowDebugSession">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt; CreateDataFlowDebugSession (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt; CreateDataFlowDebugSession(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CreateDataFlowDebugSession(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataFlowDebugSession (waitUntil As WaitUntil, content As CreateDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of CreateDataFlowDebugSessionResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataFlowDebugSession : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;&#xA;override this.CreateDataFlowDebugSession : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;" Usage="dataFactoryResource.CreateDataFlowDebugSession (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug session definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataFlowDebugSessionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;&gt; CreateDataFlowDebugSessionAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;&gt; CreateDataFlowDebugSessionAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CreateDataFlowDebugSessionAsync(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataFlowDebugSessionAsync (waitUntil As WaitUntil, content As CreateDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of CreateDataFlowDebugSessionResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateDataFlowDebugSessionAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;&gt;&#xA;override this.CreateDataFlowDebugSessionAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;&gt;" Usage="dataFactoryResource.CreateDataFlowDebugSessionAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.CreateDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug session definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string factoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string factoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CreateResourceIdentifier(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, factoryName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, factoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="factoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="factoryName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DataFactoryData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DataFactory.DataFactoryData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.DataFactoryResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As DataFactoryData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.DataFactory.DataFactoryData" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DataFactoryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="dataFactoryResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="dataFactoryResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDataFlowDebugSession">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteDataFlowDebugSession (Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteDataFlowDebugSession(class Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.DeleteDataFlowDebugSession(Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDataFlowDebugSession (content As DeleteDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteDataFlowDebugSession : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteDataFlowDebugSession : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataFactoryResource.DeleteDataFlowDebugSession (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition for deletion. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDataFlowDebugSessionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteDataFlowDebugSessionAsync (Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteDataFlowDebugSessionAsync(class Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.DeleteDataFlowDebugSessionAsync(Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDataFlowDebugSessionAsync (content As DeleteDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDataFlowDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteDataFlowDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataFactoryResource.DeleteDataFlowDebugSessionAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition for deletion. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommandDataFlowDebugSession">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt; ExecuteCommandDataFlowDebugSession (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt; ExecuteCommandDataFlowDebugSession(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.ExecuteCommandDataFlowDebugSession(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteCommandDataFlowDebugSession (waitUntil As WaitUntil, content As DataFlowDebugCommandContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of DataFlowDebugCommandResult)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteCommandDataFlowDebugSession : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;&#xA;override this.ExecuteCommandDataFlowDebugSession : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;" Usage="dataFactoryResource.ExecuteCommandDataFlowDebugSession (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug command definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Execute a data flow debug command.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand
            Operation Id: DataFlowDebugSession_ExecuteCommand
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommandDataFlowDebugSessionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;&gt; ExecuteCommandDataFlowDebugSessionAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;&gt; ExecuteCommandDataFlowDebugSessionAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.ExecuteCommandDataFlowDebugSessionAsync(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteCommandDataFlowDebugSessionAsync (waitUntil As WaitUntil, content As DataFlowDebugCommandContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of DataFlowDebugCommandResult))" />
      <MemberSignature Language="F#" Value="abstract member ExecuteCommandDataFlowDebugSessionAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;&gt;&#xA;override this.ExecuteCommandDataFlowDebugSessionAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;&gt;" Usage="dataFactoryResource.ExecuteCommandDataFlowDebugSessionAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug command definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Execute a data flow debug command.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand
            Operation Id: DataFlowDebugSession_ExecuteCommand
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Get (string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Get(string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.Get(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.Get (ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifNoneMatch"> ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivityRunsByPipelineRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt; GetActivityRunsByPipelineRun (string runId, Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.ActivityRun&gt; GetActivityRunsByPipelineRun(string runId, class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetActivityRunsByPipelineRun(System.String,Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActivityRunsByPipelineRun (runId As String, content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ActivityRun)" />
      <MemberSignature Language="F#" Value="abstract member GetActivityRunsByPipelineRun : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt;&#xA;override this.GetActivityRunsByPipelineRun : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt;" Usage="dataFactoryResource.GetActivityRunsByPipelineRun (runId, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="content"> Parameters to filter the activity runs. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query activity runs based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns
            Operation Id: ActivityRuns_QueryByPipelineRun
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.ActivityRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetActivityRunsByPipelineRunAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt; GetActivityRunsByPipelineRunAsync (string runId, Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.ActivityRun&gt; GetActivityRunsByPipelineRunAsync(string runId, class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetActivityRunsByPipelineRunAsync(System.String,Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActivityRunsByPipelineRunAsync (runId As String, content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ActivityRun)" />
      <MemberSignature Language="F#" Value="abstract member GetActivityRunsByPipelineRunAsync : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt;&#xA;override this.GetActivityRunsByPipelineRunAsync : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt;" Usage="dataFactoryResource.GetActivityRunsByPipelineRunAsync (runId, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="content"> Parameters to filter the activity runs. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query activity runs based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns
            Operation Id: ActivityRuns_QueryByPipelineRun
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.ActivityRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; GetAsync (string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; GetAsync(string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.GetAsync (ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifNoneMatch"> ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryGlobalParameter">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt; GetDataFactoryGlobalParameter (string globalParameterName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt; GetDataFactoryGlobalParameter(string globalParameterName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryGlobalParameter(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryGlobalParameter (globalParameterName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryGlobalParameterResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryGlobalParameter : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;&#xA;override this.GetDataFactoryGlobalParameter : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;" Usage="dataFactoryResource.GetDataFactoryGlobalParameter (globalParameterName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalParameterName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="globalParameterName"> The global parameter name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Global parameter
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters/{globalParameterName}
            Operation Id: GlobalParameters_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="globalParameterName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="globalParameterName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryGlobalParameterAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;&gt; GetDataFactoryGlobalParameterAsync (string globalParameterName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;&gt; GetDataFactoryGlobalParameterAsync(string globalParameterName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryGlobalParameterAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryGlobalParameterAsync (globalParameterName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryGlobalParameterResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryGlobalParameterAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;&gt;&#xA;override this.GetDataFactoryGlobalParameterAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;&gt;" Usage="dataFactoryResource.GetDataFactoryGlobalParameterAsync (globalParameterName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalParameterName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="globalParameterName"> The global parameter name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Global parameter
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters/{globalParameterName}
            Operation Id: GlobalParameters_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="globalParameterName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="globalParameterName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryGlobalParameters">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterCollection GetDataFactoryGlobalParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterCollection GetDataFactoryGlobalParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryGlobalParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryGlobalParameters () As DataFactoryGlobalParameterCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryGlobalParameters : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterCollection&#xA;override this.GetDataFactoryGlobalParameters : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterCollection" Usage="dataFactoryResource.GetDataFactoryGlobalParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DataFactoryGlobalParameterCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataFactoryGlobalParameterResources in the DataFactory. </summary>
        <returns> An object representing collection of DataFactoryGlobalParameterResources and their operations over a DataFactoryGlobalParameterResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryPipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt; GetDataFactoryPipeline (string pipelineName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt; GetDataFactoryPipeline(string pipelineName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryPipeline(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryPipeline (pipelineName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryPipelineResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryPipeline : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;&#xA;override this.GetDataFactoryPipeline : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;" Usage="dataFactoryResource.GetDataFactoryPipeline (pipelineName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pipelineName"> The pipeline name. </param>
        <param name="ifNoneMatch"> ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}
            Operation Id: Pipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryPipelineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;&gt; GetDataFactoryPipelineAsync (string pipelineName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;&gt; GetDataFactoryPipelineAsync(string pipelineName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryPipelineAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryPipelineAsync (pipelineName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryPipelineResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryPipelineAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;&gt;&#xA;override this.GetDataFactoryPipelineAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;&gt;" Usage="dataFactoryResource.GetDataFactoryPipelineAsync (pipelineName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPipelineResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pipelineName"> The pipeline name. </param>
        <param name="ifNoneMatch"> ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}
            Operation Id: Pipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryPipelines">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DataFactoryPipelineCollection GetDataFactoryPipelines ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.DataFactoryPipelineCollection GetDataFactoryPipelines() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryPipelines" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryPipelines () As DataFactoryPipelineCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryPipelines : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryPipelineCollection&#xA;override this.GetDataFactoryPipelines : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryPipelineCollection" Usage="dataFactoryResource.GetDataFactoryPipelines " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DataFactoryPipelineCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataFactoryPipelineResources in the DataFactory. </summary>
        <returns> An object representing collection of DataFactoryPipelineResources and their operations over a DataFactoryPipelineResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryPrivateEndpointConnection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt; GetDataFactoryPrivateEndpointConnection (string privateEndpointConnectionName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt; GetDataFactoryPrivateEndpointConnection(string privateEndpointConnectionName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryPrivateEndpointConnection(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryPrivateEndpointConnection (privateEndpointConnectionName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryPrivateEndpointConnectionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryPrivateEndpointConnection : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;&#xA;override this.GetDataFactoryPrivateEndpointConnection : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;" Usage="dataFactoryResource.GetDataFactoryPrivateEndpointConnection (privateEndpointConnectionName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="privateEndpointConnectionName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="privateEndpointConnectionName"> The private endpoint connection name. </param>
        <param name="ifNoneMatch"> ETag of the private endpoint connection entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a private endpoint connection
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}
            Operation Id: PrivateEndpointConnection_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateEndpointConnectionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateEndpointConnectionName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryPrivateEndpointConnectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;&gt; GetDataFactoryPrivateEndpointConnectionAsync (string privateEndpointConnectionName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;&gt; GetDataFactoryPrivateEndpointConnectionAsync(string privateEndpointConnectionName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryPrivateEndpointConnectionAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryPrivateEndpointConnectionAsync (privateEndpointConnectionName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryPrivateEndpointConnectionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryPrivateEndpointConnectionAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;&gt;&#xA;override this.GetDataFactoryPrivateEndpointConnectionAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;&gt;" Usage="dataFactoryResource.GetDataFactoryPrivateEndpointConnectionAsync (privateEndpointConnectionName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="privateEndpointConnectionName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="privateEndpointConnectionName"> The private endpoint connection name. </param>
        <param name="ifNoneMatch"> ETag of the private endpoint connection entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a private endpoint connection
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}
            Operation Id: PrivateEndpointConnection_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateEndpointConnectionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateEndpointConnectionName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryPrivateEndpointConnections">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionCollection GetDataFactoryPrivateEndpointConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionCollection GetDataFactoryPrivateEndpointConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryPrivateEndpointConnections" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryPrivateEndpointConnections () As DataFactoryPrivateEndpointConnectionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryPrivateEndpointConnections : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionCollection&#xA;override this.GetDataFactoryPrivateEndpointConnections : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionCollection" Usage="dataFactoryResource.GetDataFactoryPrivateEndpointConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DataFactoryPrivateEndpointConnectionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataFactoryPrivateEndpointConnectionResources in the DataFactory. </summary>
        <returns> An object representing collection of DataFactoryPrivateEndpointConnectionResources and their operations over a DataFactoryPrivateEndpointConnectionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryTrigger">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt; GetDataFactoryTrigger (string triggerName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt; GetDataFactoryTrigger(string triggerName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryTrigger(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryTrigger (triggerName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryTriggerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryTrigger : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&#xA;override this.GetDataFactoryTrigger : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;" Usage="dataFactoryResource.GetDataFactoryTrigger (triggerName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="triggerName"> The trigger name. </param>
        <param name="ifNoneMatch"> ETag of the trigger entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a trigger.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}
            Operation Id: Triggers_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="triggerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="triggerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryTriggerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&gt; GetDataFactoryTriggerAsync (string triggerName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&gt; GetDataFactoryTriggerAsync(string triggerName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryTriggerAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryTriggerAsync (triggerName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryTriggerResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryTriggerAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&gt;&#xA;override this.GetDataFactoryTriggerAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&gt;" Usage="dataFactoryResource.GetDataFactoryTriggerAsync (triggerName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="triggerName"> The trigger name. </param>
        <param name="ifNoneMatch"> ETag of the trigger entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a trigger.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}
            Operation Id: Triggers_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="triggerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="triggerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFactoryTriggers">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DataFactoryTriggerCollection GetDataFactoryTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.DataFactoryTriggerCollection GetDataFactoryTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFactoryTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFactoryTriggers () As DataFactoryTriggerCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataFactoryTriggers : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryTriggerCollection&#xA;override this.GetDataFactoryTriggers : unit -&gt; Azure.ResourceManager.DataFactory.DataFactoryTriggerCollection" Usage="dataFactoryResource.GetDataFactoryTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DataFactoryTriggerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataFactoryTriggerResources in the DataFactory. </summary>
        <returns> An object representing collection of DataFactoryTriggerResources and their operations over a DataFactoryTriggerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFlowDebugSessions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessions (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessions(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFlowDebugSessions(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFlowDebugSessions (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DataFlowDebugSessionInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFlowDebugSessions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;&#xA;override this.GetDataFlowDebugSessions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;" Usage="dataFactoryResource.GetDataFlowDebugSessions cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query all active data flow debug sessions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions
            Operation Id: DataFlowDebugSession_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFlowDebugSessionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessionsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessionsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFlowDebugSessionsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFlowDebugSessionsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DataFlowDebugSessionInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFlowDebugSessionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;&#xA;override this.GetDataFlowDebugSessionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;" Usage="dataFactoryResource.GetDataFlowDebugSessionsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query all active data flow debug sessions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions
            Operation Id: DataFlowDebugSession_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFlowResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt; GetDataFlowResource (string dataFlowName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFlowResource&gt; GetDataFlowResource(string dataFlowName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFlowResource(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFlowResource (dataFlowName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFlowResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFlowResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt;&#xA;override this.GetDataFlowResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt;" Usage="dataFactoryResource.GetDataFlowResource (dataFlowName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFlowName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataFlowName"> The data flow name. </param>
        <param name="ifNoneMatch"> ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a data flow.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}
            Operation Id: DataFlows_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataFlowName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataFlowName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFlowResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt;&gt; GetDataFlowResourceAsync (string dataFlowName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFlowResource&gt;&gt; GetDataFlowResourceAsync(string dataFlowName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFlowResourceAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFlowResourceAsync (dataFlowName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFlowResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataFlowResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt;&gt;&#xA;override this.GetDataFlowResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt;&gt;" Usage="dataFactoryResource.GetDataFlowResourceAsync (dataFlowName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFlowResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFlowName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataFlowName"> The data flow name. </param>
        <param name="ifNoneMatch"> ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a data flow.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}
            Operation Id: DataFlows_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataFlowName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataFlowName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataFlowResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DataFlowResourceCollection GetDataFlowResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.DataFlowResourceCollection GetDataFlowResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFlowResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFlowResources () As DataFlowResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataFlowResources : unit -&gt; Azure.ResourceManager.DataFactory.DataFlowResourceCollection&#xA;override this.GetDataFlowResources : unit -&gt; Azure.ResourceManager.DataFactory.DataFlowResourceCollection" Usage="dataFactoryResource.GetDataFlowResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DataFlowResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataFlowResources in the DataFactory. </summary>
        <returns> An object representing collection of DataFlowResources and their operations over a DataFlowResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataPlaneAccess">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt; GetDataPlaneAccess (Azure.ResourceManager.DataFactory.Models.UserAccessPolicy policy, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt; GetDataPlaneAccess(class Azure.ResourceManager.DataFactory.Models.UserAccessPolicy policy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataPlaneAccess(Azure.ResourceManager.DataFactory.Models.UserAccessPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataPlaneAccess (policy As UserAccessPolicy, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessPolicyResult)" />
      <MemberSignature Language="F#" Value="abstract member GetDataPlaneAccess : Azure.ResourceManager.DataFactory.Models.UserAccessPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;&#xA;override this.GetDataPlaneAccess : Azure.ResourceManager.DataFactory.Models.UserAccessPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;" Usage="dataFactoryResource.GetDataPlaneAccess (policy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Azure.ResourceManager.DataFactory.Models.UserAccessPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policy"> Data Plane user access policy definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Data Plane access.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess
            Operation Id: Factories_GetDataPlaneAccess
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policy" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataPlaneAccessAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;&gt; GetDataPlaneAccessAsync (Azure.ResourceManager.DataFactory.Models.UserAccessPolicy policy, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;&gt; GetDataPlaneAccessAsync(class Azure.ResourceManager.DataFactory.Models.UserAccessPolicy policy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataPlaneAccessAsync(Azure.ResourceManager.DataFactory.Models.UserAccessPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataPlaneAccessAsync (policy As UserAccessPolicy, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessPolicyResult))" />
      <MemberSignature Language="F#" Value="abstract member GetDataPlaneAccessAsync : Azure.ResourceManager.DataFactory.Models.UserAccessPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;&gt;&#xA;override this.GetDataPlaneAccessAsync : Azure.ResourceManager.DataFactory.Models.UserAccessPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;&gt;" Usage="dataFactoryResource.GetDataPlaneAccessAsync (policy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.AccessPolicyResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Azure.ResourceManager.DataFactory.Models.UserAccessPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policy"> Data Plane user access policy definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Data Plane access.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess
            Operation Id: Factories_GetDataPlaneAccess
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policy" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDatasetResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt; GetDatasetResource (string datasetName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DatasetResource&gt; GetDatasetResource(string datasetName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDatasetResource(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatasetResource (datasetName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DatasetResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDatasetResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt;&#xA;override this.GetDatasetResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt;" Usage="dataFactoryResource.GetDatasetResource (datasetName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datasetName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="datasetName"> The dataset name. </param>
        <param name="ifNoneMatch"> ETag of the dataset entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a dataset.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}
            Operation Id: Datasets_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="datasetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="datasetName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDatasetResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt;&gt; GetDatasetResourceAsync (string datasetName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DatasetResource&gt;&gt; GetDatasetResourceAsync(string datasetName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDatasetResourceAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatasetResourceAsync (datasetName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DatasetResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDatasetResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt;&gt;&#xA;override this.GetDatasetResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt;&gt;" Usage="dataFactoryResource.GetDatasetResourceAsync (datasetName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DatasetResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datasetName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="datasetName"> The dataset name. </param>
        <param name="ifNoneMatch"> ETag of the dataset entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a dataset.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}
            Operation Id: Datasets_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="datasetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="datasetName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDatasetResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DatasetResourceCollection GetDatasetResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.DatasetResourceCollection GetDatasetResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDatasetResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatasetResources () As DatasetResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDatasetResources : unit -&gt; Azure.ResourceManager.DataFactory.DatasetResourceCollection&#xA;override this.GetDatasetResources : unit -&gt; Azure.ResourceManager.DataFactory.DatasetResourceCollection" Usage="dataFactoryResource.GetDatasetResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DatasetResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DatasetResources in the DataFactory. </summary>
        <returns> An object representing collection of DatasetResources and their operations over a DatasetResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExposureControlFeatureValues">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt; GetExposureControlFeatureValues (Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt; GetExposureControlFeatureValues(class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetExposureControlFeatureValues(Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExposureControlFeatureValues (content As ExposureControlBatchContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExposureControlBatchResult)" />
      <MemberSignature Language="F#" Value="abstract member GetExposureControlFeatureValues : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&#xA;override this.GetExposureControlFeatureValues : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;" Usage="dataFactoryResource.GetExposureControlFeatureValues (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request for list of features. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get list of exposure control features for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryFeaturesValue
            Operation Id: ExposureControl_QueryFeatureValuesByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExposureControlFeatureValuesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt; GetExposureControlFeatureValuesAsync (Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt; GetExposureControlFeatureValuesAsync(class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetExposureControlFeatureValuesAsync(Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExposureControlFeatureValuesAsync (content As ExposureControlBatchContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExposureControlBatchResult))" />
      <MemberSignature Language="F#" Value="abstract member GetExposureControlFeatureValuesAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt;&#xA;override this.GetExposureControlFeatureValuesAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt;" Usage="dataFactoryResource.GetExposureControlFeatureValuesAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request for list of features. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get list of exposure control features for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryFeaturesValue
            Operation Id: ExposureControl_QueryFeatureValuesByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFeatureValueByFactoryExposureControl">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt; GetFeatureValueByFactoryExposureControl (Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt; GetFeatureValueByFactoryExposureControl(class Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFeatureValueByFactoryExposureControl(Azure.ResourceManager.DataFactory.Models.ExposureControlContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFeatureValueByFactoryExposureControl (content As ExposureControlContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExposureControlResult)" />
      <MemberSignature Language="F#" Value="abstract member GetFeatureValueByFactoryExposureControl : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&#xA;override this.GetFeatureValueByFactoryExposureControl : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;" Usage="dataFactoryResource.GetFeatureValueByFactoryExposureControl (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get exposure control feature for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getFeatureValue
            Operation Id: ExposureControl_GetFeatureValueByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFeatureValueByFactoryExposureControlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt; GetFeatureValueByFactoryExposureControlAsync (Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt; GetFeatureValueByFactoryExposureControlAsync(class Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFeatureValueByFactoryExposureControlAsync(Azure.ResourceManager.DataFactory.Models.ExposureControlContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFeatureValueByFactoryExposureControlAsync (content As ExposureControlContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExposureControlResult))" />
      <MemberSignature Language="F#" Value="abstract member GetFeatureValueByFactoryExposureControlAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt;&#xA;override this.GetFeatureValueByFactoryExposureControlAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt;" Usage="dataFactoryResource.GetFeatureValueByFactoryExposureControlAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get exposure control feature for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getFeatureValue
            Operation Id: ExposureControl_GetFeatureValueByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGitHubAccessToken">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt; GetGitHubAccessToken (Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt; GetGitHubAccessToken(class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetGitHubAccessToken(Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGitHubAccessToken (content As GitHubAccessTokenContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GitHubAccessTokenResult)" />
      <MemberSignature Language="F#" Value="abstract member GetGitHubAccessToken : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&#xA;override this.GetGitHubAccessToken : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;" Usage="dataFactoryResource.GetGitHubAccessToken (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Get GitHub access token request definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get GitHub Access Token.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken
            Operation Id: Factories_GetGitHubAccessToken
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGitHubAccessTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt; GetGitHubAccessTokenAsync (Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt; GetGitHubAccessTokenAsync(class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetGitHubAccessTokenAsync(Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGitHubAccessTokenAsync (content As GitHubAccessTokenContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GitHubAccessTokenResult))" />
      <MemberSignature Language="F#" Value="abstract member GetGitHubAccessTokenAsync : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt;&#xA;override this.GetGitHubAccessTokenAsync : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt;" Usage="dataFactoryResource.GetGitHubAccessTokenAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Get GitHub access token request definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get GitHub Access Token.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken
            Operation Id: Factories_GetGitHubAccessToken
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationRuntimeResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt; GetIntegrationRuntimeResource (string integrationRuntimeName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt; GetIntegrationRuntimeResource(string integrationRuntimeName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetIntegrationRuntimeResource(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationRuntimeResource (integrationRuntimeName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IntegrationRuntimeResource)" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationRuntimeResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;&#xA;override this.GetIntegrationRuntimeResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;" Usage="dataFactoryResource.GetIntegrationRuntimeResource (integrationRuntimeName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationRuntimeName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationRuntimeName"> The integration runtime name. </param>
        <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration runtime.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
            Operation Id: IntegrationRuntimes_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationRuntimeName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationRuntimeName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationRuntimeResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;&gt; GetIntegrationRuntimeResourceAsync (string integrationRuntimeName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;&gt; GetIntegrationRuntimeResourceAsync(string integrationRuntimeName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetIntegrationRuntimeResourceAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationRuntimeResourceAsync (integrationRuntimeName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IntegrationRuntimeResource))" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationRuntimeResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;&gt;&#xA;override this.GetIntegrationRuntimeResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;&gt;" Usage="dataFactoryResource.GetIntegrationRuntimeResourceAsync (integrationRuntimeName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.IntegrationRuntimeResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationRuntimeName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationRuntimeName"> The integration runtime name. </param>
        <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration runtime.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
            Operation Id: IntegrationRuntimes_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationRuntimeName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationRuntimeName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationRuntimeResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.IntegrationRuntimeResourceCollection GetIntegrationRuntimeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.IntegrationRuntimeResourceCollection GetIntegrationRuntimeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetIntegrationRuntimeResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationRuntimeResources () As IntegrationRuntimeResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationRuntimeResources : unit -&gt; Azure.ResourceManager.DataFactory.IntegrationRuntimeResourceCollection&#xA;override this.GetIntegrationRuntimeResources : unit -&gt; Azure.ResourceManager.DataFactory.IntegrationRuntimeResourceCollection" Usage="dataFactoryResource.GetIntegrationRuntimeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.IntegrationRuntimeResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of IntegrationRuntimeResources in the DataFactory. </summary>
        <returns> An object representing collection of IntegrationRuntimeResources and their operations over a IntegrationRuntimeResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinkedServiceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt; GetLinkedServiceResource (string linkedServiceName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.LinkedServiceResource&gt; GetLinkedServiceResource(string linkedServiceName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetLinkedServiceResource(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkedServiceResource (linkedServiceName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LinkedServiceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLinkedServiceResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;&#xA;override this.GetLinkedServiceResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;" Usage="dataFactoryResource.GetLinkedServiceResource (linkedServiceName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="ifNoneMatch"> ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a linked service.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}
            Operation Id: LinkedServices_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkedServiceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLinkedServiceResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;&gt; GetLinkedServiceResourceAsync (string linkedServiceName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;&gt; GetLinkedServiceResourceAsync(string linkedServiceName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetLinkedServiceResourceAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkedServiceResourceAsync (linkedServiceName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LinkedServiceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLinkedServiceResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;&gt;&#xA;override this.GetLinkedServiceResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;&gt;" Usage="dataFactoryResource.GetLinkedServiceResourceAsync (linkedServiceName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.LinkedServiceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="ifNoneMatch"> ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a linked service.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}
            Operation Id: LinkedServices_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkedServiceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLinkedServiceResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.LinkedServiceResourceCollection GetLinkedServiceResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.LinkedServiceResourceCollection GetLinkedServiceResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetLinkedServiceResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkedServiceResources () As LinkedServiceResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetLinkedServiceResources : unit -&gt; Azure.ResourceManager.DataFactory.LinkedServiceResourceCollection&#xA;override this.GetLinkedServiceResources : unit -&gt; Azure.ResourceManager.DataFactory.LinkedServiceResourceCollection" Usage="dataFactoryResource.GetLinkedServiceResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.LinkedServiceResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of LinkedServiceResources in the DataFactory. </summary>
        <returns> An object representing collection of LinkedServiceResources and their operations over a LinkedServiceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedVirtualNetworkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt; GetManagedVirtualNetworkResource (string managedVirtualNetworkName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt; GetManagedVirtualNetworkResource(string managedVirtualNetworkName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetManagedVirtualNetworkResource(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedVirtualNetworkResource (managedVirtualNetworkName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ManagedVirtualNetworkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetManagedVirtualNetworkResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;&#xA;override this.GetManagedVirtualNetworkResource : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;" Usage="dataFactoryResource.GetManagedVirtualNetworkResource (managedVirtualNetworkName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managedVirtualNetworkName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="managedVirtualNetworkName"> Managed virtual network name. </param>
        <param name="ifNoneMatch"> ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a managed Virtual Network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}
            Operation Id: ManagedVirtualNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedVirtualNetworkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedVirtualNetworkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetManagedVirtualNetworkResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;&gt; GetManagedVirtualNetworkResourceAsync (string managedVirtualNetworkName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;&gt; GetManagedVirtualNetworkResourceAsync(string managedVirtualNetworkName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetManagedVirtualNetworkResourceAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedVirtualNetworkResourceAsync (managedVirtualNetworkName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ManagedVirtualNetworkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetManagedVirtualNetworkResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;&gt;&#xA;override this.GetManagedVirtualNetworkResourceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;&gt;" Usage="dataFactoryResource.GetManagedVirtualNetworkResourceAsync (managedVirtualNetworkName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managedVirtualNetworkName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="managedVirtualNetworkName"> Managed virtual network name. </param>
        <param name="ifNoneMatch"> ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a managed Virtual Network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}
            Operation Id: ManagedVirtualNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedVirtualNetworkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedVirtualNetworkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetManagedVirtualNetworkResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResourceCollection GetManagedVirtualNetworkResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResourceCollection GetManagedVirtualNetworkResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetManagedVirtualNetworkResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedVirtualNetworkResources () As ManagedVirtualNetworkResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetManagedVirtualNetworkResources : unit -&gt; Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResourceCollection&#xA;override this.GetManagedVirtualNetworkResources : unit -&gt; Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResourceCollection" Usage="dataFactoryResource.GetManagedVirtualNetworkResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.ManagedVirtualNetworkResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ManagedVirtualNetworkResources in the DataFactory. </summary>
        <returns> An object representing collection of ManagedVirtualNetworkResources and their operations over a ManagedVirtualNetworkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt; GetPipelineRun (string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.PipelineRun&gt; GetPipelineRun(string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRun(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRun (runId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PipelineRun)" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&#xA;override this.GetPipelineRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;" Usage="dataFactoryResource.GetPipelineRun (runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}
            Operation Id: PipelineRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&gt; GetPipelineRunAsync (string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&gt; GetPipelineRunAsync(string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRunAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRunAsync (runId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PipelineRun))" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&gt;&#xA;override this.GetPipelineRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&gt;" Usage="dataFactoryResource.GetPipelineRunAsync (runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}
            Operation Id: PipelineRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt; GetPipelineRuns (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.PipelineRun&gt; GetPipelineRuns(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRuns(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRuns (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of PipelineRun)" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&#xA;override this.GetPipelineRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;" Usage="dataFactoryResource.GetPipelineRuns (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query pipeline runs in the factory based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryPipelineRuns
            Operation Id: PipelineRuns_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.PipelineRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRunsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt; GetPipelineRunsAsync (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.PipelineRun&gt; GetPipelineRunsAsync(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRunsAsync(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRunsAsync (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of PipelineRun)" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;&#xA;override this.GetPipelineRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;" Usage="dataFactoryResource.GetPipelineRunsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.PipelineRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query pipeline runs in the factory based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryPipelineRuns
            Operation Id: PipelineRuns_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.PipelineRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetprivateLinkResources">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt; GetprivateLinkResources (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt; GetprivateLinkResources(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetprivateLinkResources(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetprivateLinkResources (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DataFactoryPrivateLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetprivateLinkResources : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt;&#xA;override this.GetprivateLinkResources : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt;" Usage="dataFactoryResource.GetprivateLinkResources cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the private link resources
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateLinkResources
            Operation Id: privateLinkResources_Get
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetprivateLinkResourcesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt; GetprivateLinkResourcesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt; GetprivateLinkResourcesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetprivateLinkResourcesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetprivateLinkResourcesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DataFactoryPrivateLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetprivateLinkResourcesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt;&#xA;override this.GetprivateLinkResourcesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt;" Usage="dataFactoryResource.GetprivateLinkResourcesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the private link resources
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateLinkResources
            Operation Id: privateLinkResources_Get
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.DataFactoryPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTriggerRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt; GetTriggerRuns (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.TriggerRun&gt; GetTriggerRuns(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggerRuns(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggerRuns (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of TriggerRun)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggerRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt;&#xA;override this.GetTriggerRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt;" Usage="dataFactoryResource.GetTriggerRuns (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query trigger runs.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns
            Operation Id: TriggerRuns_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.TriggerRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTriggerRunsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt; GetTriggerRunsAsync (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.TriggerRun&gt; GetTriggerRunsAsync(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggerRunsAsync(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggerRunsAsync (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of TriggerRun)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggerRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt;&#xA;override this.GetTriggerRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt;" Usage="dataFactoryResource.GetTriggerRunsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.TriggerRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query trigger runs.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns
            Operation Id: TriggerRuns_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.TriggerRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTriggers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt; GetTriggers (Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt; GetTriggers(class Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggers(Azure.ResourceManager.DataFactory.Models.TriggerFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggers (content As TriggerFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DataFactoryTriggerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggers : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&#xA;override this.GetTriggers : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;" Usage="dataFactoryResource.GetTriggers (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.TriggerFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the triggers. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query triggers.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/querytriggers
            Operation Id: Triggers_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryTriggerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTriggersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt; GetTriggersAsync (Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt; GetTriggersAsync(class Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggersAsync(Azure.ResourceManager.DataFactory.Models.TriggerFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggersAsync (content As TriggerFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DataFactoryTriggerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggersAsync : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;&#xA;override this.GetTriggersAsync : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;" Usage="dataFactoryResource.GetTriggersAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.DataFactoryTriggerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.TriggerFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the triggers. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query triggers.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/querytriggers
            Operation Id: Triggers_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryTriggerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.DataFactoryResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; RemoveTag (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; RemoveTag(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.RemoveTag(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTag (key As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.RemoveTag (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; RemoveTagAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; RemoveTagAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTagAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.RemoveTagAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.DataFactory.DataFactoryResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTags">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; SetTags (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; SetTags(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTags (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.SetTags (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTagsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; SetTagsAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; SetTagsAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTagsAsync (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.SetTagsAsync (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Update (Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Update(class Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.Update(Azure.ResourceManager.DataFactory.Models.DataFactoryPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (patch As DataFactoryPatch, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.Update : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.Update (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.DataFactory.Models.DataFactoryPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> The parameters for updating a factory. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; UpdateAsync (Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; UpdateAsync(class Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.UpdateAsync(Azure.ResourceManager.DataFactory.Models.DataFactoryPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (patch As DataFactoryPatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.UpdateAsync (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.DataFactory.Models.DataFactoryPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> The parameters for updating a factory. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
