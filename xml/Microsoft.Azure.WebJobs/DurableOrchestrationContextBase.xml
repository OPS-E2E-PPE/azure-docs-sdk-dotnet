<Type Name="DurableOrchestrationContextBase" FullName="Microsoft.Azure.WebJobs.DurableOrchestrationContextBase">
  <TypeSignature Language="C#" Value="public abstract class DurableOrchestrationContextBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DurableOrchestrationContextBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DurableOrchestrationContextBase" />
  <TypeSignature Language="F#" Value="type DurableOrchestrationContextBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Abstract base class for <see cref="T:Microsoft.Azure.WebJobs.DurableOrchestrationContext" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DurableOrchestrationContextBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallActivityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CallActivityAsync (string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CallActivityAsync(string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallActivityAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CallActivityAsync (functionName As String, input As Object) As Task" />
      <MemberSignature Language="F#" Value="abstract member CallActivityAsync : string * obj -&gt; System.Threading.Tasks.Task&#xA;override this.CallActivityAsync : string * obj -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.CallActivityAsync (functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallActivityAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;TResult&gt; CallActivityAsync&lt;TResult&gt; (string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallActivityAsync&lt;TResult&gt;(string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallActivityAsync``1(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CallActivityAsync(Of TResult) (functionName As String, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallActivityAsync : string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="durableOrchestrationContextBase.CallActivityAsync (functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled activity function.</typeparam>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called activity function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallActivityWithRetryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CallActivityWithRetryAsync (string functionName, Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CallActivityWithRetryAsync(string functionName, class Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallActivityWithRetryAsync(System.String,Microsoft.Azure.WebJobs.RetryOptions,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member CallActivityWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * obj -&gt; System.Threading.Tasks.Task&#xA;override this.CallActivityWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * obj -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.CallActivityWithRetryAsync (functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="retryOptions">The retry option for the activity function.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called activity function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallActivityWithRetryAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;TResult&gt; CallActivityWithRetryAsync&lt;TResult&gt; (string functionName, Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallActivityWithRetryAsync&lt;TResult&gt;(string functionName, class Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallActivityWithRetryAsync``1(System.String,Microsoft.Azure.WebJobs.RetryOptions,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member CallActivityWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="durableOrchestrationContextBase.CallActivityWithRetryAsync (functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled activity function.</typeparam>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="retryOptions">The retry option for the activity function.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called activity function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CallSubOrchestratorAsync (string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CallSubOrchestratorAsync(string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CallSubOrchestratorAsync (functionName As String, input As Object) As Task" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorAsync : string * obj -&gt; System.Threading.Tasks.Task&#xA;override this.CallSubOrchestratorAsync : string * obj -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.CallSubOrchestratorAsync (functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The sub-orchestrator function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CallSubOrchestratorAsync (string functionName, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CallSubOrchestratorAsync(string functionName, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorAsync(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CallSubOrchestratorAsync (functionName As String, instanceId As String, input As Object) As Task" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorAsync : string * string * obj -&gt; System.Threading.Tasks.Task&#xA;override this.CallSubOrchestratorAsync : string * string * obj -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.CallSubOrchestratorAsync (functionName, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt; (string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt;(string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorAsync``1(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CallSubOrchestratorAsync(Of TResult) (functionName As String, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorAsync : string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;&#xA;override this.CallSubOrchestratorAsync : string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="durableOrchestrationContextBase.CallSubOrchestratorAsync (functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestration function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt; (string functionName, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt;(string functionName, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorAsync``1(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CallSubOrchestratorAsync(Of TResult) (functionName As String, instanceId As String, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorAsync : string * string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="durableOrchestrationContextBase.CallSubOrchestratorAsync (functionName, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestration function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync (string functionName, Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync(string functionName, class Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync(System.String,Microsoft.Azure.WebJobs.RetryOptions,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * obj -&gt; System.Threading.Tasks.Task&#xA;override this.CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * obj -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync (functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync (string functionName, Microsoft.Azure.WebJobs.RetryOptions retryOptions, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync(string functionName, class Microsoft.Azure.WebJobs.RetryOptions retryOptions, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync(System.String,Microsoft.Azure.WebJobs.RetryOptions,System.String,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * string * obj -&gt; System.Threading.Tasks.Task&#xA;override this.CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * string * obj -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync (functionName, retryOptions, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.RetryOptions" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt; (string functionName, Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt;(string functionName, class Microsoft.Azure.WebJobs.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync``1(System.String,Microsoft.Azure.WebJobs.RetryOptions,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;&#xA;override this.CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="durableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync (functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt; (string functionName, Microsoft.Azure.WebJobs.RetryOptions retryOptions, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt;(string functionName, class Microsoft.Azure.WebJobs.RetryOptions retryOptions, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync``1(System.String,Microsoft.Azure.WebJobs.RetryOptions,System.String,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.RetryOptions * string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="durableOrchestrationContextBase.CallSubOrchestratorWithRetryAsync (functionName, retryOptions, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.RetryOptions" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueAsNew">
      <MemberSignature Language="C#" Value="public abstract void ContinueAsNew (object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContinueAsNew(object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.ContinueAsNew(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ContinueAsNew (input As Object)" />
      <MemberSignature Language="F#" Value="abstract member ContinueAsNew : obj -&gt; unit" Usage="durableOrchestrationContextBase.ContinueAsNew input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="input">The JSON-serializeable data to re-initialize the instance with.</param>
        <summary>
            Restarts the orchestration by clearing its history.
            </summary>
        <remarks>
          <para>Large orchestration histories can consume a lot of memory and cause delays in
            instance load times. This method can be used to periodically truncate the stored
            history of an orchestration instance.</para>
          <para>Note that any unprocessed external events will be discarded when an orchestration
            instance restarts itself using this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueAsNew">
      <MemberSignature Language="C#" Value="public virtual void ContinueAsNew (object input, bool preserveUnprocessedEvents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContinueAsNew(object input, bool preserveUnprocessedEvents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.ContinueAsNew(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ContinueAsNew (input As Object, preserveUnprocessedEvents As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ContinueAsNew : obj * bool -&gt; unit&#xA;override this.ContinueAsNew : obj * bool -&gt; unit" Usage="durableOrchestrationContextBase.ContinueAsNew (input, preserveUnprocessedEvents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Object" />
        <Parameter Name="preserveUnprocessedEvents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">The JSON-serializeable data to re-initialize the instance with.</param>
        <param name="preserveUnprocessedEvents">
            If set to <c>true</c>, re-adds any unprocessed external events into the new execution
            history when the orchestration instance restarts. If <c>false</c>, any unprocessed
            external events will be discarded when the orchestration instance restarts.
            </param>
        <summary>
            Restarts the orchestration by clearing its history.
            </summary>
        <remarks>
          <para>Large orchestration histories can consume a lot of memory and cause delays in
            instance load times. This method can be used to periodically truncate the stored
            history of an orchestration instance.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateTimer (DateTime fireAt, System.Threading.CancellationToken cancelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateTimer(valuetype System.DateTime fireAt, valuetype System.Threading.CancellationToken cancelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CreateTimer(System.DateTime,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTimer (fireAt As DateTime, cancelToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateTimer : DateTime * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateTimer : DateTime * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.CreateTimer (fireAt, cancelToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fireAt" Type="System.DateTime" />
        <Parameter Name="cancelToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fireAt">The time at which the timer should expire.</param>
        <param name="cancelToken">The <c>CancellationToken</c> to use for cancelling the timer.</param>
        <summary>
            Creates a durable timer that expires at a specified time.
            </summary>
        <returns>A durable task that completes when the durable timer expires.</returns>
        <remarks>
            All durable timers created using this method must either expire or be cancelled
            using the <paramref name="cancelToken" /> before the orchestrator function completes.
            Otherwise the underlying framework will keep the instance alive until the timer expires.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;T&gt; CreateTimer&lt;T&gt; (DateTime fireAt, T state, System.Threading.CancellationToken cancelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; CreateTimer&lt;T&gt;(valuetype System.DateTime fireAt, !!T state, valuetype System.Threading.CancellationToken cancelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CreateTimer``1(System.DateTime,``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateTimer(Of T) (fireAt As DateTime, state As T, cancelToken As CancellationToken) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member CreateTimer : DateTime * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="durableOrchestrationContextBase.CreateTimer (fireAt, state, cancelToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fireAt" Type="System.DateTime" />
        <Parameter Name="state" Type="T" />
        <Parameter Name="cancelToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of <paramref name="state" />.</typeparam>
        <param name="fireAt">The time at which the timer should expire.</param>
        <param name="state">Any state to be preserved by the timer.</param>
        <param name="cancelToken">The <c>CancellationToken</c> to use for cancelling the timer.</param>
        <summary>
            Creates a durable timer that expires at a specified time.
            </summary>
        <returns>A durable task that completes when the durable timer expires.</returns>
        <remarks>
            All durable timers created using this method must either expire or be cancelled
            using the <paramref name="cancelToken" /> before the orchestrator function completes.
            Otherwise the underlying framework will keep the instance alive until the timer expires.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUtcDateTime">
      <MemberSignature Language="C#" Value="public abstract DateTime CurrentUtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime CurrentUtcDateTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CurrentUtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CurrentUtcDateTime As DateTime" />
      <MemberSignature Language="F#" Value="member this.CurrentUtcDateTime : DateTime" Usage="Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.CurrentUtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current date/time in a way that is safe for use by orchestrator functions.
            </summary>
        <value>The orchestration's current date/time in UTC.</value>
        <remarks>
            This date/time value is derived from the orchestration history. It always returns the same value
            at specific points in the orchestrator function code, making it deterministic and safe for replay.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInput&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract T GetInput&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T GetInput&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.GetInput``1" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInput(Of T) () As T" />
      <MemberSignature Language="F#" Value="abstract member GetInput : unit -&gt; 'T" Usage="durableOrchestrationContextBase.GetInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Any data contract type that matches the JSON input.</typeparam>
        <summary>
            Gets the input of the current orchestrator function as a deserialized value.
            </summary>
        <returns>The deserialized input value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public virtual string InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstanceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InstanceId As String" />
      <MemberSignature Language="F#" Value="member this.InstanceId : string" Usage="Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the instance ID of the currently executing orchestration.
            </summary>
        <value>
            The ID of the current orchestration instance.
            </value>
        <remarks>
            The instance ID is generated and fixed when the orchestrator function is scheduled. It can be either
            auto-generated, in which case it is formatted as a GUID, or it can be user-specified with any format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReplaying">
      <MemberSignature Language="C#" Value="public virtual bool IsReplaying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReplaying" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.IsReplaying" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReplaying As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReplaying : bool" Usage="Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.IsReplaying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the orchestrator function is currently replaying itself.
            </summary>
        <value>
          <c>true</c> if the orchestrator function is currently being replayed; otherwise <c>false</c>.
            </value>
        <remarks>
            This property is useful when there is logic that needs to run only when the orchestrator function
            is *not* replaying. For example, certain types of application logging may become too noisy when duplicated
            as part of orchestrator function replay. The orchestrator code could check to see whether the function is
            being replayed and then issue the log statements when this value is <c>false</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewGuid">
      <MemberSignature Language="C#" Value="public abstract Guid NewGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Guid NewGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.NewGuid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function NewGuid () As Guid" />
      <MemberSignature Language="F#" Value="abstract member NewGuid : unit -&gt; Guid" Usage="durableOrchestrationContextBase.NewGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a new GUID that is safe for replay within an orchestrator function.
            </summary>
        <returns>The new <see cref="T:System.Guid" /> value.</returns>
        <remarks>
            The default implementation of this method creates a name-based UUID using the algorithm from
            RFC 4122 §4.3. The name input used to generate this value is a combination of the orchestration
            instance ID and an internally managed sequence number.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentInstanceId">
      <MemberSignature Language="C#" Value="public virtual string ParentInstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParentInstanceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.ParentInstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ParentInstanceId As String" />
      <MemberSignature Language="F#" Value="member this.ParentInstanceId : string" Usage="Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.ParentInstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the parent instance ID of the currently executing sub-orchestration.
            </summary>
        <value>
            The ID of the parent orchestration of the current sub-orchestration instance. The value will be available only in sub-orchestrations.
            </value>
        <remarks>
            The parent instance ID is generated and fixed when the parent orchestrator function is scheduled. It can be either
            auto-generated, in which case it is formatted as a GUID, or it can be user-specified with any format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCustomStatus">
      <MemberSignature Language="C#" Value="public abstract void SetCustomStatus (object customStatusObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCustomStatus(object customStatusObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.SetCustomStatus(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetCustomStatus (customStatusObject As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetCustomStatus : obj -&gt; unit" Usage="durableOrchestrationContextBase.SetCustomStatus customStatusObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customStatusObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="customStatusObject">The JSON-serializeable value to use as the orchestrator function's custom status.</param>
        <summary>
            Sets the JSON-serializeable status of the current orchestrator function.
            </summary>
        <remarks>
            The <paramref name="customStatusObject" /> value is serialized to JSON and will
            be made available to the orchestration status query APIs. The serialized JSON
            value must not exceed 16 KB of UTF-16 encoded text.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WaitForExternalEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WaitForExternalEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.WaitForExternalEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitForExternalEvent (name As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string -&gt; System.Threading.Tasks.Task&#xA;override this.WaitForExternalEvent : string -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.WaitForExternalEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the event to wait for.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" />.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" /> with the object parameter set to <c>null</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WaitForExternalEvent (string name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WaitForExternalEvent(string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.WaitForExternalEvent(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitForExternalEvent (name As String, timeout As TimeSpan) As Task" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string * TimeSpan -&gt; System.Threading.Tasks.Task&#xA;override this.WaitForExternalEvent : string * TimeSpan -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationContextBase.WaitForExternalEvent (name, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to throw a TimeoutException.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" />.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" /> with the object parameter set to <c>null</c>.
            </remarks>
        <exception cref="T:System.TimeoutException">
            The external event was not received before the timeout expired.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.WaitForExternalEvent``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WaitForExternalEvent(Of T) (name As String) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="durableOrchestrationContextBase.WaitForExternalEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="name">The name of the event to wait for.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (string name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.WaitForExternalEvent``1(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WaitForExternalEvent(Of T) (name As String, timeout As TimeSpan) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="durableOrchestrationContextBase.WaitForExternalEvent (name, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to throw a TimeoutException.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
        <exception cref="T:System.TimeoutException">
            The external event was not received before the timeout expired.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (string name, TimeSpan timeout, T defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(string name, valuetype System.TimeSpan timeout, !!T defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationContextBase.WaitForExternalEvent``1(System.String,System.TimeSpan,``0)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WaitForExternalEvent(Of T) (name As String, timeout As TimeSpan, defaultValue As T) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string * TimeSpan * 'T -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="durableOrchestrationContextBase.WaitForExternalEvent (name, timeout, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="defaultValue" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to return the value in the <paramref name="defaultValue" /> parameter.</param>
        <param name="defaultValue">The default value to return if the timeout expires before the external event is received.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received, or returns the value of <paramref name="defaultValue" />
            if the timeout expires.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
