<Type Name="TestRunClient" FullName="Azure.Developer.LoadTesting.TestRunClient">
  <TypeSignature Language="C#" Value="public class TestRunClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TestRunClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Developer.LoadTesting.TestRunClient" />
  <TypeSignature Language="VB.NET" Value="Public Class TestRunClient" />
  <TypeSignature Language="F#" Value="type TestRunClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The TestRun service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TestRunClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of TestRunClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAndUpdateTest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateAndUpdateTest (string testRunId, Azure.Core.RequestContent content, string oldTestRunId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateAndUpdateTest(string testRunId, class Azure.Core.RequestContent content, string oldTestRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.CreateAndUpdateTest(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAndUpdateTest (testRunId As String, content As RequestContent, Optional oldTestRunId As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateAndUpdateTest : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateAndUpdateTest : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.CreateAndUpdateTest (testRunId, content, oldTestRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="oldTestRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="oldTestRunId"> Existing test run Id that should be rerun. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Create and start a new test run with the given name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateAndUpdateTest with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = client.CreateAndUpdateTest("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAndUpdateTest with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {
    displayName = "<displayName>",
    testId = "<testId>",
    description = "<description>",
    loadTestConfig = new {
        engineInstances = 1234,
        splitAllCSVs = true,
    },
    passFailCriteria = new {
        passFailMetrics = new {
            key = new {
                clientmetric = "<clientmetric>",
                aggregate = "<aggregate>",
                condition = "<condition>",
                requestName = "<requestName>",
                value = 123.45d,
                action = "<action>",
            },
        },
    },
    secrets = new {
        key = new {
            value = "<value>",
            type = "<type>",
        },
    },
    environmentVariables = new {
        key = "<String>",
    },
};

Response response = client.CreateAndUpdateTest("<testRunId>", RequestContent.Create(data), "<oldTestRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAndUpdateTestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAndUpdateTestAsync (string testRunId, Azure.Core.RequestContent content, string oldTestRunId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAndUpdateTestAsync(string testRunId, class Azure.Core.RequestContent content, string oldTestRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.CreateAndUpdateTestAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAndUpdateTestAsync (testRunId As String, content As RequestContent, Optional oldTestRunId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAndUpdateTestAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAndUpdateTestAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.CreateAndUpdateTestAsync (testRunId, content, oldTestRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="oldTestRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="oldTestRunId"> Existing test run Id that should be rerun. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Create and start a new test run with the given name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code>

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateAndUpdateTestAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {};

Response response = await client.CreateAndUpdateTestAsync("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateAndUpdateTestAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {
    displayName = "<displayName>",
    testId = "<testId>",
    description = "<description>",
    loadTestConfig = new {
        engineInstances = 1234,
        splitAllCSVs = true,
    },
    passFailCriteria = new {
        passFailMetrics = new {
            key = new {
                clientmetric = "<clientmetric>",
                aggregate = "<aggregate>",
                condition = "<condition>",
                requestName = "<requestName>",
                value = 123.45d,
                action = "<action>",
            },
        },
    },
    secrets = new {
        key = new {
            value = "<value>",
            type = "<type>",
        },
    },
    environmentVariables = new {
        key = "<String>",
    },
};

Response response = await client.CreateAndUpdateTestAsync("<testRunId>", RequestContent.Create(data), "<oldTestRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTestRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTestRun (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTestRun(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.DeleteTestRun(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTestRun (testRunId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTestRun : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTestRun : string * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.DeleteTestRun (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete a test run by its name. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTestRun with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = client.DeleteTestRun("<testRunId>");
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTestRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTestRunAsync (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTestRunAsync(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.DeleteTestRunAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTestRunAsync (testRunId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTestRunAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTestRunAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.DeleteTestRunAsync (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete a test run by its name. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTestRunAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = await client.DeleteTestRunAsync("<testRunId>");
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTestRun (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTestRun(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRun(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRun (testRunId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTestRun : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTestRun : string * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.GetTestRun (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get test run details by name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRun with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = client.GetTestRun("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTestRunAsync (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTestRunAsync(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunAsync (testRunId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTestRunAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.GetTestRunAsync (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get test run details by name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = await client.GetTestRunAsync("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunClientMetrics">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTestRunClientMetrics (string testRunId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTestRunClientMetrics(string testRunId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunClientMetrics(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunClientMetrics (testRunId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunClientMetrics : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTestRunClientMetrics : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.GetTestRunClientMetrics (testRunId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all client metrics for a load test run. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ClientMetricsRequestModel</c>:
<code>{
  requestSamplers: [string], # Optional. List of request samplers, maximum supported samplers for queries are 20. In case of empty, it will return metrics for maximum 20 samplers
  errors: [string], # Optional. List of errors, maximum supported errors for queries are 20. In case of empty, by default will return metrics for maximum 20 errors
  percentiles: [string], # Optional. List of percentiles values for response time, supported values 50,90,99,95. Default value is 50th percentile.
  groupByInterval: string, # Optional. For test duration less than 10 minutes group by time interval can be any one of 5s,10s,1m,5m.\n\nFor test duration greater than 10 minutes, group by time interval can be any one of 1m,5m,1h. Default value is 1m.
  startTime: string (ISO 8601 Format), # Required. Start time
  endTime: string (ISO 8601 Format), # Required. End time
}
</code>

Response Body:

Schema for <c>ClientMetricsResults</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics results is required.
  timeSeries: {
    activeUsers: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Active users time series data.
    responseTime: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Response time, time series data.
    throughput: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Throughput time series data.
    errors: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Errors time series data.
  }, # Optional.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunClientMetrics with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = client.GetTestRunClientMetrics("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTestRunClientMetrics with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {
    requestSamplers = new[] {
        "<String>"
    },
    errors = new[] {
        "<String>"
    },
    percentiles = new[] {
        "<String>"
    },
    groupByInterval = "<groupByInterval>",
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = client.GetTestRunClientMetrics("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("value").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunClientMetricsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTestRunClientMetricsAsync (string testRunId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTestRunClientMetricsAsync(string testRunId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunClientMetricsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunClientMetricsAsync (testRunId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunClientMetricsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTestRunClientMetricsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.GetTestRunClientMetricsAsync (testRunId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all client metrics for a load test run. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>ClientMetricsRequestModel</c>:
<code>{
  requestSamplers: [string], # Optional. List of request samplers, maximum supported samplers for queries are 20. In case of empty, it will return metrics for maximum 20 samplers
  errors: [string], # Optional. List of errors, maximum supported errors for queries are 20. In case of empty, by default will return metrics for maximum 20 errors
  percentiles: [string], # Optional. List of percentiles values for response time, supported values 50,90,99,95. Default value is 50th percentile.
  groupByInterval: string, # Optional. For test duration less than 10 minutes group by time interval can be any one of 5s,10s,1m,5m.\n\nFor test duration greater than 10 minutes, group by time interval can be any one of 1m,5m,1h. Default value is 1m.
  startTime: string (ISO 8601 Format), # Required. Start time
  endTime: string (ISO 8601 Format), # Required. End time
}
</code>

Response Body:

Schema for <c>ClientMetricsResults</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics results is required.
  timeSeries: {
    activeUsers: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Active users time series data.
    responseTime: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Response time, time series data.
    throughput: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Throughput time series data.
    errors: Dictionary&lt;string, TimeSeries[]&gt;, # Optional. Errors time series data.
  }, # Optional.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunClientMetricsAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = await client.GetTestRunClientMetricsAsync("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTestRunClientMetricsAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

var data = new {
    requestSamplers = new[] {
        "<String>"
    },
    errors = new[] {
        "<String>"
    },
    percentiles = new[] {
        "<String>"
    },
    groupByInterval = "<groupByInterval>",
    startTime = "2022-05-10T18:57:31.2311892Z",
    endTime = "2022-05-10T18:57:31.2311892Z",
};

Response response = await client.GetTestRunClientMetricsAsync("<testRunId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("activeUsers").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("responseTime").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("throughput").GetProperty("<test>")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("timeSeries").GetProperty("errors").GetProperty("<test>")[0].GetProperty("value").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunClientMetricsFilters">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTestRunClientMetricsFilters (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTestRunClientMetricsFilters(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunClientMetricsFilters(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunClientMetricsFilters (testRunId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunClientMetricsFilters : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTestRunClientMetricsFilters : string * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.GetTestRunClientMetricsFilters (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all filters that are supported for client metrics for a given load test run. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ClientMetricsFilters</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics filters is required.
  filters: {
    requestSamplerValues: [string], # Optional. List of request sampler for the test run, for which client metrics can be filtered.
    errorFiltersValues: [string], # Optional. List of errors occurred for the test run, for which client metrics can be filtered.
  }, # Optional.
  timeRange: {
    startTime: string (ISO 8601 Format), # Optional. start DateTime(ISO 8601 literal format) for the requested client metrics filter.
    endTime: string (ISO 8601 Format), # Optional. end DateTime(ISO 8601 literal format) for the requested client metrics filter.
  }, # Optional.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunClientMetricsFilters with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = client.GetTestRunClientMetricsFilters("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("requestSamplerValues")[0].ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("errorFiltersValues")[0].ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("endTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunClientMetricsFiltersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTestRunClientMetricsFiltersAsync (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTestRunClientMetricsFiltersAsync(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunClientMetricsFiltersAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunClientMetricsFiltersAsync (testRunId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunClientMetricsFiltersAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTestRunClientMetricsFiltersAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.GetTestRunClientMetricsFiltersAsync (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name for load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all filters that are supported for client metrics for a given load test run. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ClientMetricsFilters</c>:
<code>{
  testRunId: string, # Optional. Test run name for which client metrics filters is required.
  filters: {
    requestSamplerValues: [string], # Optional. List of request sampler for the test run, for which client metrics can be filtered.
    errorFiltersValues: [string], # Optional. List of errors occurred for the test run, for which client metrics can be filtered.
  }, # Optional.
  timeRange: {
    startTime: string (ISO 8601 Format), # Optional. start DateTime(ISO 8601 literal format) for the requested client metrics filter.
    endTime: string (ISO 8601 Format), # Optional. end DateTime(ISO 8601 literal format) for the requested client metrics filter.
  }, # Optional.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunClientMetricsFiltersAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = await client.GetTestRunClientMetricsFiltersAsync("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("requestSamplerValues")[0].ToString());
Console.WriteLine(result.GetProperty("filters").GetProperty("errorFiltersValues")[0].ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("timeRange").GetProperty("endTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTestRunFile (string testRunId, string fileId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTestRunFile(string testRunId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunFile(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunFile (testRunId As String, fileId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunFile : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTestRunFile : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.GetTestRunFile (testRunId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="fileId"> Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get test run file by file name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunFile with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = client.GetTestRunFile("<testRunId>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTestRunFileAsync (string testRunId, string fileId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTestRunFileAsync(string testRunId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunFileAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunFileAsync (testRunId As String, fileId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTestRunFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.GetTestRunFileAsync (testRunId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="fileId"> Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get test run file by file name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FileUrl</c>:
<code>{
  url: string, # Optional. File URL.
  fileId: string, # Optional. File unique identifier.
  filename: string, # Optional. Name of the file.
  fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
  expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
  validationStatus: string, # Optional. Validation status of the file
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunFileAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = await client.GetTestRunFileAsync("<testRunId>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("validationStatus").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunsSearches">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTestRunsSearches (string orderBy = default, string continuationToken = default, string search = default, DateTimeOffset? executionFrom = default, DateTimeOffset? executionTo = default, string status = default, int? maxPageSize = default, string testId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTestRunsSearches(string orderBy, string continuationToken, string search, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; executionFrom, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; executionTo, string status, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string testId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunsSearches(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunsSearches (Optional orderBy As String = Nothing, Optional continuationToken As String = Nothing, Optional search As String = Nothing, Optional executionFrom As Nullable(Of DateTimeOffset) = Nothing, Optional executionTo As Nullable(Of DateTimeOffset) = Nothing, Optional status As String = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional testId As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunsSearches : string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTestRunsSearches : string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.GetTestRunsSearches (orderBy, continuationToken, search, executionFrom, executionTo, status, maxPageSize, testId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="search" Type="System.String" />
        <Parameter Name="executionFrom" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="executionTo" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="status" Type="System.String" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="testId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="orderBy"> Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc. </param>
        <param name="continuationToken"> Continuation token to get the next page of response. </param>
        <param name="search"> Filter search based on searchable fields - description, executedUser. </param>
        <param name="executionFrom"> The end DateTime(ISO 8601 literal format) of test-run execution time filter range. </param>
        <param name="executionTo"> The start DateTime(ISO 8601 literal format) of test-run execution time filter range. </param>
        <param name="status">
            Comma separated list of test run status, value can be -  "ACCEPTED", "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
            "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
            </param>
        <param name="maxPageSize"> Number of results in response. </param>
        <param name="testId"> Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all test runs with given filters. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModelResourceList</c>:
<code>{
  value: [
    {
      testRunId: string, # Optional. Unique test run name as identifier.
      displayName: string, # Optional. Display name of a test run.
      testId: string, # Optional. Associated test Id.
      resourceId: string, # Optional. Load test resource Id.
      description: string, # Optional. The test run description.
      status: string, # Optional. The test run status.
      startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
      endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
      loadTestConfig: {
        engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
        splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
      }, # Optional. The load test configuration.
      testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
      passFailCriteria: {
        passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
      }, # Optional. Pass fail criteria for a test.
      testArtifacts: {
        inputArtifacts: {
          configUrl: {
            url: string, # Optional. File URL.
            fileId: string, # Optional. File unique identifier.
            filename: string, # Optional. Name of the file.
            fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
            expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
            validationStatus: string, # Optional. Validation status of the file
          }, # Optional. FileUrl Model.
          testScriptUrl: FileUrl, # Optional. FileUrl Model.
          userPropUrl: FileUrl, # Optional. FileUrl Model.
          inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
          additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
        }, # Required. The input artifacts for the test.
        outputArtifacts: {
          resultUrl: FileUrl, # Optional. FileUrl Model.
          logsUrl: FileUrl, # Optional. FileUrl Model.
        }, # Optional. The output artifacts for the test run.
      }, # Optional.
      executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
      vusers: number, # Optional. Number of virtual users, for which test has been run.
      testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
      createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
      createdBy: string, # Optional. The user that created the test run.
      lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
      lastModifiedBy: string, # Optional. The user that updated the test run.
      portalUrl: string, # Optional. Portal url.
      secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
      environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
      duration: number, # Optional. Test run duration in milliseconds.
      subnetId: string, # Optional. Subnet ID on which the load test instances should run.
    }
  ], # Required. List of Resources
  nextLink: string, # Optional. Link for the next list of resources in case of paginated results, if applicable
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunsSearches and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = client.GetTestRunsSearches();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetTestRunsSearches with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = client.GetTestRunsSearches("<orderBy>", "<continuationToken>", "<search>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<status>", 1234, "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTestRunsSearchesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTestRunsSearchesAsync (string orderBy = default, string continuationToken = default, string search = default, DateTimeOffset? executionFrom = default, DateTimeOffset? executionTo = default, string status = default, int? maxPageSize = default, string testId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTestRunsSearchesAsync(string orderBy, string continuationToken, string search, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; executionFrom, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; executionTo, string status, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string testId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.GetTestRunsSearchesAsync(System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTestRunsSearchesAsync (Optional orderBy As String = Nothing, Optional continuationToken As String = Nothing, Optional search As String = Nothing, Optional executionFrom As Nullable(Of DateTimeOffset) = Nothing, Optional executionTo As Nullable(Of DateTimeOffset) = Nothing, Optional status As String = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional testId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTestRunsSearchesAsync : string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTestRunsSearchesAsync : string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.GetTestRunsSearchesAsync (orderBy, continuationToken, search, executionFrom, executionTo, status, maxPageSize, testId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="search" Type="System.String" />
        <Parameter Name="executionFrom" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="executionTo" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="status" Type="System.String" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="testId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="orderBy"> Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc. </param>
        <param name="continuationToken"> Continuation token to get the next page of response. </param>
        <param name="search"> Filter search based on searchable fields - description, executedUser. </param>
        <param name="executionFrom"> The end DateTime(ISO 8601 literal format) of test-run execution time filter range. </param>
        <param name="executionTo"> The start DateTime(ISO 8601 literal format) of test-run execution time filter range. </param>
        <param name="status">
            Comma separated list of test run status, value can be -  "ACCEPTED", "NOTSTARTED","PROVISIONING","PROVISIONED","CONFIGURING",
            "CONFIGURED","EXECUTING","EXECUTED","DEPROVISIONING","DEPROVISIONED","DONE","CANCELLED","FAILED".
            </param>
        <param name="maxPageSize"> Number of results in response. </param>
        <param name="testId"> Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get all test runs with given filters. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModelResourceList</c>:
<code>{
  value: [
    {
      testRunId: string, # Optional. Unique test run name as identifier.
      displayName: string, # Optional. Display name of a test run.
      testId: string, # Optional. Associated test Id.
      resourceId: string, # Optional. Load test resource Id.
      description: string, # Optional. The test run description.
      status: string, # Optional. The test run status.
      startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
      endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
      loadTestConfig: {
        engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
        splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
      }, # Optional. The load test configuration.
      testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
      passFailCriteria: {
        passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
      }, # Optional. Pass fail criteria for a test.
      testArtifacts: {
        inputArtifacts: {
          configUrl: {
            url: string, # Optional. File URL.
            fileId: string, # Optional. File unique identifier.
            filename: string, # Optional. Name of the file.
            fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
            expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
            validationStatus: string, # Optional. Validation status of the file
          }, # Optional. FileUrl Model.
          testScriptUrl: FileUrl, # Optional. FileUrl Model.
          userPropUrl: FileUrl, # Optional. FileUrl Model.
          inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
          additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
        }, # Required. The input artifacts for the test.
        outputArtifacts: {
          resultUrl: FileUrl, # Optional. FileUrl Model.
          logsUrl: FileUrl, # Optional. FileUrl Model.
        }, # Optional. The output artifacts for the test run.
      }, # Optional.
      executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
      vusers: number, # Optional. Number of virtual users, for which test has been run.
      testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
      createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
      createdBy: string, # Optional. The user that created the test run.
      lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
      lastModifiedBy: string, # Optional. The user that updated the test run.
      portalUrl: string, # Optional. Portal url.
      secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
      environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
      duration: number, # Optional. Test run duration in milliseconds.
      subnetId: string, # Optional. Subnet ID on which the load test instances should run.
    }
  ], # Required. List of Resources
  nextLink: string, # Optional. Link for the next list of resources in case of paginated results, if applicable
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTestRunsSearchesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = await client.GetTestRunsSearchesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetTestRunsSearchesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = await client.GetTestRunsSearchesAsync("<orderBy>", "<continuationToken>", "<search>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<status>", 1234, "<testId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("subnetId").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Developer.LoadTesting.TestRunClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Developer.LoadTesting.TestRunClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopTestRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response StopTestRun (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response StopTestRun(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.StopTestRun(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopTestRun (testRunId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member StopTestRun : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.StopTestRun : string * Azure.RequestContext -&gt; Azure.Response" Usage="testRunClient.StopTestRun (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Stop test run by name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopTestRun with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = client.StopTestRun("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StopTestRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; StopTestRunAsync (string testRunId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; StopTestRunAsync(string testRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.LoadTesting.TestRunClient.StopTestRunAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopTestRunAsync (testRunId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member StopTestRunAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.StopTestRunAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="testRunClient.StopTestRunAsync (testRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.LoadTesting</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testRunId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="testRunId"> Unique name of the load test run, must be a valid URL character ^[a-z0-9_-]*$. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Stop test run by name. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>TestRunModel</c>:
<code>{
  testRunId: string, # Optional. Unique test run name as identifier.
  displayName: string, # Optional. Display name of a test run.
  testId: string, # Optional. Associated test Id.
  resourceId: string, # Optional. Load test resource Id.
  description: string, # Optional. The test run description.
  status: string, # Optional. The test run status.
  startDateTime: string (ISO 8601 Format), # Optional. The test run start DateTime(ISO 8601 literal format).
  endDateTime: string (ISO 8601 Format), # Optional. The test run end DateTime(ISO 8601 literal format).
  loadTestConfig: {
    engineInstances: number, # Optional. The number of engine instances to execute load test. Supported values are in range of 1-45. Required for creating a new test.
    splitAllCSVs: boolean, # Optional. Whether all the input CSV files should be split evenly across all engines.
  }, # Optional. The load test configuration.
  testResult: string, # Optional. Test result for pass/Fail criteria used during the test run. possible outcome - ‘Passed’ , ‘Failed’ , ‘Not Applicable’.
  passFailCriteria: {
    passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;, # Optional. Map of id and pass fail metrics { id  : pass fail metrics }.
  }, # Optional. Pass fail criteria for a test.
  testArtifacts: {
    inputArtifacts: {
      configUrl: {
        url: string, # Optional. File URL.
        fileId: string, # Optional. File unique identifier.
        filename: string, # Optional. Name of the file.
        fileType: "0" | "1" | "2", # Optional. Integer representation of the file type (0 = JMX_FILE, 1 = USER_PROPERTIES, 2 = ADDITIONAL_ARTIFACTS)
        expireTime: string (ISO 8601 Format), # Optional. Expiry time of the file
        validationStatus: string, # Optional. Validation status of the file
      }, # Optional. FileUrl Model.
      testScriptUrl: FileUrl, # Optional. FileUrl Model.
      userPropUrl: FileUrl, # Optional. FileUrl Model.
      inputArtifactsZipFileurl: FileUrl, # Optional. FileUrl Model.
      additionalUrls: [FileUrl], # Optional. The input artifacts file { name : url } map for the test run.
    }, # Required. The input artifacts for the test.
    outputArtifacts: {
      resultUrl: FileUrl, # Optional. FileUrl Model.
      logsUrl: FileUrl, # Optional. FileUrl Model.
    }, # Optional. The output artifacts for the test run.
  }, # Optional.
  executedDateTime: string (ISO 8601 Format), # Optional. Test run initiated time
  vusers: number, # Optional. Number of virtual users, for which test has been run.
  testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;, # Optional. Test run statistics
  createdDateTime: string (ISO 8601 Format), # Optional. The created DateTime(ISO 8601 literal format) of the test run.
  createdBy: string, # Optional. The user that created the test run.
  lastModifiedDateTime: string (ISO 8601 Format), # Optional. The last updated  DateTime(ISO 8601 literal format) of the test run.
  lastModifiedBy: string, # Optional. The user that updated the test run.
  portalUrl: string, # Optional. Portal url.
  secrets: Dictionary&lt;string, SecretMetadata&gt;, # Optional. Secrets can be stored in an Azure Key Vault or any other secret store. If the secret is stored in an Azure Key Vault, the value should be the secret identifier and the type should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be provided directly and the type should be SECRET_VALUE.
  environmentVariables: Dictionary&lt;string, string&gt;, # Optional. Environment variables which are defined as a set of &lt;name,value&gt; pairs.
  duration: number, # Optional. Test run duration in milliseconds.
  subnetId: string, # Optional. Subnet ID on which the load test instances should run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="testRunId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="testRunId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopTestRunAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new TestRunClient("<https://my-service.azure.com>", credential);

Response response = await client.StopTestRunAsync("<testRunId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("testRunId").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("testId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("engineInstances").ToString());
Console.WriteLine(result.GetProperty("loadTestConfig").GetProperty("splitAllCSVs").ToString());
Console.WriteLine(result.GetProperty("testResult").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("clientmetric").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("aggregate").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("condition").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("requestName").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("action").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("actualValue").ToString());
Console.WriteLine(result.GetProperty("passFailCriteria").GetProperty("passFailMetrics").GetProperty("<test>").GetProperty("result").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("configUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("testScriptUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("userPropUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("inputArtifactsZipFileurl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("inputArtifacts").GetProperty("additionalUrls")[0].GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("resultUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("filename").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("fileType").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("expireTime").ToString());
Console.WriteLine(result.GetProperty("testArtifacts").GetProperty("outputArtifacts").GetProperty("logsUrl").GetProperty("validationStatus").ToString());
Console.WriteLine(result.GetProperty("executedDateTime").ToString());
Console.WriteLine(result.GetProperty("vusers").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("transaction").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sampleCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorCount").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("errorPct").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("meanResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("medianResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("maxResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("minResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct1ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct2ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("pct3ResTime").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("throughput").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("receivedKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("testRunStatistics").GetProperty("<test>").GetProperty("sentKBytesPerSec").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedBy").ToString());
Console.WriteLine(result.GetProperty("portalUrl").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("secrets").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("environmentVariables").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("duration").ToString());
Console.WriteLine(result.GetProperty("subnetId").ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
