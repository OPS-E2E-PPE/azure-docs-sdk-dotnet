<Type Name="EventHubConsumer" FullName="Azure.Messaging.EventHubs.EventHubConsumer">
  <TypeSignature Language="C#" Value="public class EventHubConsumer : IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventHubConsumer extends System.Object implements class System.IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:Azure.Messaging.EventHubs.EventHubConsumer" />
  <TypeSignature Language="VB.NET" Value="Public Class EventHubConsumer&#xA;Implements IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type EventHubConsumer = class&#xA;    interface IAsyncDisposable" />
  <AssemblyInfo>
    <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
               A consumer responsible for reading <see cref="T:Azure.Messaging.EventHubs.EventData" /> from a specific Event Hub
               partition and as a member of a specific consumer group.
            
               A consumer may be exclusive, which asserts ownership over the partition for the consumer
               group to ensure that only one consumer from that group is reading the from the partition.
               These exclusive consumers are sometimes referred to as "Epoch Consumers."
            
               A consumer may also be non-exclusive, allowing multiple consumers from the same consumer
               group to be actively reading events from the partition.  These non-exclusive consumers are
               sometimes referred to as "Non-Epoch Consumers."
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventHubConsumer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventHubConsumer" /> class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.Close(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Close : System.Threading.CancellationToken -&gt; unit&#xA;override this.Close : System.Threading.CancellationToken -&gt; unit" Usage="eventHubConsumer.Close cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        <summary>
               Closes the consumer.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CloseAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.CloseAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CloseAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CloseAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="eventHubConsumer.CloseAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        <summary>
               Closes the consumer.
             </summary>
        <returns>A task to be resolved on when the operation has completed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsumerGroup">
      <MemberSignature Language="C#" Value="public string ConsumerGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerGroup" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventHubs.EventHubConsumer.ConsumerGroup" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerGroup As String" />
      <MemberSignature Language="F#" Value="member this.ConsumerGroup : string" Usage="Azure.Messaging.EventHubs.EventHubConsumer.ConsumerGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               The name of the consumer group that this consumer is associated with.  Events will be read
               only in the context of this group.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultConsumerGroupName">
      <MemberSignature Language="C#" Value="public const string DefaultConsumerGroupName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultConsumerGroupName" />
      <MemberSignature Language="DocId" Value="F:Azure.Messaging.EventHubs.EventHubConsumer.DefaultConsumerGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultConsumerGroupName As String " />
      <MemberSignature Language="F#" Value="val mutable DefaultConsumerGroupName : string" Usage="Azure.Messaging.EventHubs.EventHubConsumer.DefaultConsumerGroupName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the default consumer group in the Event Hubs service.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="eventHubConsumer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.EventHubs.EventHubClient" />,
               including ensuring that the client itself has been closed.
             </summary>
        <returns>A task to be resolved on when the operation has completed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="eventHubConsumer.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
        <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
        <returns>
          <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHubName">
      <MemberSignature Language="C#" Value="public string EventHubName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EventHubName" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventHubs.EventHubConsumer.EventHubName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventHubName As String" />
      <MemberSignature Language="F#" Value="member this.EventHubName : string" Usage="Azure.Messaging.EventHubs.EventHubConsumer.EventHubName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               The name of the Event Hub that the consumer is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="eventHubConsumer.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
               Returns a hash code for this instance.
             </summary>
        <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public string Identifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Identifier" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventHubs.EventHubConsumer.Identifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Identifier As String" />
      <MemberSignature Language="F#" Value="member this.Identifier : string" Usage="Azure.Messaging.EventHubs.EventHubConsumer.Identifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               The text-based identifier label that has optionally been assigned to the consumer.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerLevel">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; OwnerLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; OwnerLevel" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventHubs.EventHubConsumer.OwnerLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerLevel As Nullable(Of Long)" />
      <MemberSignature Language="F#" Value="member this.OwnerLevel : Nullable&lt;int64&gt;" Usage="Azure.Messaging.EventHubs.EventHubConsumer.OwnerLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               When populated, the priority indicates that a consumer is intended to be the only reader of events for the
               requested partition and an associated consumer group.  To do so, this consumer will attempt to assert ownership
               over the partition; in the case where more than one exclusive consumer attempts to assert ownership for the same
               partition/consumer group pair, the one having a larger ownership level value will "win."
            
               When an exclusive consumer is used, those consumers which are not exclusive or which have a lower owner level will either
               not be allowed to be created, if they already exist, will encounter an exception during the next attempted operation.
             </summary>
        <value>The priority to associated with an exclusive consumer; for a non-exclusive consumer, this value will be <c>null</c>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartitionId">
      <MemberSignature Language="C#" Value="public string PartitionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PartitionId" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventHubs.EventHubConsumer.PartitionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PartitionId As String" />
      <MemberSignature Language="F#" Value="member this.PartitionId : string" Usage="Azure.Messaging.EventHubs.EventHubConsumer.PartitionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               The identifier of the Event Hub partition that this consumer is associated with.  Events will be read
               only from this partition.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;&gt; ReceiveAsync (int maximumMessageCount, Nullable&lt;TimeSpan&gt; maximumWaitTime = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Azure.Messaging.EventHubs.EventData&gt;&gt; ReceiveAsync(int32 maximumMessageCount, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maximumWaitTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.ReceiveAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReceiveAsync : int * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;Azure.Messaging.EventHubs.EventData&gt;&gt;&#xA;override this.ReceiveAsync : int * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;Azure.Messaging.EventHubs.EventData&gt;&gt;" Usage="eventHubConsumer.ReceiveAsync (maximumMessageCount, maximumWaitTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maximumMessageCount" Type="System.Int32" />
        <Parameter Name="maximumWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maximumMessageCount">The maximum number of messages to receive in this batch.</param>
        <param name="maximumWaitTime">The maximum amount of time to wait to build up the requested message count for the batch; if not specified, the default wait time specified when the consumer was created will be used.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        <summary>
               Receives a batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition.
             </summary>
        <returns>The batch of <see cref="T:Azure.Messaging.EventHubs.EventData" /> from the Event Hub partition this consumer is associated with.  If no events are present, an empty enumerable is returned.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RetryPolicy">
      <MemberSignature Language="C#" Value="public Azure.Messaging.EventHubs.EventHubRetryPolicy RetryPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Messaging.EventHubs.EventHubRetryPolicy RetryPolicy" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventHubs.EventHubConsumer.RetryPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryPolicy As EventHubRetryPolicy" />
      <MemberSignature Language="F#" Value="member this.RetryPolicy : Azure.Messaging.EventHubs.EventHubRetryPolicy with get, set" Usage="Azure.Messaging.EventHubs.EventHubConsumer.RetryPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Messaging.EventHubs.EventHubRetryPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               The policy to use for determining retry behavior for when an operation fails.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartingPosition">
      <MemberSignature Language="C#" Value="public Azure.Messaging.EventHubs.EventPosition StartingPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Messaging.EventHubs.EventPosition StartingPosition" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventHubs.EventHubConsumer.StartingPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartingPosition As EventPosition" />
      <MemberSignature Language="F#" Value="member this.StartingPosition : Azure.Messaging.EventHubs.EventPosition" Usage="Azure.Messaging.EventHubs.EventHubConsumer.StartingPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Messaging.EventHubs.EventPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
               The position of the event in the partition where the consumer should begin reading.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToEvents">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt; SubscribeToEvents (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.Messaging.EventHubs.EventData&gt; SubscribeToEvents(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.SubscribeToEvents(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SubscribeToEvents : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;&#xA;override this.SubscribeToEvents : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;" Usage="eventHubConsumer.SubscribeToEvents cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        <summary>
               Subscribes to events for the associated partition in the form of an asynchronous enumerable that sends events as they
               become available on the partition, waiting as necessary should there be no events available.
            
               This version of the enumerator may block for an indeterminate amount of time for an <c>await</c> if events are not available
               on the partition, requiring cancellation via the <paramref name="cancellationToken" /> to be requested in order to return control.
               It is recommended to call the overload which accepts a maximum wait time for scenarios where a more deterministic wait period is
               desired.
             </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to be used for iterating over events in the partition.</returns>
        <remarks>
               Unlike calls to <see cref="M:Azure.Messaging.EventHubs.EventHubConsumer.ReceiveAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />, each subscriber to events is presented with an independent iterator; if there are multiple
               subscribers, they will each receive their own copy of an event to process, rather than competing for them.
            
               Subscriptions will still compete with <see cref="M:Azure.Messaging.EventHubs.EventHubConsumer.ReceiveAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> calls, however.  It is recommended that consumers either subscribe to
               events or explicitly receive batches, but do not use both approaches concurrently.
             </remarks>
        <altmember cref="M:Azure.Messaging.EventHubs.EventHubConsumer.SubscribeToEvents(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      </Docs>
    </Member>
    <Member MemberName="SubscribeToEvents">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt; SubscribeToEvents (Nullable&lt;TimeSpan&gt; maximumWaitTime, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.Messaging.EventHubs.EventData&gt; SubscribeToEvents(valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maximumWaitTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.SubscribeToEvents(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SubscribeToEvents : Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;&#xA;override this.SubscribeToEvents : Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;" Usage="eventHubConsumer.SubscribeToEvents (maximumWaitTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Messaging.EventHubs.EventData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maximumWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maximumWaitTime">The maximum amount of time to wait to for an event to be available before emitting an empty item; if <c>null</c>, empty items will not be published.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        <summary>
               Subscribes to events for the associated partition in the form of an asynchronous enumerable that sends events as they
               become available on the partition, waiting as necessary should there be no events available.
            
               If the <paramref name="maximumWaitTime" /> is passed, if no events were available before the wait time elapsed, an empty
               item will be sent in the enumerable in order to return control and ensure that <c>await</c> calls do not block for an
               indeterminate length of time.
             </summary>
        <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> to be used for iterating over events in the partition.</returns>
        <remarks>
               Unlike calls to <see cref="M:Azure.Messaging.EventHubs.EventHubConsumer.ReceiveAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />, each subscriber to events is presented with an independent iterator; if there are multiple
               subscribers, they will each receive their own copy of an event to process, rather than competing for them.
            
               Subscriptions will still compete with <see cref="M:Azure.Messaging.EventHubs.EventHubConsumer.ReceiveAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> calls, however.  It is recommended that consumers either subscribe to
               events or explicitly receive batches, but do not use both approaches concurrently.
             </remarks>
        <altmember cref="M:Azure.Messaging.EventHubs.EventHubConsumer.SubscribeToEvents(System.Threading.CancellationToken)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.EventHubConsumer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="eventHubConsumer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
               Converts the instance to string representation.
             </summary>
        <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
