<Type Name="CosmosExtensions" FullName="Microsoft.Azure.Cosmos.CosmosExtensions">
  <TypeSignature Language="C#" Value="public static class CosmosExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CosmosExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module CosmosExtensions" />
  <TypeSignature Language="F#" Value="type CosmosExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class provides extension methods used within cosmos sdk code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ToFeedIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt; ToFeedIterator&lt;T&gt; (this System.Linq.IQueryable&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Cosmos.FeedIterator`1&lt;!!T&gt; ToFeedIterator&lt;T&gt;(class System.Linq.IQueryable`1&lt;!!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosExtensions.ToFeedIterator``1(System.Linq.IQueryable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFeedIterator(Of T) (query As IQueryable(Of T)) As FeedIterator(Of T)" />
      <MemberSignature Language="F#" Value="static member ToFeedIterator : System.Linq.IQueryable&lt;'T&gt; -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;'T&gt;" Usage="Microsoft.Azure.Cosmos.CosmosExtensions.ToFeedIterator query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="query">the IQueryable{T} to be converted.</param>
        <summary>
             This extension method gets the FeedIterator from LINQ IQueryable to execute query asynchronously.
             </summary>
        <returns>An iterator to go through the items.</returns>
        <remarks>To be added.</remarks>
        <example>
             This example shows how to get FeedIterator from LINQ.
            
             <code language="c#"><![CDATA[
             IOrderedQueryable<ToDoActivity> linqQueryable = this.Container.GetItemLinqQueryable<ToDoActivity>();
             FeedIterator<ToDoActivity> setIterator = linqQueryable.Where(item => (item.taskNum < 100)).ToFeedIterator()
             ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>