<Type Name="DynamicRequest" FullName="Azure.Core.DynamicRequest">
  <TypeSignature Language="C#" Value="public class DynamicRequest : Azure.Core.Request" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicRequest extends Azure.Core.Request" />
  <TypeSignature Language="DocId" Value="T:Azure.Core.DynamicRequest" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicRequest&#xA;Inherits Request" />
  <TypeSignature Language="F#" Value="type DynamicRequest = class&#xA;    inherit Request" />
  <AssemblyInfo>
    <AssemblyName>Azure.Core.Experimental</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Core.Request</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Body: {Body}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Body: {Body}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents an HTTP request with <see cref="T:Azure.Core.DynamicJson" /> content.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicRequest (Azure.Core.Request request, Azure.Core.Pipeline.HttpPipeline pipeline);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.Request request, class Azure.Core.Pipeline.HttpPipeline pipeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.#ctor(Azure.Core.Request,Azure.Core.Pipeline.HttpPipeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (request As Request, pipeline As HttpPipeline)" />
      <MemberSignature Language="F#" Value="new Azure.Core.DynamicRequest : Azure.Core.Request * Azure.Core.Pipeline.HttpPipeline -&gt; Azure.Core.DynamicRequest" Usage="new Azure.Core.DynamicRequest (request, pipeline)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="request" Type="Azure.Core.Request" />
        <Parameter Name="pipeline" Type="Azure.Core.Pipeline.HttpPipeline" />
      </Parameters>
      <Docs>
        <param name="request">The <see cref="P:Azure.Core.DynamicRequest.Request" /> to send.</param>
        <param name="pipeline">The HTTP pipeline for sending and receiving REST requests and responses.</param>
        <summary>
            Creates an instance of <see cref="T:Azure.Core.RequestContent" /> that wraps <see cref="T:Azure.Core.DynamicJson" /> content.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHeader">
      <MemberSignature Language="C#" Value="protected override void AddHeader (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddHeader(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.AddHeader(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddHeader (name As String, value As String)" />
      <MemberSignature Language="F#" Value="override this.AddHeader : string * string -&gt; unit" Usage="dynamicRequest.AddHeader (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <param name="value">The header value.</param>
        <summary>
            Adds a header value to the header collection.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public Azure.Core.DynamicJson Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.DynamicJson Body" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicRequest.Body" />
      <MemberSignature Language="VB.NET" Value="Public Property Body As DynamicJson" />
      <MemberSignature Language="F#" Value="member this.Body : Azure.Core.DynamicJson with get, set" Usage="Azure.Core.DynamicRequest.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.DynamicJson</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The JSON body of request.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientRequestId">
      <MemberSignature Language="C#" Value="public override string ClientRequestId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientRequestId" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicRequest.ClientRequestId" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ClientRequestId As String" />
      <MemberSignature Language="F#" Value="member this.ClientRequestId : string with get, set" Usage="Azure.Core.DynamicRequest.ClientRequestId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the client request id that was sent to the server as <c>x-ms-client-request-id</c> headers.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsHeader">
      <MemberSignature Language="C#" Value="protected override bool ContainsHeader (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ContainsHeader(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.ContainsHeader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ContainsHeader (name As String) As Boolean" />
      <MemberSignature Language="F#" Value="override this.ContainsHeader : string -&gt; bool" Usage="dynamicRequest.ContainsHeader name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <summary>
            Returns <c>true</c> if the header is stored in the collection.
            </summary>
        <returns>
          <c>true</c> if the specified header is stored in the collection, otherwise <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public override Azure.Core.RequestContent? Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.RequestContent Content" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicRequest.Content" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Content As RequestContent" />
      <MemberSignature Language="F#" Value="member this.Content : Azure.Core.RequestContent with get, set" Usage="Azure.Core.DynamicRequest.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.RequestContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the request content.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Dispose ()" />
      <MemberSignature Language="F#" Value="override this.Dispose : unit -&gt; unit" Usage="dynamicRequest.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Frees resources held by the <see cref="T:Azure.Core.DynamicRequest" /> object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dynamicRequest.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true if we should dispose, otherwise false</param>
        <summary>
            Frees resources held by the <see cref="T:Azure.Core.DynamicRequest" /> object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateHeaders">
      <MemberSignature Language="C#" Value="protected override System.Collections.Generic.IEnumerable&lt;Azure.Core.HttpHeader&gt; EnumerateHeaders ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Core.HttpHeader&gt; EnumerateHeaders() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.EnumerateHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EnumerateHeaders () As IEnumerable(Of HttpHeader)" />
      <MemberSignature Language="F#" Value="override this.EnumerateHeaders : unit -&gt; seq&lt;Azure.Core.HttpHeader&gt;" Usage="dynamicRequest.EnumerateHeaders " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Core.HttpHeader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an iterator enumerating <see cref="T:Azure.Core.HttpHeader" /> in the request.
            </summary>
        <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating <see cref="T:Azure.Core.HttpHeader" /> in the response.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHeader">
      <MemberSignature Language="C#" Value="protected override bool RemoveHeader (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RemoveHeader(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.RemoveHeader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RemoveHeader (name As String) As Boolean" />
      <MemberSignature Language="F#" Value="override this.RemoveHeader : string -&gt; bool" Usage="dynamicRequest.RemoveHeader name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <summary>
            Removes the header from the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public Azure.Core.DynamicResponse Send (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Azure.Core.DynamicResponse Send(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.Send(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (Optional cancellationToken As CancellationToken = Nothing) As DynamicResponse" />
      <MemberSignature Language="F#" Value="member this.Send : System.Threading.CancellationToken -&gt; Azure.Core.DynamicResponse" Usage="dynamicRequest.Send cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.DynamicResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Send the request synchronously.
            </summary>
        <returns>The response dynamically typed in a <see cref="T:Azure.Core.DynamicResponse" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Azure.Core.DynamicResponse&gt; SendAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Azure.Core.DynamicResponse&gt; SendAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.SendAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of DynamicResponse)" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Core.DynamicResponse&gt;" Usage="dynamicRequest.SendAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Core.DynamicResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Send the request asynchronously.
            </summary>
        <returns>The response dynamically typed in a <see cref="T:Azure.Core.DynamicResponse" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetHeader">
      <MemberSignature Language="C#" Value="protected override bool TryGetHeader (string name, out string? value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryGetHeader(string name, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.TryGetHeader(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TryGetHeader (name As String, ByRef value As String) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TryGetHeader : string * string -&gt; bool" Usage="dynamicRequest.TryGetHeader (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <param name="value">The reference to populate with value.</param>
        <summary>
            Returns header value if the header is stored in the collection. If the header has multiple values they are going to be joined with a comma.
            </summary>
        <returns>
          <c>true</c> if the specified header is stored in the collection, otherwise <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetHeaderValues">
      <MemberSignature Language="C#" Value="protected override bool TryGetHeaderValues (string name, out System.Collections.Generic.IEnumerable&lt;string&gt;? values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryGetHeaderValues(string name, [out] class System.Collections.Generic.IEnumerable`1&lt;string&gt;&amp; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicRequest.TryGetHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TryGetHeaderValues (name As String, ByRef values As IEnumerable(Of String)) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TryGetHeaderValues : string * seq -&gt; bool" Usage="dynamicRequest.TryGetHeaderValues (name, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <param name="values">The reference to populate with values.</param>
        <summary>
            Returns header values if the header is stored in the collection.
            </summary>
        <returns>
          <c>true</c> if the specified header is stored in the collection, otherwise <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
