<Type Name="DynamicResponse" FullName="Azure.Core.DynamicResponse">
  <TypeSignature Language="C#" Value="public class DynamicResponse : Azure.Response" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicResponse extends Azure.Response" />
  <TypeSignature Language="DocId" Value="T:Azure.Core.DynamicResponse" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicResponse&#xA;Inherits Response" />
  <TypeSignature Language="F#" Value="type DynamicResponse = class&#xA;    inherit Response" />
  <AssemblyInfo>
    <AssemblyName>Azure.Core.Experimental</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Response</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Status: {Response.Status}, Value: {Value}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Status: {Response.Status}, Value: {Value}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a result of Azure operation with a <see cref="T:Azure.Core.DynamicJson" /> response.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicResponse (Azure.Response response, Azure.Core.DynamicJson? body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Response response, class Azure.Core.DynamicJson body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicResponse.#ctor(Azure.Response,Azure.Core.DynamicJson)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (response As Response, body As DynamicJson)" />
      <MemberSignature Language="F#" Value="new Azure.Core.DynamicResponse : Azure.Response * Azure.Core.DynamicJson -&gt; Azure.Core.DynamicResponse" Usage="new Azure.Core.DynamicResponse (response, body)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="response" Type="Azure.Response" />
        <Parameter Name="body" Type="Azure.Core.DynamicJson" />
      </Parameters>
      <Docs>
        <param name="response">The response returned by the service.</param>
        <param name="body">The body returned by the service.</param>
        <summary>
            Represents a result of Azure operation with a <see cref="T:Azure.Core.DynamicJson" /> response.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public Azure.Core.DynamicJson? Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.DynamicJson Body" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicResponse.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As DynamicJson" />
      <MemberSignature Language="F#" Value="member this.Body : Azure.Core.DynamicJson" Usage="Azure.Core.DynamicResponse.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.DynamicJson</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The JSON body of the response.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientRequestId">
      <MemberSignature Language="C#" Value="public override string ClientRequestId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientRequestId" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicResponse.ClientRequestId" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ClientRequestId As String" />
      <MemberSignature Language="F#" Value="member this.ClientRequestId : string with get, set" Usage="Azure.Core.DynamicResponse.ClientRequestId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the client request id that was sent to the server as <c>x-ms-client-request-id</c> headers.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsHeader">
      <MemberSignature Language="C#" Value="protected override bool ContainsHeader (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ContainsHeader(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicResponse.ContainsHeader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ContainsHeader (name As String) As Boolean" />
      <MemberSignature Language="F#" Value="override this.ContainsHeader : string -&gt; bool" Usage="dynamicResponse.ContainsHeader name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <summary>
            Returns <c>true</c> if the header is stored in the collection.
            </summary>
        <returns>
          <c>true</c> if the specified header is stored in the collection, otherwise <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream? ContentStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream ContentStream" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicResponse.ContentStream" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContentStream As Stream" />
      <MemberSignature Language="F#" Value="member this.ContentStream : System.IO.Stream with get, set" Usage="Azure.Core.DynamicResponse.ContentStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the contents of HTTP response. Returns <c>null</c> for responses without content.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicResponse.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Dispose ()" />
      <MemberSignature Language="F#" Value="override this.Dispose : unit -&gt; unit" Usage="dynamicResponse.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Frees resources held by the <see cref="T:Azure.Core.DynamicResponse" /> object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicResponse.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dynamicResponse.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true if we should dispose, otherwise false</param>
        <summary>
            Frees resources held by the <see cref="T:Azure.Core.DynamicResponse" /> object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateHeaders">
      <MemberSignature Language="C#" Value="protected override System.Collections.Generic.IEnumerable&lt;Azure.Core.HttpHeader&gt; EnumerateHeaders ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Core.HttpHeader&gt; EnumerateHeaders() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicResponse.EnumerateHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EnumerateHeaders () As IEnumerable(Of HttpHeader)" />
      <MemberSignature Language="F#" Value="override this.EnumerateHeaders : unit -&gt; seq&lt;Azure.Core.HttpHeader&gt;" Usage="dynamicResponse.EnumerateHeaders " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Core.HttpHeader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an iterator for enumerating <see cref="T:Azure.Core.HttpHeader" /> in the response.
            </summary>
        <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating <see cref="T:Azure.Core.HttpHeader" /> in the response.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReasonPhrase">
      <MemberSignature Language="C#" Value="public override string ReasonPhrase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReasonPhrase" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicResponse.ReasonPhrase" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReasonPhrase As String" />
      <MemberSignature Language="F#" Value="member this.ReasonPhrase : string" Usage="Azure.Core.DynamicResponse.ReasonPhrase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the HTTP reason phrase.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public override int Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Status" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.DynamicResponse.Status" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Status As Integer" />
      <MemberSignature Language="F#" Value="member this.Status : int" Usage="Azure.Core.DynamicResponse.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the HTTP status code.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetHeader">
      <MemberSignature Language="C#" Value="protected override bool TryGetHeader (string name, out string? value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryGetHeader(string name, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicResponse.TryGetHeader(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TryGetHeader (name As String, ByRef value As String) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TryGetHeader : string * string -&gt; bool" Usage="dynamicResponse.TryGetHeader (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <param name="value">The reference to populate with value.</param>
        <summary>
            Returns header value if the header is stored in the collection. If header has multiple values they are going to be joined with a comma.
            </summary>
        <returns>
          <c>true</c> if the specified header is stored in the collection, otherwise <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetHeaderValues">
      <MemberSignature Language="C#" Value="protected override bool TryGetHeaderValues (string name, out System.Collections.Generic.IEnumerable&lt;string&gt;? values);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TryGetHeaderValues(string name, [out] class System.Collections.Generic.IEnumerable`1&lt;string&gt;&amp; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.DynamicResponse.TryGetHeaderValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TryGetHeaderValues (name As String, ByRef values As IEnumerable(Of String)) As Boolean" />
      <MemberSignature Language="F#" Value="override this.TryGetHeaderValues : string * seq -&gt; bool" Usage="dynamicResponse.TryGetHeaderValues (name, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">The header name.</param>
        <param name="values">The reference to populate with values.</param>
        <summary>
            Returns header values if the header is stored in the collection.
            </summary>
        <returns>
          <c>true</c> if the specified header is stored in the collection, otherwise <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
