<Type Name="DataLakeFileSystemClient" FullName="Azure.Storage.Files.DataLake.DataLakeFileSystemClient">
  <TypeSignature Language="C#" Value="public class DataLakeFileSystemClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataLakeFileSystemClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
  <TypeSignature Language="VB.NET" Value="Public Class DataLakeFileSystemClient" />
  <TypeSignature Language="F#" Value="type DataLakeFileSystemClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> allows you to manipulate Azure
            Data Lake file systems and their directories and files.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataLakeFileSystemClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeFileSystemClient (Uri fileSystemUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri fileSystemUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileSystemUri As Uri)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient : Uri -&gt; Azure.Storage.Files.DataLake.DataLakeFileSystemClient" Usage="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient fileSystemUri" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileSystemUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeFileSystemClient (Uri fileSystemUri, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri fileSystemUri, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileSystemUri As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Storage.Files.DataLake.DataLakeFileSystemClient" Usage="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient (fileSystemUri, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileSystemUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeFileSystemClient (Uri fileSystemUri, Azure.Storage.Files.DataLake.DataLakeClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri fileSystemUri, class Azure.Storage.Files.DataLake.DataLakeClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileSystemUri As Uri, options As DataLakeClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient : Uri * Azure.Storage.Files.DataLake.DataLakeClientOptions -&gt; Azure.Storage.Files.DataLake.DataLakeFileSystemClient" Usage="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient (fileSystemUri, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileSystemUri" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Storage.Files.DataLake.DataLakeClientOptions" />
      </Parameters>
      <Docs>
        <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeFileSystemClient (Uri fileSystemUri, Azure.Storage.StorageSharedKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri fileSystemUri, class Azure.Storage.StorageSharedKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileSystemUri As Uri, credential As StorageSharedKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient : Uri * Azure.Storage.StorageSharedKeyCredential -&gt; Azure.Storage.Files.DataLake.DataLakeFileSystemClient" Usage="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient (fileSystemUri, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileSystemUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
      </Parameters>
      <Docs>
        <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeFileSystemClient (Uri fileSystemUri, Azure.Core.TokenCredential credential, Azure.Storage.Files.DataLake.DataLakeClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri fileSystemUri, class Azure.Core.TokenCredential credential, class Azure.Storage.Files.DataLake.DataLakeClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileSystemUri As Uri, credential As TokenCredential, options As DataLakeClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient : Uri * Azure.Core.TokenCredential * Azure.Storage.Files.DataLake.DataLakeClientOptions -&gt; Azure.Storage.Files.DataLake.DataLakeFileSystemClient" Usage="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient (fileSystemUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileSystemUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Storage.Files.DataLake.DataLakeClientOptions" />
      </Parameters>
      <Docs>
        <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeFileSystemClient (Uri fileSystemUri, Azure.Storage.StorageSharedKeyCredential credential, Azure.Storage.Files.DataLake.DataLakeClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri fileSystemUri, class Azure.Storage.StorageSharedKeyCredential credential, class Azure.Storage.Files.DataLake.DataLakeClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileSystemUri As Uri, credential As StorageSharedKeyCredential, options As DataLakeClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient : Uri * Azure.Storage.StorageSharedKeyCredential * Azure.Storage.Files.DataLake.DataLakeClientOptions -&gt; Azure.Storage.Files.DataLake.DataLakeFileSystemClient" Usage="new Azure.Storage.Files.DataLake.DataLakeFileSystemClient (fileSystemUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileSystemUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
        <Parameter Name="options" Type="Azure.Storage.Files.DataLake.DataLakeClientOptions" />
      </Parameters>
      <Docs>
        <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccountName">
      <MemberSignature Language="C#" Value="public virtual string AccountName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccountName" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.AccountName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AccountName As String" />
      <MemberSignature Language="F#" Value="member this.AccountName : string" Usage="Azure.Storage.Files.DataLake.DataLakeFileSystemClient.AccountName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Storage account name corresponding to the share client.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt; Create (Azure.Storage.Files.DataLake.Models.PublicAccessType publicAccessType = Azure.Storage.Files.DataLake.Models.PublicAccessType.None, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt; Create(valuetype Azure.Storage.Files.DataLake.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Create(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Storage.Files.DataLake.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&#xA;override this.Create : Azure.Storage.Files.DataLake.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;" Usage="dataLakeFileSystemClient.Create (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Files.DataLake.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate blobs within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Create(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new file system
             under the specified account. If the container with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt; CreateAsync (Azure.Storage.Files.DataLake.Models.PublicAccessType publicAccessType = Azure.Storage.Files.DataLake.Models.PublicAccessType.None, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt; CreateAsync(valuetype Azure.Storage.Files.DataLake.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Storage.Files.DataLake.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;&#xA;override this.CreateAsync : Azure.Storage.Files.DataLake.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;" Usage="dataLakeFileSystemClient.CreateAsync (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Files.DataLake.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and blob data.
             Clients can enumerate blobs within the file system via anonymous
             request, but cannot enumerate file system within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for blobs.  Blob data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate blobs within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new file system
             under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created file system.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt; CreateDirectory (string path, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, string permissions = null, string umask = null, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt; CreateDirectory(string path, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateDirectory : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&#xA;override this.CreateDirectory : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;" Usage="dataLakeFileSystemClient.CreateDirectory (path, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a directory in this file system.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created page blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt; CreateDirectoryAsync (string path, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, string permissions = null, string umask = null, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt; CreateDirectoryAsync(string path, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateDirectoryAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;&#xA;override this.CreateDirectoryAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;" Usage="dataLakeFileSystemClient.CreateDirectoryAsync (path, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a directory in this file system.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created page blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt; CreateFile (string path, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, string permissions = null, string umask = null, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeFileClient&gt; CreateFile(string path, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateFile : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&#xA;override this.CreateFile : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;" Usage="dataLakeFileSystemClient.CreateFile (path, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the file to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created page blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt; CreateFileAsync (string path, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = null, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = null, string permissions = null, string umask = null, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt; CreateFileAsync(string path, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateFileAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt;&#xA;override this.CreateFileAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt;" Usage="dataLakeFileSystemClient.CreateFileAsync (path, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the file to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> creates a file in this file system
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created page blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Delete : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataLakeFileSystemClient.Delete (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             file system for deletion. The file system and any blobs contained
             within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataLakeFileSystemClient.DeleteAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this cofile systemntainer.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             file system for deletion. The file system and any blobs contained
             within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteDirectory (string path, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteDirectory(string path, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDirectory : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteDirectory : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataLakeFileSystemClient.DeleteDirectory (path, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to delete.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteDirectoryAsync (string path, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteDirectoryAsync(string path, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDirectoryAsync : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteDirectoryAsync : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataLakeFileSystemClient.DeleteDirectoryAsync (path, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to delete.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a directory in this file system.
             garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteFile (string path, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteFile(string path, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteFile : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteFile : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataLakeFileSystemClient.DeleteFile (path, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the file to delete.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a file in this file system.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteFileAsync (string path, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteFileAsync(string path, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteFileAsync : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteFileAsync : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataLakeFileSystemClient.DeleteFileAsync (path, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the file to delete.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a file in this file system.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt; GetAccessPolicy (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt; GetAccessPolicy(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicy(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessPolicy : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;&#xA;override this.GetAccessPolicy : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;" Usage="dataLakeFileSystemClient.GetAccessPolicy (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicy(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation gets the
             permissions for this file system. The permissions indicate whether
             file system data may be accessed publicly.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the filesystems's access policy.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;&gt; GetAccessPolicyAsync (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;&gt; GetAccessPolicyAsync(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessPolicyAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;&gt;&#xA;override this.GetAccessPolicyAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;&gt;" Usage="dataLakeFileSystemClient.GetAccessPolicyAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation gets the
             permissions for this file system. The permissions indicate whether
             file system data may be accessed publicly.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the file system's access policy.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Files.DataLake.DataLakeDirectoryClient GetDirectoryClient (string directoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Files.DataLake.DataLakeDirectoryClient GetDirectoryClient(string directoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetDirectoryClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectoryClient (directoryName As String) As DataLakeDirectoryClient" />
      <MemberSignature Language="F#" Value="abstract member GetDirectoryClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient&#xA;override this.GetDirectoryClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="dataLakeFileSystemClient.GetDirectoryClient directoryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Files.DataLake.DataLakeDirectoryClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryName">The name of the directory.</param>
        <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> object by appending
            <paramref name="directoryName" /> to the end of <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />.  The
            new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Files.DataLake.DataLakeFileClient GetFileClient (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Files.DataLake.DataLakeFileClient GetFileClient(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetFileClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileClient (fileName As String) As DataLakeFileClient" />
      <MemberSignature Language="F#" Value="abstract member GetFileClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeFileClient&#xA;override this.GetFileClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeFileClient" Usage="dataLakeFileSystemClient.GetFileClient fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Files.DataLake.DataLakeFileClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the directory.</param>
        <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> object by appending
            <paramref name="fileName" /> to the end of <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />.  The
            new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" />.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPaths">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt; GetPaths (string path = null, bool recursive = false, bool userPrincipalName = false, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Storage.Files.DataLake.Models.PathItem&gt; GetPaths(string path, bool recursive, bool userPrincipalName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPaths(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPaths : string * bool * bool * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt;&#xA;override this.GetPaths : string * bool * bool * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt;" Usage="dataLakeFileSystemClient.GetPaths (path, recursive, userPrincipalName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
        <Parameter Name="userPrincipalName" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             Filters results to paths within the specified directory.
             </param>
        <param name="recursive">
             If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.
             </param>
        <param name="userPrincipalName">
             Optional. Valid only when Hierarchical Namespace is enabled for the account. If
             "true", the user identity values returned in the owner and group fields of each list
             entry will be transformed from Azure Active Directory Object IDs to User Principal
             Names. If "false", the values will be returned as Azure Active Directory Object IDs.
             The default value is false. Note that group and application Object IDs are not translated
             because they do not have unique friendly names.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPaths(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)" /> operation returns an async sequence
             of paths in this file system.  Enumerating the paths may make
             multiple requests to the service while fetching all the values.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/list" />.
             </summary>
        <returns>
             An <see cref="T:Azure.Pageable`1" /> of <see cref="T:Azure.Storage.Blobs.Models.BlobItem" />
             describing the paths in the file system.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt; GetPathsAsync (string path = null, bool recursive = false, bool userPrincipalName = false, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Storage.Files.DataLake.Models.PathItem&gt; GetPathsAsync(string path, bool recursive, bool userPrincipalName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathsAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPathsAsync : string * bool * bool * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt;&#xA;override this.GetPathsAsync : string * bool * bool * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt;" Usage="dataLakeFileSystemClient.GetPathsAsync (path, recursive, userPrincipalName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Storage.Files.DataLake.Models.PathItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
        <Parameter Name="userPrincipalName" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             Filters results to paths within the specified directory.
             </param>
        <param name="recursive">
             If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.
             </param>
        <param name="userPrincipalName">
             Optional. Valid only when Hierarchical Namespace is enabled for the account. If
             "true", the user identity values returned in the owner and group fields of each list
             entry will be transformed from Azure Active Directory Object IDs to User Principal
             Names. If "false", the values will be returned as Azure Active Directory Object IDs.
             The default value is false. Note that group and application Object IDs are not translated
             because they do not have unique friendly names.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathsAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)" /> operation returns an async
             sequence of paths in this file system.  Enumerating the paths may
             make multiple requests to the service while fetching all the
             values.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/list" />.
             </summary>
        <returns>
             An <see cref="T:Azure.AsyncPageable`1" /> describing the
             paths in the file system.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt; GetProperties (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt; GetProperties(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;&#xA;override this.GetProperties : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;" Usage="dataLakeFileSystemClient.GetProperties (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             file system. The data returned does not include the file system's
             list of blobs.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             file system and its properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;&gt; GetPropertiesAsync (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;&gt; GetPropertiesAsync(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetPropertiesAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;&gt;&#xA;override this.GetPropertiesAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;&gt;" Usage="dataLakeFileSystemClient.GetPropertiesAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemProperties&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             file system. The data returned does not include the file system's
             list of blobs.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             file system and its properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the file system.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="protected virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Azure.Core.Pipeline.HttpPipeline" /> transport pipeline used to send
            every request.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt; SetAccessPolicy (Azure.Storage.Files.DataLake.Models.PublicAccessType accessType = Azure.Storage.Files.DataLake.Models.PublicAccessType.None, System.Collections.Generic.IEnumerable&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; permissions = null, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt; SetAccessPolicy(valuetype Azure.Storage.Files.DataLake.Models.PublicAccessType accessType, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; permissions, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicy(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetAccessPolicy : Azure.Storage.Files.DataLake.Models.PublicAccessType * seq&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&#xA;override this.SetAccessPolicy : Azure.Storage.Files.DataLake.Models.PublicAccessType * seq&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;" Usage="dataLakeFileSystemClient.SetAccessPolicy (accessType, permissions, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessType" Type="Azure.Storage.Files.DataLake.Models.PublicAccessType" />
        <Parameter Name="permissions" Type="System.Collections.Generic.IEnumerable&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file systems within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for paths.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate paths within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
        <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over file system permissions.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on setting this file systems's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicy(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified file system. The permissions indicate
             whether file system data may be accessed publicly.
            
             For more information, see <see href=" https://docs.microsoft.com/rest/api/storageservices/set-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt; SetAccessPolicyAsync (Azure.Storage.Files.DataLake.Models.PublicAccessType accessType = Azure.Storage.Files.DataLake.Models.PublicAccessType.None, System.Collections.Generic.IEnumerable&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; permissions = null, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt; SetAccessPolicyAsync(valuetype Azure.Storage.Files.DataLake.Models.PublicAccessType accessType, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; permissions, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetAccessPolicyAsync : Azure.Storage.Files.DataLake.Models.PublicAccessType * seq&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;&#xA;override this.SetAccessPolicyAsync : Azure.Storage.Files.DataLake.Models.PublicAccessType * seq&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;" Usage="dataLakeFileSystemClient.SetAccessPolicyAsync (accessType, permissions, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessType" Type="Azure.Storage.Files.DataLake.Models.PublicAccessType" />
        <Parameter Name="permissions" Type="System.Collections.Generic.IEnumerable&lt;Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file systems within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for paths.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate paths within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
        <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over file system permissions.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on setting this file system's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified file system. The permissions indicate
             whether the file system data may be accessed publicly.
            
             For more information, see <see href=" https://docs.microsoft.com/rest/api/storageservices/set-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated file system.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt; SetMetadata (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt; SetMetadata(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&#xA;override this.SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;" Usage="dataLakeFileSystemClient.SetMetadata (metadata, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this file system.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified file system.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt; SetMetadataAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt; SetMetadataAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;&#xA;override this.SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;" Usage="dataLakeFileSystemClient.SetMetadataAsync (metadata, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.FileSystemInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this file system.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified file system.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public virtual Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Uri As Uri" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the file systems's primary <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
