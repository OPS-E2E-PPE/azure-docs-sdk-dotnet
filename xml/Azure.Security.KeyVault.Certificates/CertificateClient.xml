<Type Name="CertificateClient" FullName="Azure.Security.KeyVault.Certificates.CertificateClient">
  <TypeSignature Language="C#" Value="public class CertificateClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CertificateClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Security.KeyVault.Certificates.CertificateClient" />
  <TypeSignature Language="VB.NET" Value="Public Class CertificateClient" />
  <TypeSignature Language="F#" Value="type CertificateClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The CertificateClient provides synchronous and asynchronous methods to manage <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />s in Azure Key Vault. The client
            supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />, along with managing 
            certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" />s and <see cref="T:Azure.Security.KeyVault.Certificates.Contact" />s. The client also supports listing <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> for a soft-delete 
            enabled key vault.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CertificateClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Protected constructor for mocking
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CertificateClient (Uri vaultUri, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri vaultUri, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vaultUri As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Security.KeyVault.Certificates.CertificateClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Security.KeyVault.Certificates.CertificateClient" Usage="new Azure.Security.KeyVault.Certificates.CertificateClient (vaultUri, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vaultUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="vaultUri">The vault on which the certificate client operates</param>
        <param name="credential">The credential used to authenticate requests to the vault</param>
        <summary>
            Creates a new certificate client for the specified vault.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CertificateClient (Uri vaultUri, Azure.Core.TokenCredential credential, Azure.Security.KeyVault.Certificates.CertificateClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri vaultUri, class Azure.Core.TokenCredential credential, class Azure.Security.KeyVault.Certificates.CertificateClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.KeyVault.Certificates.CertificateClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (vaultUri As Uri, credential As TokenCredential, options As CertificateClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Security.KeyVault.Certificates.CertificateClient : Uri * Azure.Core.TokenCredential * Azure.Security.KeyVault.Certificates.CertificateClientOptions -&gt; Azure.Security.KeyVault.Certificates.CertificateClient" Usage="new Azure.Security.KeyVault.Certificates.CertificateClient (vaultUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="vaultUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Security.KeyVault.Certificates.CertificateClientOptions" />
      </Parameters>
      <Docs>
        <param name="vaultUri">The vault on which the certificate client operates</param>
        <param name="credential">The credential used to authenticate requests to the vault</param>
        <param name="options">Options that allow to configure the requests sent to Key Vault.</param>
        <summary>
            Creates a new certificate client for the specified vault.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackupCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;byte[]&gt; BackupCertificate (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;unsigned int8[]&gt; BackupCertificate(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member BackupCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;byte[]&gt;&#xA;override this.BackupCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;byte[]&gt;" Usage="certificateClient.BackupCertificate (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to backup</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Creates a backup of the certificate, including all versions, which can be used to restore the certificate to the state at the time of the backup in the case the certificate is deleted, or to 
            restore the certificate to a different vault in the same region as the original value. This operation requires the certificate/backup permission.
            </summary>
        <returns>The certificate backup</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackupCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;byte[]&gt;&gt; BackupCertificateAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;unsigned int8[]&gt;&gt; BackupCertificateAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificateAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member BackupCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;byte[]&gt;&gt;&#xA;override this.BackupCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;byte[]&gt;&gt;" Usage="certificateClient.BackupCertificateAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Byte[]&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to backup</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Creates a backup of the certificate, including all versions, which can be used to restore the certificate to the state at the time of the backup in the case the certificate is deleted, or to 
            restore the certificate to a different vault in the same region as the original value. This operation requires the certificate/backup permission.
            </summary>
        <returns>The certificate backup</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelCertificateOperation">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.KeyVault.Certificates.CertificateOperation CancelCertificateOperation (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.KeyVault.Certificates.CertificateOperation CancelCertificateOperation(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.CancelCertificateOperation(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CancelCertificateOperation : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation&#xA;override this.CancelCertificateOperation : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation" Usage="certificateClient.CancelCertificateOperation (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.KeyVault.Certificates.CertificateOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to cancel the current pending operation of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Cancels a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault.  This operation requires the certificates/update permission.
            </summary>
        <returns>The canceled certificate operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelCertificateOperationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt; CancelCertificateOperationAsync (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.KeyVault.Certificates.CertificateOperation&gt; CancelCertificateOperationAsync(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.CancelCertificateOperationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CancelCertificateOperationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;&#xA;override this.CancelCertificateOperationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;" Usage="certificateClient.CancelCertificateOperationAsync (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to cancel the current pending operation of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Cancels a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault.  This operation requires the certificates/update permission.
            </summary>
        <returns>The canceled certificate operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIssuer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt; CreateIssuer (Azure.Security.KeyVault.Certificates.Issuer issuer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt; CreateIssuer(class Azure.Security.KeyVault.Certificates.Issuer issuer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuer(Azure.Security.KeyVault.Certificates.Issuer,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateIssuer : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&#xA;override this.CreateIssuer : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;" Usage="certificateClient.CreateIssuer (issuer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="Azure.Security.KeyVault.Certificates.Issuer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to add or replace in the vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Creates or replaces a certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> in the key vault. This operation requires the certificates/setissuers permission.
            </summary>
        <returns>The created certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIssuerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; CreateIssuerAsync (Azure.Security.KeyVault.Certificates.Issuer issuer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; CreateIssuerAsync(class Azure.Security.KeyVault.Certificates.Issuer issuer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuerAsync(Azure.Security.KeyVault.Certificates.Issuer,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateIssuerAsync : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;&#xA;override this.CreateIssuerAsync : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;" Usage="certificateClient.CreateIssuerAsync (issuer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="Azure.Security.KeyVault.Certificates.Issuer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to add or replace in the vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Creates or replaces a certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> in the key vault. This operation requires the certificates/setissuers permission.
            </summary>
        <returns>The created certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt; DeleteCertificate (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.DeletedCertificate&gt; DeleteCertificate(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteCertificate(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&#xA;override this.DeleteCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;" Usage="certificateClient.DeleteCertificate (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to delete</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Deletes all versions of the specified <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />. If the vault is soft delete enabled, the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> will be marked for perminent deletion 
            and can be recovered with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.RecoverDeletedCertificate(System.String,System.Threading.CancellationToken)" />, or purged with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate(System.String,System.Threading.CancellationToken)" />. This operation requires the certificates/delete permission.
            </summary>
        <returns>The details of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; DeleteCertificateAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; DeleteCertificateAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteCertificateAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;&#xA;override this.DeleteCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;" Usage="certificateClient.DeleteCertificateAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to delete</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Deletes all versions of the specified <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />. If the vault is soft delete enabled, the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> will be marked for perminent deletion 
            and can be recovered with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.RecoverDeletedCertificate(System.String,System.Threading.CancellationToken)" />, or purged with <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate(System.String,System.Threading.CancellationToken)" />. This operation requires the certificates/delete permission.
            </summary>
        <returns>The details of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificateOperation">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.KeyVault.Certificates.CertificateOperation DeleteCertificateOperation (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.KeyVault.Certificates.CertificateOperation DeleteCertificateOperation(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteCertificateOperation(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCertificateOperation : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation&#xA;override this.DeleteCertificateOperation : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation" Usage="certificateClient.DeleteCertificateOperation (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.KeyVault.Certificates.CertificateOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to delete the current pending operation of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Deletes a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault.  This operation requires the certificates/delete permission.
            </summary>
        <returns>The deleted certificate operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificateOperationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt; DeleteCertificateOperationAsync (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.KeyVault.Certificates.CertificateOperation&gt; DeleteCertificateOperationAsync(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteCertificateOperationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCertificateOperationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;&#xA;override this.DeleteCertificateOperationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;" Usage="certificateClient.DeleteCertificateOperationAsync (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to delete the current pending operation of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Deletes a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> in the key vault.  This operation requires the certificates/delete permission.
            </summary>
        <returns>The deleted certificate operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteContacts">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt; DeleteContacts (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class System.Collections.Generic.IList`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt;&gt; DeleteContacts(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteContacts(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteContacts : System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&#xA;override this.DeleteContacts : System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;" Usage="certificateClient.DeleteContacts cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Delets all certificate <see cref="T:Azure.Security.KeyVault.Certificates.Contact" />s from the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
        <returns>The certificate contacts deleted from the vault</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteContactsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt; DeleteContactsAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class System.Collections.Generic.IList`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt; DeleteContactsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteContactsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteContactsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;&#xA;override this.DeleteContactsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;" Usage="certificateClient.DeleteContactsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Delets all certificate <see cref="T:Azure.Security.KeyVault.Certificates.Contact" />s from the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
        <returns>The certificate contacts deleted from the vault</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteIssuer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt; DeleteIssuer (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt; DeleteIssuer(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteIssuer(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteIssuer : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&#xA;override this.DeleteIssuer : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;" Usage="certificateClient.DeleteIssuer (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to delete</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Deletes the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> from the vault. This operation requires the certificates/deleteissuers permission.
            </summary>
        <returns>The deleted certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteIssuerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; DeleteIssuerAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; DeleteIssuerAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.DeleteIssuerAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteIssuerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;&#xA;override this.DeleteIssuerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;" Usage="certificateClient.DeleteIssuerAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to delete</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Deletes the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> from the vault. This operation requires the certificates/deleteissuers permission.
            </summary>
        <returns>The deleted certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt; GetCertificate (string name, string version, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Certificate&gt; GetCertificate(string name, string version, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificate(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificate : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&#xA;override this.GetCertificate : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;" Usage="certificateClient.GetCertificate (name, version, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve</param>
        <param name="version">Ther version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Gets a specific version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />. This operation requires the certificates/get permission.
            </summary>
        <returns>The requested <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt; GetCertificateAsync (string name, string version, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Certificate&gt;&gt; GetCertificateAsync(string name, string version, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt;&#xA;override this.GetCertificateAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt;" Usage="certificateClient.GetCertificateAsync (name, version, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve</param>
        <param name="version">Ther version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Gets a specific version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />. This operation requires the certificates/get permission.
            </summary>
        <returns>The requested <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateOperation">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.KeyVault.Certificates.CertificateOperation GetCertificateOperation (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.KeyVault.Certificates.CertificateOperation GetCertificateOperation(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateOperation(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateOperation : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation&#xA;override this.GetCertificateOperation : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation" Usage="certificateClient.GetCertificateOperation (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.KeyVault.Certificates.CertificateOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve the current pending operation of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Gets a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> from the key vault.  This operation requires the certificates/get permission.
            </summary>
        <returns>The given certificates current pending operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateOperationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt; GetCertificateOperationAsync (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.KeyVault.Certificates.CertificateOperation&gt; GetCertificateOperationAsync(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateOperationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateOperationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;&#xA;override this.GetCertificateOperationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;" Usage="certificateClient.GetCertificateOperationAsync (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve the current pending operation of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Gets a pending <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> from the key vault.  This operation requires the certificates/get permission.
            </summary>
        <returns>The given certificates current pending operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificatePolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt; GetCertificatePolicy (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificatePolicy&gt; GetCertificatePolicy(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificatePolicy(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificatePolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&#xA;override this.GetCertificatePolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;" Usage="certificateClient.GetCertificatePolicy (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the certificate to retrieve the policy of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Retrieves the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/get permission.
            </summary>
        <returns>The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificatePolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt; GetCertificatePolicyAsync (string certificateName, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt; GetCertificatePolicyAsync(string certificateName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificatePolicyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificatePolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt;&#xA;override this.GetCertificatePolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt;" Usage="certificateClient.GetCertificatePolicyAsync (certificateName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the certificate to retrieve the policy of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Retrieves the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/get permission.
            </summary>
        <returns>The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificates">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificates (Nullable&lt;bool&gt; includePending = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificates(valuetype System.Nullable`1&lt;bool&gt; includePending, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificates(System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificates : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;&#xA;override this.GetCertificates : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;" Usage="certificateClient.GetCertificates (includePending, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePending" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="includePending">Specifies whether to include certificates in a pending state as well</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the certificates in the vault, returning select properties of the certificate, sensative feilds of the certificate will not be returned.  This operation requires the certificates/list permission.
            </summary>
        <returns>An enumerable collection of certificate metadata</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificatesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificatesAsync (Nullable&lt;bool&gt; includePending = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificatesAsync(valuetype System.Nullable`1&lt;bool&gt; includePending, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificatesAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificatesAsync : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;&#xA;override this.GetCertificatesAsync : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;" Usage="certificateClient.GetCertificatesAsync (includePending, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePending" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="includePending">Specifies whether to include certificates in a pending state as well</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the certificates in the vault, returning select properties of the certificate, sensative feilds of the certificate will not be returned.  This operation requires the certificates/list permission.
            </summary>
        <returns>An enumerable collection of certificate metadata</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateVersions">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificateVersions (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificateVersions(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersions(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateVersions : string * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;&#xA;override this.GetCertificateVersions : string * System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;" Usage="certificateClient.GetCertificateVersions (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the certificate to retrieve the versions of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the versions of a specific certificate in the vault, returning select properties of the certificate versions, sensative feilds of the certificate will not be returned.  This operation requires 
            the certificates/list permission.
            </summary>
        <returns>An enumerable collection of the certificate's versions</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateVersionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificateVersionsAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt; GetCertificateVersionsAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersionsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateVersionsAsync : string * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;&#xA;override this.GetCertificateVersionsAsync : string * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;" Usage="certificateClient.GetCertificateVersionsAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateBase&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the certificate to retrieve the versions of</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the versions of a specific certificate in the vault, returning select properties of the certificate versions, sensative feilds of the certificate will not be returned.  This operation requires 
            the certificates/list permission.
            </summary>
        <returns>An enumerable collection of the certificate's versions</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateWithPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; GetCertificateWithPolicy (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; GetCertificateWithPolicy(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateWithPolicy(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateWithPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&#xA;override this.GetCertificateWithPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;" Usage="certificateClient.GetCertificateWithPolicy (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Returns the latest version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> along with it's <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" />. This operation requires the certificates/get permission.
            </summary>
        <returns>A response containing the certificate and policy as a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateWithPolicy" /> instance</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateWithPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; GetCertificateWithPolicyAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; GetCertificateWithPolicyAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateWithPolicyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateWithPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;&#xA;override this.GetCertificateWithPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;" Usage="certificateClient.GetCertificateWithPolicyAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to retrieve</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Returns the latest version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> along with it's <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" />. This operation requires the certificates/get permission.
            </summary>
        <returns>A response containing the certificate and policy as a <see cref="T:Azure.Security.KeyVault.Certificates.CertificateWithPolicy" /> instance</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContacts">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt; GetContacts (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class System.Collections.Generic.IList`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt;&gt; GetContacts(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetContacts(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetContacts : System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&#xA;override this.GetContacts : System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;" Usage="certificateClient.GetContacts cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Gets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.Contact" />s for the key vaults. This operation requires the certificates/managecontacts permission.
            </summary>
        <returns>The certificate contacts of the vault</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContactsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt; GetContactsAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class System.Collections.Generic.IList`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt; GetContactsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetContactsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetContactsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;&#xA;override this.GetContactsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;" Usage="certificateClient.GetContactsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Gets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.Contact" />s for the key vaults. This operation requires the certificates/managecontacts permission.
            </summary>
        <returns>The certificate contacts of the vault</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt; GetDeletedCertificate (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.DeletedCertificate&gt; GetDeletedCertificate(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificate(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&#xA;override this.GetDeletedCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;" Usage="certificateClient.GetDeletedCertificate (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Retrieves information about the specified deleted <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />. This operation is only applicable in vaults enabled for soft-delete, and
            requires the certificates/get permission.
            </summary>
        <returns>The details of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; GetDeletedCertificateAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; GetDeletedCertificateAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificateAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;&#xA;override this.GetDeletedCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;" Usage="certificateClient.GetDeletedCertificateAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Retrieves information about the specified deleted <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />. This operation is only applicable in vaults enabled for soft-delete, and
            requires the certificates/get permission.
            </summary>
        <returns>The details of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedCertificates">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; GetDeletedCertificates (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; GetDeletedCertificates(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificates(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedCertificates : System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;&#xA;override this.GetDeletedCertificates : System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;" Usage="certificateClient.GetDeletedCertificates cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the deleted certificates in the vault.  This operation is only available on soft-delete enabled vaults, and requires the certificates/list/get permissions.
            </summary>
        <returns>An enumerable collection of deleted certificates</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedCertificatesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; GetDeletedCertificatesAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt; GetDeletedCertificatesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificatesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedCertificatesAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;&#xA;override this.GetDeletedCertificatesAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;" Usage="certificateClient.GetDeletedCertificatesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.DeletedCertificate&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the deleted certificates in the vault.  This operation is only available on soft-delete enabled vaults, and requires the certificates/list/get permissions.
            </summary>
        <returns>An enumerable collection of deleted certificates</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIssuer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt; GetIssuer (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt; GetIssuer(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuer(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetIssuer : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&#xA;override this.GetIssuer : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;" Usage="certificateClient.GetIssuer (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to retreive</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Retrieves the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> from the vault. This operation requires the certificates/getissuers permission.
            </summary>
        <returns>The retrieved certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIssuerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; GetIssuerAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; GetIssuerAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuerAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetIssuerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;&#xA;override this.GetIssuerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;" Usage="certificateClient.GetIssuerAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to retreive</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Retrieves the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> from the vault. This operation requires the certificates/getissuers permission.
            </summary>
        <returns>The retrieved certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIssuers">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt; GetIssuers (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt; GetIssuers(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuers(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetIssuers : System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt;&#xA;override this.GetIssuers : System.Threading.CancellationToken -&gt; seq&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt;" Usage="certificateClient.GetIssuers cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the certificate issuers in the vault, returning select properties of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" />, sensative feilds of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> will not be returned.  This operation requires the certificates/getissuers permission.
            </summary>
        <returns>An enumerable collection of certificate issuers metadata</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIssuersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt; GetIssuersAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt; GetIssuersAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuersAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetIssuersAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt;&#xA;override this.GetIssuersAsync : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt;" Usage="certificateClient.GetIssuersAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.IssuerBase&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Enumerates the certificate issuers in the vault, returning select properties of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" />, sensative feilds of the <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> will not be returned. This operation requires the certificates/getissuers permission.
            </summary>
        <returns>An enumerable collection of certificate issuers metadata</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; ImportCertificate (Azure.Security.KeyVault.Certificates.CertificateImport import, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; ImportCertificate(class Azure.Security.KeyVault.Certificates.CertificateImport import, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificate(Azure.Security.KeyVault.Certificates.CertificateImport,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ImportCertificate : Azure.Security.KeyVault.Certificates.CertificateImport * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&#xA;override this.ImportCertificate : Azure.Security.KeyVault.Certificates.CertificateImport * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;" Usage="certificateClient.ImportCertificate (import, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="import" Type="Azure.Security.KeyVault.Certificates.CertificateImport" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="import">The details of the certificate to import to the key vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the 
            certifcates/import permission
            </summary>
        <returns>The imported certificate and policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; ImportCertificateAsync (Azure.Security.KeyVault.Certificates.CertificateImport import, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; ImportCertificateAsync(class Azure.Security.KeyVault.Certificates.CertificateImport import, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificateAsync(Azure.Security.KeyVault.Certificates.CertificateImport,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ImportCertificateAsync : Azure.Security.KeyVault.Certificates.CertificateImport * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;&#xA;override this.ImportCertificateAsync : Azure.Security.KeyVault.Certificates.CertificateImport * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;" Usage="certificateClient.ImportCertificateAsync (import, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="import" Type="Azure.Security.KeyVault.Certificates.CertificateImport" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="import">The details of the certificate to import to the key vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the 
            certifcates/import permission
            </summary>
        <returns>The imported certificate and policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeDeletedCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PurgeDeletedCertificate (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PurgeDeletedCertificate(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member PurgeDeletedCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.PurgeDeletedCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="certificateClient.PurgeDeletedCertificate (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to perminantly delete</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Permanently and irreversibly deletes the specified deleted certificate, without the possibility of recovery. This operation is only applicable in vaults enabled for soft-delete, and
            requires the certificates/purge permission. The operation is not available if the DeletedCertificate.RecoveryLevel of the DeletedCertificate does not specify 'Purgeable'.
            </summary>
        <returns>The http response from the service</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeDeletedCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PurgeDeletedCertificateAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PurgeDeletedCertificateAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificateAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member PurgeDeletedCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PurgeDeletedCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="certificateClient.PurgeDeletedCertificateAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to perminantly delete</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Permanently and irreversibly deletes the specified deleted certificate, without the possibility of recovery. This operation is only applicable in vaults enabled for soft-delete, and
            requires the certificates/purge permission. The operation is not available if the DeletedCertificate.RecoveryLevel of the DeletedCertificate does not specify 'Purgeable'.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecoverDeletedCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; RecoverDeletedCertificate (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; RecoverDeletedCertificate(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.RecoverDeletedCertificate(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member RecoverDeletedCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&#xA;override this.RecoverDeletedCertificate : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;" Usage="certificateClient.RecoverDeletedCertificate (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Recovers the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to its pre-deleted state. This operation is only applicable in vaults enabled for soft-delete, and
            requires the certificates/recover permission.
            </summary>
        <returns>The recovered certificate and policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecoverDeletedCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; RecoverDeletedCertificateAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; RecoverDeletedCertificateAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.RecoverDeletedCertificateAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member RecoverDeletedCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;&#xA;override this.RecoverDeletedCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;" Usage="certificateClient.RecoverDeletedCertificateAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /></param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Recovers the <see cref="T:Azure.Security.KeyVault.Certificates.DeletedCertificate" /> to its pre-deleted state. This operation is only applicable in vaults enabled for soft-delete, and
            requires the certificates/recover permission.
            </summary>
        <returns>The recovered certificate and policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; RestoreCertificate (byte[] backup, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt; RestoreCertificate(unsigned int8[] backup, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.RestoreCertificate(System.Byte[],System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member RestoreCertificate : byte[] * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&#xA;override this.RestoreCertificate : byte[] * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;" Usage="certificateClient.RestoreCertificate (backup, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backup" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="backup">The backup of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to restore</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Restores a <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />, including all versions, from a backup created from the <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificateAsync(System.String,System.Threading.CancellationToken)" />. The backup must be restored
            to a vault in the same region as its original vault.  This operation requires the certificate/restore permission.
            </summary>
        <returns>The restored certificate and policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; RestoreCertificateAsync (byte[] backup, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt; RestoreCertificateAsync(unsigned int8[] backup, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.RestoreCertificateAsync(System.Byte[],System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member RestoreCertificateAsync : byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;&#xA;override this.RestoreCertificateAsync : byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;" Usage="certificateClient.RestoreCertificateAsync (backup, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificateWithPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backup" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="backup">The backup of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to restore</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Restores a <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />, including all versions, from a backup created from the <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate(System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificateAsync(System.String,System.Threading.CancellationToken)" />. The backup must be restored
            to a vault in the same region as its original vault.  This operation requires the certificate/restore permission.
            </summary>
        <returns>The restored certificate and policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContacts">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt; SetContacts (System.Collections.Generic.IEnumerable&lt;Azure.Security.KeyVault.Certificates.Contact&gt; contacts, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class System.Collections.Generic.IList`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt;&gt; SetContacts(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt; contacts, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.SetContacts(System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Certificates.Contact},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetContacts : seq&lt;Azure.Security.KeyVault.Certificates.Contact&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&#xA;override this.SetContacts : seq&lt;Azure.Security.KeyVault.Certificates.Contact&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;" Usage="certificateClient.SetContacts (contacts, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contacts" Type="System.Collections.Generic.IEnumerable&lt;Azure.Security.KeyVault.Certificates.Contact&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="contacts">The certificate contacts for the vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Sets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.Contact" />s for the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
        <returns>The updated certificate contacts of the vault</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContactsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt; SetContactsAsync (System.Collections.Generic.IEnumerable&lt;Azure.Security.KeyVault.Certificates.Contact&gt; contacts, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class System.Collections.Generic.IList`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt; SetContactsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Security.KeyVault.Certificates.Contact&gt; contacts, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.SetContactsAsync(System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Certificates.Contact},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SetContactsAsync : seq&lt;Azure.Security.KeyVault.Certificates.Contact&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;&#xA;override this.SetContactsAsync : seq&lt;Azure.Security.KeyVault.Certificates.Contact&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;" Usage="certificateClient.SetContactsAsync (contacts, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IList&lt;Azure.Security.KeyVault.Certificates.Contact&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contacts" Type="System.Collections.Generic.IEnumerable&lt;Azure.Security.KeyVault.Certificates.Contact&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="contacts">The certificate contacts for the vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Sets the certificate <see cref="T:Azure.Security.KeyVault.Certificates.Contact" />s for the key vault, replacing any existing contacts. This operation requires the certificates/managecontacts permission.
            </summary>
        <returns>The updated certificate contacts of the vault</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCreateCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.KeyVault.Certificates.CertificateOperation StartCreateCertificate (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.KeyVault.Certificates.CertificateOperation StartCreateCertificate(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificate(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCreateCertificate : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation&#xA;override this.StartCreateCertificate : string * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation" Usage="certificateClient.StartCreateCertificate (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.KeyVault.Certificates.CertificateOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the certificate to create</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Starts a long running operation to create a <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> in the vault, using the default certificate policy.
            </summary>
        <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> which contians details on the create operation, and can be used to retrieve updated status</returns>
        <remarks>
            If no certificate with the specified name exists it will be created, otherwise a new version of the existing certificate will be created. This operation requires the certificates/create permission.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCreateCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.KeyVault.Certificates.CertificateOperation StartCreateCertificate (string name, Azure.Security.KeyVault.Certificates.CertificatePolicy policy, Nullable&lt;bool&gt; enabled = null, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.KeyVault.Certificates.CertificateOperation StartCreateCertificate(string name, class Azure.Security.KeyVault.Certificates.CertificatePolicy policy, valuetype System.Nullable`1&lt;bool&gt; enabled, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificate(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCreateCertificate : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * Nullable&lt;bool&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation&#xA;override this.StartCreateCertificate : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * Nullable&lt;bool&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Security.KeyVault.Certificates.CertificateOperation" Usage="certificateClient.StartCreateCertificate (name, policy, enabled, tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.KeyVault.Certificates.CertificateOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="policy" Type="Azure.Security.KeyVault.Certificates.CertificatePolicy" />
        <Parameter Name="enabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the certificate to create</param>
        <param name="policy">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> which governs the proprerties and lifecycle of the created certificate</param>
        <param name="enabled">Specifies whether the certificate should be created in an enabled state</param>
        <param name="tags">Tags to be applied to the created certificate</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Starts a long running operation to create a <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> in the vault with the specified certificate policy.
            </summary>
        <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> which contians details on the create operation, and can be used to retrieve updated status</returns>
        <remarks>
            If no certificate with the specified name exists it will be created, otherwise a new version of the existing certificate will be created. This operation requires the certificates/create permission.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCreateCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt; StartCreateCertificateAsync (string name, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.KeyVault.Certificates.CertificateOperation&gt; StartCreateCertificateAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificateAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCreateCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;&#xA;override this.StartCreateCertificateAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;" Usage="certificateClient.StartCreateCertificateAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the certificate to create</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Starts a long running operation to create a <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> in the vault, using the default certificate policy.
            </summary>
        <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> which contians details on the create operation, and can be used to retrieve updated status</returns>
        <remarks>
            If no certificate with the specified name exists it will be created, otherwise a new version of the existing certificate will be created. This operation requires the certificates/create permission.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCreateCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt; StartCreateCertificateAsync (string name, Azure.Security.KeyVault.Certificates.CertificatePolicy policy, Nullable&lt;bool&gt; enabled = null, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.KeyVault.Certificates.CertificateOperation&gt; StartCreateCertificateAsync(string name, class Azure.Security.KeyVault.Certificates.CertificatePolicy policy, valuetype System.Nullable`1&lt;bool&gt; enabled, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificateAsync(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member StartCreateCertificateAsync : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * Nullable&lt;bool&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;&#xA;override this.StartCreateCertificateAsync : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * Nullable&lt;bool&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;" Usage="certificateClient.StartCreateCertificateAsync (name, policy, enabled, tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.KeyVault.Certificates.CertificateOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="policy" Type="Azure.Security.KeyVault.Certificates.CertificatePolicy" />
        <Parameter Name="enabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the certificate to create</param>
        <param name="policy">The <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> which governs the proprerties and lifecycle of the created certificate</param>
        <param name="enabled">Specifies whether the certificate should be created in an enabled state</param>
        <param name="tags">Tags to be applied to the created certificate</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Starts a long running operation to create a <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> in the vault with the specified certificate policy.
            </summary>
        <returns>A <see cref="T:Azure.Security.KeyVault.Certificates.CertificateOperation" /> which contians details on the create operation, and can be used to retrieve updated status</returns>
        <remarks>
            If no certificate with the specified name exists it will be created, otherwise a new version of the existing certificate will be created. This operation requires the certificates/create permission.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt; UpdateCertificate (string name, string version = null, bool enabled = false, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Certificate&gt; UpdateCertificate(string name, string version, bool enabled, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificate(System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCertificate : string * string * bool * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&#xA;override this.UpdateCertificate : string * string * bool * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;" Usage="certificateClient.UpdateCertificate (name, version, enabled, tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="enabled" Type="System.Boolean" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to update</param>
        <param name="version">The version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to update, if unspecified the latest version will be updated</param>
        <param name="enabled">Specifies whether the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> is enabled, if unspecified <see cref="P:Azure.Security.KeyVault.Certificates.CertificateBase.Enabled" /> remains unchanged</param>
        <param name="tags">Specifies the tags associated with the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />, if unspecified <see cref="P:Azure.Security.KeyVault.Certificates.CertificateBase.Tags" /> remains unchanged</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Updates the specified <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> with the specified values for its mutable properties. This operation requires the certificates/update permission.
            </summary>
        <returns>The updated <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt; UpdateCertificateAsync (string name, string version = null, bool enabled = false, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Certificate&gt;&gt; UpdateCertificateAsync(string name, string version, bool enabled, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificateAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCertificateAsync : string * string * bool * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt;&#xA;override this.UpdateCertificateAsync : string * string * bool * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt;" Usage="certificateClient.UpdateCertificateAsync (name, version, enabled, tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Certificate&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="enabled" Type="System.Boolean" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to update</param>
        <param name="version">The version of the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> to update, if unspecified the latest version will be updated</param>
        <param name="enabled">Specifies whether the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> is enabled, if unspecified <see cref="P:Azure.Security.KeyVault.Certificates.CertificateBase.Enabled" /> remains unchanged</param>
        <param name="tags">Specifies the tags associated with the <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" />, if unspecified <see cref="P:Azure.Security.KeyVault.Certificates.CertificateBase.Tags" /> remains unchanged</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Updates the specified <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /> with the specified values for its mutable properties. This operation requires the certificates/update permission.
            </summary>
        <returns>The updated <see cref="T:Azure.Security.KeyVault.Certificates.Certificate" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCertificatePolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt; UpdateCertificatePolicy (string certificateName, Azure.Security.KeyVault.Certificates.CertificatePolicy policy, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificatePolicy&gt; UpdateCertificatePolicy(string certificateName, class Azure.Security.KeyVault.Certificates.CertificatePolicy policy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificatePolicy(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCertificatePolicy : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&#xA;override this.UpdateCertificatePolicy : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;" Usage="certificateClient.UpdateCertificatePolicy (certificateName, policy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="policy" Type="Azure.Security.KeyVault.Certificates.CertificatePolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the certificate to update the policy of</param>
        <param name="policy">The updated policy for the specified certificate</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Updates the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/update permission.
            </summary>
        <returns>The updated certificate policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCertificatePolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt; UpdateCertificatePolicyAsync (string certificateName, Azure.Security.KeyVault.Certificates.CertificatePolicy policy, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt; UpdateCertificatePolicyAsync(string certificateName, class Azure.Security.KeyVault.Certificates.CertificatePolicy policy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificatePolicyAsync(System.String,Azure.Security.KeyVault.Certificates.CertificatePolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCertificatePolicyAsync : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt;&#xA;override this.UpdateCertificatePolicyAsync : string * Azure.Security.KeyVault.Certificates.CertificatePolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt;" Usage="certificateClient.UpdateCertificatePolicyAsync (certificateName, policy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.CertificatePolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="policy" Type="Azure.Security.KeyVault.Certificates.CertificatePolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">The name of the certificate to update the policy of</param>
        <param name="policy">The updated policy for the specified certificate</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Updates the <see cref="T:Azure.Security.KeyVault.Certificates.CertificatePolicy" /> of the specified certificate. This operation requires the certificate/update permission.
            </summary>
        <returns>The updated certificate policy</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateIssuer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt; UpdateIssuer (Azure.Security.KeyVault.Certificates.Issuer issuer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt; UpdateIssuer(class Azure.Security.KeyVault.Certificates.Issuer issuer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuer(Azure.Security.KeyVault.Certificates.Issuer,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateIssuer : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&#xA;override this.UpdateIssuer : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;" Usage="certificateClient.UpdateIssuer (issuer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="Azure.Security.KeyVault.Certificates.Issuer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to update in the vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Updates the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> in the vault, only updating the specified fields, others will remain unchanged. This operation requires the certificates/setissuers permission.
            </summary>
        <returns>The updated certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateIssuerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; UpdateIssuerAsync (Azure.Security.KeyVault.Certificates.Issuer issuer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Azure.Response`1&lt;class Azure.Security.KeyVault.Certificates.Issuer&gt;&gt; UpdateIssuerAsync(class Azure.Security.KeyVault.Certificates.Issuer issuer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuerAsync(Azure.Security.KeyVault.Certificates.Issuer,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpdateIssuerAsync : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;&#xA;override this.UpdateIssuerAsync : Azure.Security.KeyVault.Certificates.Issuer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;" Usage="certificateClient.UpdateIssuerAsync (issuer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.KeyVault.Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.KeyVault.Certificates.Issuer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="Azure.Security.KeyVault.Certificates.Issuer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="issuer">The <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> to update in the vault</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Updates the specified certificate <see cref="T:Azure.Security.KeyVault.Certificates.Issuer" /> in the vault, only updating the specified fields, others will remain unchanged. This operation requires the certificates/setissuers permission.
            </summary>
        <returns>The updated certificate issuer</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
