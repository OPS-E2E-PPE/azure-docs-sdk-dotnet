<Type Name="EnvironmentsClient" FullName="Azure.Developer.DevCenter.EnvironmentsClient">
  <TypeSignature Language="C#" Value="public class EnvironmentsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EnvironmentsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Developer.DevCenter.EnvironmentsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class EnvironmentsClient" />
  <TypeSignature Language="F#" Value="type EnvironmentsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Environments service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EnvironmentsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of EnvironmentsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvironmentsClient (string tenantId, string devCenter, string projectName, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tenantId, string devCenter, string projectName, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.#ctor(System.String,System.String,System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tenantId As String, devCenter As String, projectName As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.EnvironmentsClient : string * string * string * Azure.Core.TokenCredential -&gt; Azure.Developer.DevCenter.EnvironmentsClient" Usage="new Azure.Developer.DevCenter.EnvironmentsClient (tenantId, devCenter, projectName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="devCenter" Type="System.String" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="tenantId"> The tenant to operate on. </param>
        <param name="devCenter"> The DevCenter to operate on. </param>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of EnvironmentsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tenantId" />, <paramref name="devCenter" />, <paramref name="projectName" /> or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvironmentsClient (string tenantId, string devCenter, string projectName, Azure.Core.TokenCredential credential, string devCenterDnsSuffix, Azure.Developer.DevCenter.DevCenterClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tenantId, string devCenter, string projectName, class Azure.Core.TokenCredential credential, string devCenterDnsSuffix, class Azure.Developer.DevCenter.DevCenterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.#ctor(System.String,System.String,System.String,Azure.Core.TokenCredential,System.String,Azure.Developer.DevCenter.DevCenterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tenantId As String, devCenter As String, projectName As String, credential As TokenCredential, devCenterDnsSuffix As String, options As DevCenterClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.EnvironmentsClient : string * string * string * Azure.Core.TokenCredential * string * Azure.Developer.DevCenter.DevCenterClientOptions -&gt; Azure.Developer.DevCenter.EnvironmentsClient" Usage="new Azure.Developer.DevCenter.EnvironmentsClient (tenantId, devCenter, projectName, credential, devCenterDnsSuffix, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="devCenter" Type="System.String" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="devCenterDnsSuffix" Type="System.String" />
        <Parameter Name="options" Type="Azure.Developer.DevCenter.DevCenterClientOptions" />
      </Parameters>
      <Docs>
        <param name="tenantId"> The tenant to operate on. </param>
        <param name="devCenter"> The DevCenter to operate on. </param>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="devCenterDnsSuffix"> The DNS suffix used as the base for all devcenter requests. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of EnvironmentsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tenantId" />, <paramref name="devCenter" />, <paramref name="projectName" />, <paramref name="credential" /> or <paramref name="devCenterDnsSuffix" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateEnvironment">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateOrUpdateEnvironment (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateOrUpdateEnvironment(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.CreateOrUpdateEnvironment(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateEnvironment (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateEnvironment : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateOrUpdateEnvironment : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="environmentsClient.CreateOrUpdateEnvironment (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Creates or updates an environment. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code>

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdateEnvironment with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEnvironment with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    owner = "<owner>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

var operation = client.CreateOrUpdateEnvironment(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateEnvironmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateOrUpdateEnvironmentAsync (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateOrUpdateEnvironmentAsync(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.CreateOrUpdateEnvironmentAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateEnvironmentAsync (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateEnvironmentAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateOrUpdateEnvironmentAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="environmentsClient.CreateOrUpdateEnvironmentAsync (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Creates or updates an environment. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code>

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdateEnvironmentAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateEnvironmentAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    owner = "<owner>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

var operation = await client.CreateOrUpdateEnvironmentAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CustomEnvironmentAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation CustomEnvironmentAction (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation CustomEnvironmentAction(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.CustomEnvironmentAction(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CustomEnvironmentAction (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member CustomEnvironmentAction : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.CustomEnvironmentAction : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation" Usage="environmentsClient.CustomEnvironmentAction (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Executes a custom action. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ActionRequest</c>:
<code>{
  actionId: string, # Required. The Catalog Item action id to execute
  parameters: AnyObject, # Optional. Parameters object for the Action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CustomEnvironmentAction with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = client.CustomEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call CustomEnvironmentAction with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = client.CustomEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CustomEnvironmentActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; CustomEnvironmentActionAsync (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; CustomEnvironmentActionAsync(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.CustomEnvironmentActionAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CustomEnvironmentActionAsync (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member CustomEnvironmentActionAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.CustomEnvironmentActionAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="environmentsClient.CustomEnvironmentActionAsync (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Executes a custom action. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ActionRequest</c>:
<code>{
  actionId: string, # Required. The Catalog Item action id to execute
  parameters: AnyObject, # Optional. Parameters object for the Action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CustomEnvironmentActionAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = await client.CustomEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call CustomEnvironmentActionAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = await client.CustomEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteEnvironment">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation DeleteEnvironment (Azure.WaitUntil waitUntil, string environmentName, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation DeleteEnvironment(valuetype Azure.WaitUntil waitUntil, string environmentName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.DeleteEnvironment(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteEnvironment (waitUntil As WaitUntil, environmentName As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member DeleteEnvironment : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.DeleteEnvironment : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation" Usage="environmentsClient.DeleteEnvironment (waitUntil, environmentName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes an environment and all it's associated resources. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteEnvironment with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.DeleteEnvironment(WaitUntil.Completed, "<environmentName>");

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call DeleteEnvironment with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = client.DeleteEnvironment(WaitUntil.Completed, "<environmentName>", <me>);

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteEnvironmentAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation DeleteEnvironmentAction (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation DeleteEnvironmentAction(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.DeleteEnvironmentAction(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteEnvironmentAction (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member DeleteEnvironmentAction : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.DeleteEnvironmentAction : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation" Usage="environmentsClient.DeleteEnvironmentAction (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Executes a delete action. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ActionRequest</c>:
<code>{
  actionId: string, # Required. The Catalog Item action id to execute
  parameters: AnyObject, # Optional. Parameters object for the Action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteEnvironmentAction with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = client.DeleteEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call DeleteEnvironmentAction with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = client.DeleteEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteEnvironmentActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; DeleteEnvironmentActionAsync (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; DeleteEnvironmentActionAsync(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.DeleteEnvironmentActionAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteEnvironmentActionAsync (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteEnvironmentActionAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.DeleteEnvironmentActionAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="environmentsClient.DeleteEnvironmentActionAsync (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Executes a delete action. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ActionRequest</c>:
<code>{
  actionId: string, # Required. The Catalog Item action id to execute
  parameters: AnyObject, # Optional. Parameters object for the Action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteEnvironmentActionAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = await client.DeleteEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call DeleteEnvironmentActionAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = await client.DeleteEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteEnvironmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; DeleteEnvironmentAsync (Azure.WaitUntil waitUntil, string environmentName, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; DeleteEnvironmentAsync(valuetype Azure.WaitUntil waitUntil, string environmentName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.DeleteEnvironmentAsync(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteEnvironmentAsync (waitUntil As WaitUntil, environmentName As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteEnvironmentAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.DeleteEnvironmentAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="environmentsClient.DeleteEnvironmentAsync (waitUntil, environmentName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes an environment and all it's associated resources. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteEnvironmentAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<environmentName>");

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call DeleteEnvironmentAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var operation = await client.DeleteEnvironmentAsync(WaitUntil.Completed, "<environmentName>", <me>);

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeployEnvironmentAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation DeployEnvironmentAction (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation DeployEnvironmentAction(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.DeployEnvironmentAction(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeployEnvironmentAction (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member DeployEnvironmentAction : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.DeployEnvironmentAction : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation" Usage="environmentsClient.DeployEnvironmentAction (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Executes a deploy action. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ActionRequest</c>:
<code>{
  actionId: string, # Required. The Catalog Item action id to execute
  parameters: AnyObject, # Optional. Parameters object for the Action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeployEnvironmentAction with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = client.DeployEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call DeployEnvironmentAction with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = client.DeployEnvironmentAction(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeployEnvironmentActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; DeployEnvironmentActionAsync (Azure.WaitUntil waitUntil, string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; DeployEnvironmentActionAsync(valuetype Azure.WaitUntil waitUntil, string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.DeployEnvironmentActionAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeployEnvironmentActionAsync (waitUntil As WaitUntil, environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member DeployEnvironmentActionAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.DeployEnvironmentActionAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="environmentsClient.DeployEnvironmentActionAsync (waitUntil, environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Executes a deploy action. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ActionRequest</c>:
<code>{
  actionId: string, # Required. The Catalog Item action id to execute
  parameters: AnyObject, # Optional. Parameters object for the Action
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeployEnvironmentActionAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
};

var operation = await client.DeployEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call DeployEnvironmentActionAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    actionId = "<actionId>",
    parameters = new {},
};

var operation = await client.DeployEnvironmentActionAsync(WaitUntil.Completed, "<environmentName>", RequestContent.Create(data), <me>);

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetArtifactsByEnvironment">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetArtifactsByEnvironment (string environmentName, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetArtifactsByEnvironment(string environmentName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetArtifactsByEnvironment(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArtifactsByEnvironment (environmentName As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetArtifactsByEnvironment : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetArtifactsByEnvironment : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="environmentsClient.GetArtifactsByEnvironment (environmentName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the artifacts for an environment. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ArtifactListResultValue</c>:
<code>{
  id: string, # Optional. Artifact identifier
  name: string, # Optional. Artifact name
  isDirectory: boolean, # Optional. Whether artifact is a directory
  downloadUri: string, # Optional. Uri where the file contents can be downloaded
  fileSize: number, # Optional. Size of file in bytes, if the artifact is a file
  createdTime: string (ISO 8601 Format), # Optional. Time the artifact was created
  lastModifiedTime: string (ISO 8601 Format), # Optional. Time the artifact was last modified
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetArtifactsByEnvironment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetArtifactsByEnvironment("<environmentName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetArtifactsByEnvironment with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetArtifactsByEnvironment("<environmentName>", <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isDirectory").ToString());
    Console.WriteLine(result.GetProperty("downloadUri").ToString());
    Console.WriteLine(result.GetProperty("fileSize").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedTime").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetArtifactsByEnvironmentAndPath">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetArtifactsByEnvironmentAndPath (string environmentName, string artifactPath, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetArtifactsByEnvironmentAndPath(string environmentName, string artifactPath, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetArtifactsByEnvironmentAndPath(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArtifactsByEnvironmentAndPath (environmentName As String, artifactPath As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetArtifactsByEnvironmentAndPath : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetArtifactsByEnvironmentAndPath : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="environmentsClient.GetArtifactsByEnvironmentAndPath (environmentName, artifactPath, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="artifactPath" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="artifactPath"> The path of the artifact. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the artifacts for an environment at a specified path, or returns the file at the path. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ArtifactListResultValue</c>:
<code>{
  id: string, # Optional. Artifact identifier
  name: string, # Optional. Artifact name
  isDirectory: boolean, # Optional. Whether artifact is a directory
  downloadUri: string, # Optional. Uri where the file contents can be downloaded
  fileSize: number, # Optional. Size of file in bytes, if the artifact is a file
  createdTime: string (ISO 8601 Format), # Optional. Time the artifact was created
  lastModifiedTime: string (ISO 8601 Format), # Optional. Time the artifact was last modified
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="artifactPath" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" />, <paramref name="artifactPath" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetArtifactsByEnvironmentAndPath with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetArtifactsByEnvironmentAndPath("<environmentName>", "<artifactPath>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetArtifactsByEnvironmentAndPath with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetArtifactsByEnvironmentAndPath("<environmentName>", "<artifactPath>", <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isDirectory").ToString());
    Console.WriteLine(result.GetProperty("downloadUri").ToString());
    Console.WriteLine(result.GetProperty("fileSize").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedTime").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetArtifactsByEnvironmentAndPathAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetArtifactsByEnvironmentAndPathAsync (string environmentName, string artifactPath, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetArtifactsByEnvironmentAndPathAsync(string environmentName, string artifactPath, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetArtifactsByEnvironmentAndPathAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArtifactsByEnvironmentAndPathAsync (environmentName As String, artifactPath As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetArtifactsByEnvironmentAndPathAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetArtifactsByEnvironmentAndPathAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="environmentsClient.GetArtifactsByEnvironmentAndPathAsync (environmentName, artifactPath, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="artifactPath" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="artifactPath"> The path of the artifact. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the artifacts for an environment at a specified path, or returns the file at the path. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ArtifactListResultValue</c>:
<code>{
  id: string, # Optional. Artifact identifier
  name: string, # Optional. Artifact name
  isDirectory: boolean, # Optional. Whether artifact is a directory
  downloadUri: string, # Optional. Uri where the file contents can be downloaded
  fileSize: number, # Optional. Size of file in bytes, if the artifact is a file
  createdTime: string (ISO 8601 Format), # Optional. Time the artifact was created
  lastModifiedTime: string (ISO 8601 Format), # Optional. Time the artifact was last modified
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="artifactPath" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" />, <paramref name="artifactPath" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetArtifactsByEnvironmentAndPathAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetArtifactsByEnvironmentAndPathAsync("<environmentName>", "<artifactPath>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetArtifactsByEnvironmentAndPathAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetArtifactsByEnvironmentAndPathAsync("<environmentName>", "<artifactPath>", <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isDirectory").ToString());
    Console.WriteLine(result.GetProperty("downloadUri").ToString());
    Console.WriteLine(result.GetProperty("fileSize").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedTime").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetArtifactsByEnvironmentAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetArtifactsByEnvironmentAsync (string environmentName, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetArtifactsByEnvironmentAsync(string environmentName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetArtifactsByEnvironmentAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArtifactsByEnvironmentAsync (environmentName As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetArtifactsByEnvironmentAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetArtifactsByEnvironmentAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="environmentsClient.GetArtifactsByEnvironmentAsync (environmentName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the artifacts for an environment. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ArtifactListResultValue</c>:
<code>{
  id: string, # Optional. Artifact identifier
  name: string, # Optional. Artifact name
  isDirectory: boolean, # Optional. Whether artifact is a directory
  downloadUri: string, # Optional. Uri where the file contents can be downloaded
  fileSize: number, # Optional. Size of file in bytes, if the artifact is a file
  createdTime: string (ISO 8601 Format), # Optional. Time the artifact was created
  lastModifiedTime: string (ISO 8601 Format), # Optional. Time the artifact was last modified
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetArtifactsByEnvironmentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetArtifactsByEnvironmentAsync("<environmentName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetArtifactsByEnvironmentAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetArtifactsByEnvironmentAsync("<environmentName>", <me>))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isDirectory").ToString());
    Console.WriteLine(result.GetProperty("downloadUri").ToString());
    Console.WriteLine(result.GetProperty("fileSize").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedTime").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItem">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCatalogItem (string catalogItemId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCatalogItem(string catalogItemId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItem(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItem (catalogItemId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItem : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCatalogItem : string * Azure.RequestContext -&gt; Azure.Response" Usage="environmentsClient.GetCatalogItem (catalogItemId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogItemId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="catalogItemId"> The unique id of the catalog item. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get a catalog item from a project. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CatalogItem</c>:
<code>{
  id: string, # Optional. Unique identifier of the catalog item.
  name: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="catalogItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="catalogItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItem with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetCatalogItem("<catalogItemId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCatalogItemAsync (string catalogItemId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCatalogItemAsync(string catalogItemId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItemAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItemAsync (catalogItemId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItemAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCatalogItemAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="environmentsClient.GetCatalogItemAsync (catalogItemId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogItemId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="catalogItemId"> The unique id of the catalog item. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get a catalog item from a project. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CatalogItem</c>:
<code>{
  id: string, # Optional. Unique identifier of the catalog item.
  name: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="catalogItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="catalogItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItemAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetCatalogItemAsync("<catalogItemId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItems">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetCatalogItems (int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetCatalogItems(valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItems(System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItems (Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItems : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetCatalogItems : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="environmentsClient.GetCatalogItems (maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists latest version of all catalog items available for a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CatalogItemListResultValue</c>:
<code>{
  id: string, # Optional. Unique identifier of the catalog item.
  name: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItems and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetCatalogItems())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItems with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetCatalogItems(1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItemsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetCatalogItemsAsync (int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetCatalogItemsAsync(valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItemsAsync(System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItemsAsync (Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItemsAsync : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetCatalogItemsAsync : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="environmentsClient.GetCatalogItemsAsync (maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists latest version of all catalog items available for a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CatalogItemListResultValue</c>:
<code>{
  id: string, # Optional. Unique identifier of the catalog item.
  name: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItemsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetCatalogItemsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItemsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetCatalogItemsAsync(1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItemVersion">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCatalogItemVersion (string catalogItemId, string version, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCatalogItemVersion(string catalogItemId, string version, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItemVersion(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItemVersion (catalogItemId As String, version As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItemVersion : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCatalogItemVersion : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="environmentsClient.GetCatalogItemVersion (catalogItemId, version, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogItemId" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="catalogItemId"> The unique id of the catalog item. </param>
        <param name="version"> The version of the catalog item. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get a specific catalog item version from a project. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CatalogItemVersion</c>:
<code>{
  catalogItemId: string, # Optional. Unique identifier of the catalog item.
  catalogItemName: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
  version: string, # Optional. The version of the catalog item.
  summary: string, # Optional. A short summary of the catalog item.
  description: string, # Optional. A long description of the catalog item.
  templatePath: string, # Optional. Path to the catalog item entrypoint file.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to actions
  parameters: [
    {
      id: string, # Optional. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: AnyObject, # Optional. Default value of the parameter
      type: "array" | "boolean" | "integer" | "null" | "number" | "object" | "string", # Optional. A string of one of the basic JSON types (number, integer, null, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Optional. Whether or not this parameter is required
      allowed: [AnyObject], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to actions
  actions: [
    {
      id: string, # Optional. Unique identifier of the action
      name: string, # Optional. Display name of the action
      description: string, # Optional. Description of the action
      parametersSchema: string, # Optional. JSON schema defining the parameters specific to the custom action
      parameters: [CatalogItemParameter], # Optional. Input parameters passed to the action
      type: "Custom" | "Deploy" | "Delete", # Optional. The action type.
      typeName: string, # Optional. Name of the custom action type
      runner: string, # Optional. The container image to use to execute the action
    }
  ], # Optional. Custom actions for the catalog item.
  runner: string, # Optional. The default container image to use to execute actions
  status: "Enabled" | "Disabled", # Optional. Defines whether the specific catalog item version can be used.
  eligibleForLatestVersion: boolean, # Optional. Whether the version is eligible to be the latest version.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="catalogItemId" /> or <paramref name="version" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="catalogItemId" /> or <paramref name="version" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItemVersion with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetCatalogItemVersion("<catalogItemId>", "<version>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("catalogItemId").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("summary").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("templatePath").ToString());
Console.WriteLine(result.GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItemVersionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCatalogItemVersionAsync (string catalogItemId, string version, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCatalogItemVersionAsync(string catalogItemId, string version, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItemVersionAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItemVersionAsync (catalogItemId As String, version As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItemVersionAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCatalogItemVersionAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="environmentsClient.GetCatalogItemVersionAsync (catalogItemId, version, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogItemId" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="catalogItemId"> The unique id of the catalog item. </param>
        <param name="version"> The version of the catalog item. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get a specific catalog item version from a project. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CatalogItemVersion</c>:
<code>{
  catalogItemId: string, # Optional. Unique identifier of the catalog item.
  catalogItemName: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
  version: string, # Optional. The version of the catalog item.
  summary: string, # Optional. A short summary of the catalog item.
  description: string, # Optional. A long description of the catalog item.
  templatePath: string, # Optional. Path to the catalog item entrypoint file.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to actions
  parameters: [
    {
      id: string, # Optional. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: AnyObject, # Optional. Default value of the parameter
      type: "array" | "boolean" | "integer" | "null" | "number" | "object" | "string", # Optional. A string of one of the basic JSON types (number, integer, null, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Optional. Whether or not this parameter is required
      allowed: [AnyObject], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to actions
  actions: [
    {
      id: string, # Optional. Unique identifier of the action
      name: string, # Optional. Display name of the action
      description: string, # Optional. Description of the action
      parametersSchema: string, # Optional. JSON schema defining the parameters specific to the custom action
      parameters: [CatalogItemParameter], # Optional. Input parameters passed to the action
      type: "Custom" | "Deploy" | "Delete", # Optional. The action type.
      typeName: string, # Optional. Name of the custom action type
      runner: string, # Optional. The container image to use to execute the action
    }
  ], # Optional. Custom actions for the catalog item.
  runner: string, # Optional. The default container image to use to execute actions
  status: "Enabled" | "Disabled", # Optional. Defines whether the specific catalog item version can be used.
  eligibleForLatestVersion: boolean, # Optional. Whether the version is eligible to be the latest version.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="catalogItemId" /> or <paramref name="version" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="catalogItemId" /> or <paramref name="version" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItemVersionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetCatalogItemVersionAsync("<catalogItemId>", "<version>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("catalogItemId").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("summary").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("templatePath").ToString());
Console.WriteLine(result.GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("runner").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItemVersions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetCatalogItemVersions (string catalogItemId, int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetCatalogItemVersions(string catalogItemId, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItemVersions(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItemVersions (catalogItemId As String, Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItemVersions : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetCatalogItemVersions : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="environmentsClient.GetCatalogItemVersions (catalogItemId, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogItemId" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="catalogItemId"> The unique id of the catalog item. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all versions of a catalog item from a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CatalogItemVersionListResultValue</c>:
<code>{
  catalogItemId: string, # Optional. Unique identifier of the catalog item.
  catalogItemName: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
  version: string, # Optional. The version of the catalog item.
  summary: string, # Optional. A short summary of the catalog item.
  description: string, # Optional. A long description of the catalog item.
  templatePath: string, # Optional. Path to the catalog item entrypoint file.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to actions
  parameters: [
    {
      id: string, # Optional. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: AnyObject, # Optional. Default value of the parameter
      type: "array" | "boolean" | "integer" | "null" | "number" | "object" | "string", # Optional. A string of one of the basic JSON types (number, integer, null, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Optional. Whether or not this parameter is required
      allowed: [AnyObject], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to actions
  actions: [
    {
      id: string, # Optional. Unique identifier of the action
      name: string, # Optional. Display name of the action
      description: string, # Optional. Description of the action
      parametersSchema: string, # Optional. JSON schema defining the parameters specific to the custom action
      parameters: [CatalogItemParameter], # Optional. Input parameters passed to the action
      type: "Custom" | "Deploy" | "Delete", # Optional. The action type.
      typeName: string, # Optional. Name of the custom action type
      runner: string, # Optional. The container image to use to execute the action
    }
  ], # Optional. Custom actions for the catalog item.
  runner: string, # Optional. The default container image to use to execute actions
  status: "Enabled" | "Disabled", # Optional. Defines whether the specific catalog item version can be used.
  eligibleForLatestVersion: boolean, # Optional. Whether the version is eligible to be the latest version.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="catalogItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="catalogItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItemVersions with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetCatalogItemVersions("<catalogItemId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItemVersions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetCatalogItemVersions("<catalogItemId>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("catalogItemId").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("summary").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCatalogItemVersionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetCatalogItemVersionsAsync (string catalogItemId, int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetCatalogItemVersionsAsync(string catalogItemId, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetCatalogItemVersionsAsync(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCatalogItemVersionsAsync (catalogItemId As String, Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCatalogItemVersionsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetCatalogItemVersionsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="environmentsClient.GetCatalogItemVersionsAsync (catalogItemId, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="catalogItemId" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="catalogItemId"> The unique id of the catalog item. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all versions of a catalog item from a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>CatalogItemVersionListResultValue</c>:
<code>{
  catalogItemId: string, # Optional. Unique identifier of the catalog item.
  catalogItemName: string, # Optional. Name of the catalog item.
  catalogName: string, # Optional. Name of the catalog.
  version: string, # Optional. The version of the catalog item.
  summary: string, # Optional. A short summary of the catalog item.
  description: string, # Optional. A long description of the catalog item.
  templatePath: string, # Optional. Path to the catalog item entrypoint file.
  parametersSchema: string, # Optional. JSON schema defining the parameters object passed to actions
  parameters: [
    {
      id: string, # Optional. Unique ID of the parameter
      name: string, # Optional. Display name of the parameter
      description: string, # Optional. Description of the parameter
      default: AnyObject, # Optional. Default value of the parameter
      type: "array" | "boolean" | "integer" | "null" | "number" | "object" | "string", # Optional. A string of one of the basic JSON types (number, integer, null, array, object, boolean, string)
      readOnly: boolean, # Optional. Whether or not this parameter is read-only.  If true, default should have a value.
      required: boolean, # Optional. Whether or not this parameter is required
      allowed: [AnyObject], # Optional. An array of allowed values
    }
  ], # Optional. Input parameters passed to actions
  actions: [
    {
      id: string, # Optional. Unique identifier of the action
      name: string, # Optional. Display name of the action
      description: string, # Optional. Description of the action
      parametersSchema: string, # Optional. JSON schema defining the parameters specific to the custom action
      parameters: [CatalogItemParameter], # Optional. Input parameters passed to the action
      type: "Custom" | "Deploy" | "Delete", # Optional. The action type.
      typeName: string, # Optional. Name of the custom action type
      runner: string, # Optional. The container image to use to execute the action
    }
  ], # Optional. Custom actions for the catalog item.
  runner: string, # Optional. The default container image to use to execute actions
  status: "Enabled" | "Disabled", # Optional. Defines whether the specific catalog item version can be used.
  eligibleForLatestVersion: boolean, # Optional. Whether the version is eligible to be the latest version.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="catalogItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="catalogItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCatalogItemVersionsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetCatalogItemVersionsAsync("<catalogItemId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetCatalogItemVersionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetCatalogItemVersionsAsync("<catalogItemId>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("catalogItemId").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("summary").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("templatePath").ToString());
    Console.WriteLine(result.GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parametersSchema").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("default").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("readOnly").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("parameters")[0].GetProperty("allowed")[0].ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("typeName").ToString());
    Console.WriteLine(result.GetProperty("actions")[0].GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("runner").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("eligibleForLatestVersion").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentByUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEnvironmentByUser (string environmentName, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEnvironmentByUser(string environmentName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironmentByUser(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentByUser (environmentName As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentByUser : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEnvironmentByUser : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="environmentsClient.GetEnvironmentByUser (environmentName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets an environment. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironmentByUser with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetEnvironmentByUser("<environmentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEnvironmentByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = client.GetEnvironmentByUser("<environmentName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentByUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEnvironmentByUserAsync (string environmentName, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEnvironmentByUserAsync(string environmentName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironmentByUserAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentByUserAsync (environmentName As String, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentByUserAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEnvironmentByUserAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="environmentsClient.GetEnvironmentByUserAsync (environmentName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets an environment. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironmentByUserAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetEnvironmentByUserAsync("<environmentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEnvironmentByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

Response response = await client.GetEnvironmentByUserAsync("<environmentName>", <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironments">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetEnvironments (int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetEnvironments(valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironments(System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironments (Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironments : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetEnvironments : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="environmentsClient.GetEnvironments (maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the environments for a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironments and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetEnvironments())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironments with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetEnvironments(1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("owner").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetEnvironmentsAsync (int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetEnvironmentsAsync(valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironmentsAsync(System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentsAsync (Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentsAsync : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetEnvironmentsAsync : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="environmentsClient.GetEnvironmentsAsync (maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the environments for a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironmentsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetEnvironmentsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetEnvironmentsAsync(1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("owner").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentsByUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetEnvironmentsByUser (string userId = &quot;me&quot;, int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetEnvironmentsByUser(string userId, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironmentsByUser(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentsByUser (Optional userId As String = &quot;me&quot;, Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentsByUser : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetEnvironmentsByUser : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="environmentsClient.GetEnvironmentsByUser (userId, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the environments for a project and user. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironmentsByUser and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetEnvironmentsByUser())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentsByUser with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetEnvironmentsByUser(<me>, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("owner").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentsByUserAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetEnvironmentsByUserAsync (string userId = &quot;me&quot;, int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetEnvironmentsByUserAsync(string userId, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironmentsByUserAsync(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentsByUserAsync (Optional userId As String = &quot;me&quot;, Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentsByUserAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetEnvironmentsByUserAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="environmentsClient.GetEnvironmentsByUserAsync (userId, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the environments for a project and user. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentListResultValue</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironmentsByUserAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetEnvironmentsByUserAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentsByUserAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetEnvironmentsByUserAsync(<me>, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("environmentType").ToString());
    Console.WriteLine(result.GetProperty("owner").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("catalogName").ToString());
    Console.WriteLine(result.GetProperty("catalogItemName").ToString());
    Console.WriteLine(result.GetProperty("parameters").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
    Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentTypes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetEnvironmentTypes (int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetEnvironmentTypes(valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironmentTypes(System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentTypes (Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentTypes : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetEnvironmentTypes : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="environmentsClient.GetEnvironmentTypes (maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists all environment types configured for a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentTypeListResultValue</c>:
<code>{
  name: string, # Optional. Name of the environment type
  deploymentTargetId: string, # Optional. Id of a subscription or management group that the environment type will be mapped to. The environment's resources will be deployed into this subscription or management group.
  status: "Enabled" | "Disabled", # Optional. Defines whether this Environment Type can be used in this Project.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironmentTypes and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetEnvironmentTypes())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentTypes with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

foreach (var data in client.GetEnvironmentTypes(1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentTypesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetEnvironmentTypesAsync (int? maxCount = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetEnvironmentTypesAsync(valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.GetEnvironmentTypesAsync(System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentTypesAsync (Optional maxCount As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentTypesAsync : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetEnvironmentTypesAsync : Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="environmentsClient.GetEnvironmentTypesAsync (maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists all environment types configured for a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>EnvironmentTypeListResultValue</c>:
<code>{
  name: string, # Optional. Name of the environment type
  deploymentTargetId: string, # Optional. Id of a subscription or management group that the environment type will be mapped to. The environment's resources will be deployed into this subscription or management group.
  status: "Enabled" | "Disabled", # Optional. Defines whether this Environment Type can be used in this Project.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEnvironmentTypesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetEnvironmentTypesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEnvironmentTypesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

await foreach (var data in client.GetEnvironmentTypesAsync(1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deploymentTargetId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Developer.DevCenter.EnvironmentsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Developer.DevCenter.EnvironmentsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEnvironment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateEnvironment (string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateEnvironment(string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.UpdateEnvironment(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateEnvironment (environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateEnvironment : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateEnvironment : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="environmentsClient.UpdateEnvironment (environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Partially updates an environment. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>Environment</summary>Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></details>

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateEnvironment with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

Response response = client.UpdateEnvironment("<environmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateEnvironment with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    owner = "<owner>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

Response response = client.UpdateEnvironment("<environmentName>", RequestContent.Create(data), <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateEnvironmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateEnvironmentAsync (string environmentName, Azure.Core.RequestContent content, string userId = &quot;me&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateEnvironmentAsync(string environmentName, class Azure.Core.RequestContent content, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.EnvironmentsClient.UpdateEnvironmentAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateEnvironmentAsync (environmentName As String, content As RequestContent, Optional userId As String = &quot;me&quot;, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateEnvironmentAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateEnvironmentAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="environmentsClient.UpdateEnvironmentAsync (environmentName, content, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="environmentName"> The name of the environment. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Partially updates an environment. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>Environment</summary>Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></details>

Response Body:

Schema for <c>Environment</c>:
<code>{
  name: string, # Optional. Environment name.
  environmentType: string, # Required. Environment type.
  owner: string, # Optional. Identifier of the owner of this Environment.
  provisioningState: string, # Optional. The provisioning state of the environment.
  resourceGroupId: string, # Optional. The identifier of the resource group containing the environment's resources.
  description: string, # Optional. Description of the Environment.
  catalogName: string, # Optional. Name of the catalog.
  catalogItemName: string, # Optional. Name of the catalog item.
  parameters: AnyObject, # Optional. Parameters object for the deploy action
  scheduledTasks: Dictionary&lt;string, ScheduledTask&gt;, # Optional. Set of supported scheduled tasks to help manage cost.
  tags: Dictionary&lt;string, string&gt;, # Optional. Key value pairs that will be applied to resources deployed in this environment as tags.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentName" />, <paramref name="content" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateEnvironmentAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
};

Response response = await client.UpdateEnvironmentAsync("<environmentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateEnvironmentAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new EnvironmentsClient("<tenantId>", "<devCenter>", "<projectName>", credential);

var data = new {
    environmentType = "<environmentType>",
    owner = "<owner>",
    description = "<description>",
    catalogName = "<catalogName>",
    catalogItemName = "<catalogItemName>",
    parameters = new {},
    scheduledTasks = new {
        key = new {
            type = "AutoExpire",
            enabled = "Enabled",
            startTime = "2022-05-10T18:57:31.2311892Z",
        },
    },
    tags = new {
        key = "<String>",
    },
};

Response response = await client.UpdateEnvironmentAsync("<environmentName>", RequestContent.Create(data), <me>);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("environmentType").ToString());
Console.WriteLine(result.GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("resourceGroupId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("catalogName").ToString());
Console.WriteLine(result.GetProperty("catalogItemName").ToString());
Console.WriteLine(result.GetProperty("parameters").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("enabled").ToString());
Console.WriteLine(result.GetProperty("scheduledTasks").GetProperty("<test>").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
