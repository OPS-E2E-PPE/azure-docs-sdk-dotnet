<Type Name="TableTransactionalBatch" FullName="Azure.Data.Tables.TableTransactionalBatch">
  <TypeSignature Language="C#" Value="public class TableTransactionalBatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TableTransactionalBatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Data.Tables.TableTransactionalBatch" />
  <TypeSignature Language="VB.NET" Value="Public Class TableTransactionalBatch" />
  <TypeSignature Language="F#" Value="type TableTransactionalBatch = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Data.Tables</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TableTransactionalBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Data.Tables.TableTransactionalBatch" /> class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntities&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual void AddEntities&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; entities) where T : class, Azure.Data.Tables.ITableEntity, new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEntities&lt;class .ctor (class Azure.Data.Tables.ITableEntity) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.AddEntities``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEntities(Of T As {Class, ITableEntity, New}) (entities As IEnumerable(Of T))" />
      <MemberSignature Language="F#" Value="abstract member AddEntities : seq&lt;'T (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))&gt; -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))&#xA;override this.AddEntities : seq&lt;'T (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))&gt; -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))" Usage="tableTransactionalBatch.AddEntities entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Azure.Data.Tables.ITableEntity</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T" />
        <param name="entities" />
        <summary>
            Add a collection of AddEntity requests to the batch.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEntity&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual void AddEntity&lt;T&gt; (T entity) where T : class, Azure.Data.Tables.ITableEntity, new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEntity&lt;class .ctor (class Azure.Data.Tables.ITableEntity) T&gt;(!!T entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.AddEntity``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEntity(Of T As {Class, ITableEntity, New}) (entity As T)" />
      <MemberSignature Language="F#" Value="abstract member AddEntity : 'T -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))&#xA;override this.AddEntity : 'T -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))" Usage="tableTransactionalBatch.AddEntity entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Azure.Data.Tables.ITableEntity</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">A custom model type that implements <see cref="T:Azure.Data.Tables.ITableEntity" /> or an instance of <see cref="T:Azure.Data.Tables.TableEntity" />.</typeparam>
        <param name="entity">The entity to add.</param>
        <summary>
            Adds a Table Entity of type <typeparamref name="T" /> to the batch.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteEntity">
      <MemberSignature Language="C#" Value="public virtual void DeleteEntity (string partitionKey, string rowKey, Azure.ETag ifMatch = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteEntity(string partitionKey, string rowKey, valuetype Azure.ETag ifMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.DeleteEntity(System.String,System.String,Azure.ETag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DeleteEntity (partitionKey As String, rowKey As String, Optional ifMatch As ETag = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member DeleteEntity : string * string * Azure.ETag -&gt; unit&#xA;override this.DeleteEntity : string * string * Azure.ETag -&gt; unit" Usage="tableTransactionalBatch.DeleteEntity (partitionKey, rowKey, ifMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.String" />
        <Parameter Name="rowKey" Type="System.String" />
        <Parameter Name="ifMatch" Type="Azure.ETag" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key of the entity to delete.</param>
        <param name="rowKey">The row key of the entity to delete.</param>
        <param name="ifMatch">
            The If-Match value to be used for optimistic concurrency.
            If <see cref="F:Azure.ETag.All" /> is specified, the operation will be executed unconditionally.
            If the <see cref="P:Azure.Data.Tables.ITableEntity.ETag" /> value is specified, the operation will fail with a status of 412 (Precondition Failed) if the <see cref="T:Azure.ETag" /> value of the entity in the table does not match.
            The default is to delete unconditionally.
            </param>
        <summary>
            Add a DeleteEntity request to the batch.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt; SubmitBatch (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Data.Tables.Models.TableBatchResponse&gt; SubmitBatch(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.SubmitBatch(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitBatch (Optional cancellationToken As CancellationToken = Nothing) As Response(Of TableBatchResponse)" />
      <MemberSignature Language="F#" Value="abstract member SubmitBatch : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt;&#xA;override this.SubmitBatch : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt;" Usage="tableTransactionalBatch.SubmitBatch cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Submits the batch transaction to the service for execution.
            The sub-operations contained in the batch will either succeed or fail together as a transaction.
            </summary>
        <returns>
          <see cref="T:Azure.Response`1" /> containing a <see cref="T:Azure.Data.Tables.Models.TableBatchResponse" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException" />
        <exception cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="SubmitBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt;&gt; SubmitBatchAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Data.Tables.Models.TableBatchResponse&gt;&gt; SubmitBatchAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.SubmitBatchAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitBatchAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of TableBatchResponse))" />
      <MemberSignature Language="F#" Value="abstract member SubmitBatchAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt;&gt;&#xA;override this.SubmitBatchAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt;&gt;" Usage="tableTransactionalBatch.SubmitBatchAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Data.Tables.Models.TableBatchResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
        <summary>
            Submits the batch transaction to the service for execution.
            The sub-operations contained in the batch will either succeed or fail together as a transaction.
            </summary>
        <returns>
          <see cref="T:Azure.Response`1" /> containing a <see cref="T:Azure.Data.Tables.Models.TableBatchResponse" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException" />
        <exception cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="TryGetFailedEntityFromException">
      <MemberSignature Language="C#" Value="public virtual bool TryGetFailedEntityFromException (Azure.RequestFailedException exception, out Azure.Data.Tables.ITableEntity failedEntity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetFailedEntityFromException(class Azure.RequestFailedException exception, [out] class Azure.Data.Tables.ITableEntity&amp; failedEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.TryGetFailedEntityFromException(Azure.RequestFailedException,Azure.Data.Tables.ITableEntity@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetFailedEntityFromException (exception As RequestFailedException, ByRef failedEntity As ITableEntity) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetFailedEntityFromException : Azure.RequestFailedException * ITableEntity -&gt; bool&#xA;override this.TryGetFailedEntityFromException : Azure.RequestFailedException * ITableEntity -&gt; bool" Usage="tableTransactionalBatch.TryGetFailedEntityFromException (exception, failedEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="Azure.RequestFailedException" />
        <Parameter Name="failedEntity" Type="Azure.Data.Tables.ITableEntity" RefType="out" />
      </Parameters>
      <Docs>
        <param name="exception">The exception thrown from <see cref="M:Azure.Data.Tables.TableTransactionalBatch.SubmitBatch(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Data.Tables.TableTransactionalBatch.SubmitBatchAsync(System.Threading.CancellationToken)" />.</param>
        <param name="failedEntity">If the return value is <c>true</c>, contains the <see cref="T:Azure.Data.Tables.ITableEntity" /> that caused the batch operation to fail.</param>
        <summary>
            Tries to get the entity that caused the batch operation failure from the <see cref="T:Azure.RequestFailedException" />.
            </summary>
        <returns>
          <c>true</c> if the failed entity was retrieved from the exception, else <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEntity&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual void UpdateEntity&lt;T&gt; (T entity, Azure.ETag ifMatch, Azure.Data.Tables.TableUpdateMode mode = Azure.Data.Tables.TableUpdateMode.Merge) where T : class, Azure.Data.Tables.ITableEntity, new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateEntity&lt;class .ctor (class Azure.Data.Tables.ITableEntity) T&gt;(!!T entity, valuetype Azure.ETag ifMatch, valuetype Azure.Data.Tables.TableUpdateMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.UpdateEntity``1(``0,Azure.ETag,Azure.Data.Tables.TableUpdateMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateEntity(Of T As {Class, ITableEntity, New}) (entity As T, ifMatch As ETag, Optional mode As TableUpdateMode = Azure.Data.Tables.TableUpdateMode.Merge)" />
      <MemberSignature Language="F#" Value="abstract member UpdateEntity : 'T * Azure.ETag * Azure.Data.Tables.TableUpdateMode -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))&#xA;override this.UpdateEntity : 'T * Azure.ETag * Azure.Data.Tables.TableUpdateMode -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))" Usage="tableTransactionalBatch.UpdateEntity (entity, ifMatch, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Azure.Data.Tables.ITableEntity</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="T" />
        <Parameter Name="ifMatch" Type="Azure.ETag" />
        <Parameter Name="mode" Type="Azure.Data.Tables.TableUpdateMode" />
      </Parameters>
      <Docs>
        <typeparam name="T">A custom model type that implements <see cref="T:Azure.Data.Tables.ITableEntity" /> or an instance of <see cref="T:Azure.Data.Tables.TableEntity" />.</typeparam>
        <param name="entity">The entity to update.</param>
        <param name="ifMatch">
            The If-Match value to be used for optimistic concurrency.
            If <see cref="F:Azure.ETag.All" /> is specified, the operation will be executed unconditionally.
            If the <see cref="P:Azure.Data.Tables.ITableEntity.ETag" /> value is specified, the operation will fail with a status of 412 (Precondition Failed) if the <see cref="T:Azure.ETag" /> value of the entity in the table does not match.
            </param>
        <param name="mode">Determines the behavior of the Update operation.</param>
        <summary>
            Adds an UpdateEntity request to the batch which
            updates the specified table entity of type <typeparamref name="T" />, if it exists.
            If the <paramref name="mode" /> is <see cref="F:Azure.Data.Tables.TableUpdateMode.Replace" />, the entity will be replaced.
            If the <paramref name="mode" /> is <see cref="F:Azure.Data.Tables.TableUpdateMode.Merge" />, the property values present in the <paramref name="entity" /> will be merged with the existing entity.
            </summary>
        <remarks>
            See <see cref="T:Azure.Data.Tables.TableUpdateMode" /> for more information about the behavior of the <paramref name="mode" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertEntity&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual void UpsertEntity&lt;T&gt; (T entity, Azure.Data.Tables.TableUpdateMode mode = Azure.Data.Tables.TableUpdateMode.Merge) where T : class, Azure.Data.Tables.ITableEntity, new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpsertEntity&lt;class .ctor (class Azure.Data.Tables.ITableEntity) T&gt;(!!T entity, valuetype Azure.Data.Tables.TableUpdateMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Data.Tables.TableTransactionalBatch.UpsertEntity``1(``0,Azure.Data.Tables.TableUpdateMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpsertEntity(Of T As {Class, ITableEntity, New}) (entity As T, Optional mode As TableUpdateMode = Azure.Data.Tables.TableUpdateMode.Merge)" />
      <MemberSignature Language="F#" Value="abstract member UpsertEntity : 'T * Azure.Data.Tables.TableUpdateMode -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))&#xA;override this.UpsertEntity : 'T * Azure.Data.Tables.TableUpdateMode -&gt; unit (requires 'T : null and 'T :&gt; Azure.Data.Tables.ITableEntity and 'T : (new : unit -&gt; 'T))" Usage="tableTransactionalBatch.UpsertEntity (entity, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Data.Tables</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Azure.Data.Tables.ITableEntity</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="T" />
        <Parameter Name="mode" Type="Azure.Data.Tables.TableUpdateMode" />
      </Parameters>
      <Docs>
        <typeparam name="T">A custom model type that implements <see cref="T:Azure.Data.Tables.ITableEntity" /> or an instance of <see cref="T:Azure.Data.Tables.TableEntity" />.</typeparam>
        <param name="entity">The entity to upsert.</param>
        <param name="mode">Determines the behavior of the update operation when the entity already exists in the table. See <see cref="T:Azure.Data.Tables.TableUpdateMode" /> for more details.</param>
        <summary>
            Replaces the specified table entity of type <typeparamref name="T" />, if it exists. Creates the entity if it does not exist.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
