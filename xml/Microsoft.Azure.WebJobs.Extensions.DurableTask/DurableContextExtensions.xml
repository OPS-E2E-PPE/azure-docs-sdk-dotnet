<Type Name="DurableContextExtensions" FullName="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions">
  <TypeSignature Language="C#" Value="public static class DurableContextExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DurableContextExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DurableContextExtensions" />
  <TypeSignature Language="F#" Value="type DurableContextExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines convenient overloads for calling the context methods, for all the contexts.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CallActivityAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CallActivityAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CallActivityAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallActivityAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallActivityAsync (context As IDurableOrchestrationContext, functionName As String, input As Object) As Task" />
      <MemberSignature Language="F#" Value="static member CallActivityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * obj -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallActivityAsync (context, functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallActivityWithRetryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CallActivityWithRetryAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CallActivityWithRetryAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallActivityWithRetryAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallActivityWithRetryAsync (context As IDurableOrchestrationContext, functionName As String, retryOptions As RetryOptions, input As Object) As Task" />
      <MemberSignature Language="F#" Value="static member CallActivityWithRetryAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions * obj -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallActivityWithRetryAsync (context, functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="retryOptions">The retry option for the activity function.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called activity function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallEntityAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CallEntityAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CallEntityAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallEntityAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallEntityAsync (context As IDurableOrchestrationContext, entityId As EntityId, operationName As String) As Task" />
      <MemberSignature Language="F#" Value="static member CallEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * string -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallEntityAsync (context, entityId, operationName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="operationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="entityId">The target entity.</param>
        <param name="operationName">The name of the operation.</param>
        <summary>
            Calls an operation on an entity and waits for it to complete.
            </summary>
        <returns>A task representing the completion of the operation on the entity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallEntityAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; CallEntityAsync&lt;TResult&gt; (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallEntityAsync&lt;TResult&gt;(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallEntityAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallEntityAsync(Of TResult) (context As IDurableOrchestrationContext, entityId As EntityId, operationName As String) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member CallEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * string -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallEntityAsync (context, entityId, operationName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="operationName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The JSON-serializable result type of the operation.</typeparam>
        <param name="context">The context object.</param>
        <param name="entityId">The target entity.</param>
        <param name="operationName">The name of the operation.</param>
        <summary>
            Calls an operation on an entity and returns the result asynchronously.
            </summary>
        <returns>A task representing the result of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CallSubOrchestratorAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CallSubOrchestratorAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallSubOrchestratorAsync (context As IDurableOrchestrationContext, functionName As String, input As Object) As Task" />
      <MemberSignature Language="F#" Value="static member CallSubOrchestratorAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * obj -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorAsync (context, functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The sub-orchestrator function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CallSubOrchestratorAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CallSubOrchestratorAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallSubOrchestratorAsync (context As IDurableOrchestrationContext, functionName As String, instanceId As String, input As Object) As Task" />
      <MemberSignature Language="F#" Value="static member CallSubOrchestratorAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * string * obj -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorAsync (context, functionName, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt; (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt;(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallSubOrchestratorAsync(Of TResult) (context As IDurableOrchestrationContext, functionName As String, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member CallSubOrchestratorAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorAsync (context, functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestration function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorWithRetryAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallSubOrchestratorWithRetryAsync (context As IDurableOrchestrationContext, functionName As String, retryOptions As RetryOptions, input As Object) As Task" />
      <MemberSignature Language="F#" Value="static member CallSubOrchestratorWithRetryAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions * obj -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorWithRetryAsync (context, functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CallSubOrchestratorWithRetryAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorWithRetryAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallSubOrchestratorWithRetryAsync (context As IDurableOrchestrationContext, functionName As String, retryOptions As RetryOptions, instanceId As String, input As Object) As Task" />
      <MemberSignature Language="F#" Value="static member CallSubOrchestratorWithRetryAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions * string * obj -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorWithRetryAsync (context, functionName, retryOptions, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt; (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt;(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string functionName, class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorWithRetryAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CallSubOrchestratorWithRetryAsync(Of TResult) (context As IDurableOrchestrationContext, functionName As String, retryOptions As RetryOptions, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="static member CallSubOrchestratorWithRetryAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CallSubOrchestratorWithRetryAsync (context, functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="context">The context object.</param>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReplaySafeLogger">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Logging.ILogger CreateReplaySafeLogger (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, Microsoft.Extensions.Logging.ILogger logger);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.Logging.ILogger CreateReplaySafeLogger(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, class Microsoft.Extensions.Logging.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CreateReplaySafeLogger(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,Microsoft.Extensions.Logging.ILogger)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateReplaySafeLogger (context As IDurableOrchestrationContext, logger As ILogger) As ILogger" />
      <MemberSignature Language="F#" Value="static member CreateReplaySafeLogger : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * Microsoft.Extensions.Logging.ILogger -&gt; Microsoft.Extensions.Logging.ILogger" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CreateReplaySafeLogger (context, logger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="logger">An instance of ILogger.</param>
        <summary>
            Returns an instance of ILogger that is replay safe, ensuring the logger logs only when the orchestrator
            is not replaying that line of code.
            </summary>
        <returns>An instance of a replay safe ILogger.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateTimer (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, DateTime fireAt, System.Threading.CancellationToken cancelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateTimer(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, valuetype System.DateTime fireAt, valuetype System.Threading.CancellationToken cancelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CreateTimer(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.DateTime,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateTimer (context As IDurableOrchestrationContext, fireAt As DateTime, cancelToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="static member CreateTimer : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * DateTime * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.CreateTimer (context, fireAt, cancelToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="fireAt" Type="System.DateTime" />
        <Parameter Name="cancelToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="fireAt">The time at which the timer should expire.</param>
        <param name="cancelToken">The <c>CancellationToken</c> to use for cancelling the timer.</param>
        <summary>
            Creates a durable timer that expires at a specified time.
            </summary>
        <returns>A durable task that completes when the durable timer expires.</returns>
        <remarks>
            All durable timers created using this method must either expire or be cancelled
            using the <paramref name="cancelToken" /> before the orchestrator function completes.
            Otherwise the underlying framework will keep the instance alive until the timer expires.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt; GetStatusAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt; GetStatusAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.GetStatusAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStatusAsync (client As IDurableOrchestrationClient, instanceId As String) As Task(Of DurableOrchestrationStatus)" />
      <MemberSignature Language="F#" Value="static member GetStatusAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.GetStatusAsync (client, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="instanceId">The ID of the orchestration instance to query.</param>
        <summary>
            Gets the status of the specified orchestration instance.
            </summary>
        <returns>Returns a task which completes when the status has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt; GetStatusAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string instanceId, bool showHistory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt; GetStatusAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string instanceId, bool showHistory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.GetStatusAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStatusAsync (client As IDurableOrchestrationClient, instanceId As String, showHistory As Boolean) As Task(Of DurableOrchestrationStatus)" />
      <MemberSignature Language="F#" Value="static member GetStatusAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.GetStatusAsync (client, instanceId, showHistory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="showHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="instanceId">The ID of the orchestration instance to query.</param>
        <param name="showHistory">Boolean marker for including execution history in the response.</param>
        <summary>
            Gets the status of the specified orchestration instance.
            </summary>
        <returns>Returns a task which completes when the status has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RaiseEventAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string instanceId, string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RaiseEventAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string instanceId, string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.RaiseEventAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RaiseEventAsync (client As IDurableOrchestrationClient, instanceId As String, eventName As String) As Task" />
      <MemberSignature Language="F#" Value="static member RaiseEventAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * string * string -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.RaiseEventAsync (client, instanceId, eventName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="instanceId">The ID of the orchestration instance that will handle the event.</param>
        <param name="eventName">The name of the event.</param>
        <summary>
            Sends an event notification message to a waiting orchestration instance.
            </summary>
        <returns>A task that completes when the event notification message has been enqueued.</returns>
        <remarks>
          <para>
            In order to handle the event, the target orchestration instance must be waiting for an
            event named <paramref name="eventName" /> using the
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent``1(System.String)" /> API.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentException">The instance id does not corespond to a valid orchestration instance.</exception>
        <exception cref="T:System.InvalidOperationException">The orchestration instance with the provided instance id is not running.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartNewAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; StartNewAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string orchestratorFunctionName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; StartNewAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string orchestratorFunctionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.StartNewAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartNewAsync (client As IDurableOrchestrationClient, orchestratorFunctionName As String) As Task(Of String)" />
      <MemberSignature Language="F#" Value="static member StartNewAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.StartNewAsync (client, orchestratorFunctionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="orchestratorFunctionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="orchestratorFunctionName">The name of the orchestrator function to start.</param>
        <summary>
            Starts a new execution of the specified orchestrator function.
            </summary>
        <returns>A task that completes when the orchestration is started. The task contains the instance id of the started
            orchestratation instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StartNewAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; StartNewAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string orchestratorFunctionName, string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; StartNewAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string orchestratorFunctionName, string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.StartNewAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartNewAsync (client As IDurableOrchestrationClient, orchestratorFunctionName As String, instanceId As String) As Task(Of String)" />
      <MemberSignature Language="F#" Value="static member StartNewAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.StartNewAsync (client, orchestratorFunctionName, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="orchestratorFunctionName" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="orchestratorFunctionName">The name of the orchestrator function to start.</param>
        <param name="instanceId">The ID to use for the new orchestration instance.</param>
        <summary>
            Starts a new execution of the specified orchestrator function.
            </summary>
        <returns>A task that completes when the orchestration is started. The task contains the instance id of the started
            orchestratation instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StartNewAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; StartNewAsync&lt;T&gt; (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string orchestratorFunctionName, T input) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; StartNewAsync&lt;class T&gt;(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, string orchestratorFunctionName, !!T input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.StartNewAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartNewAsync(Of T As Class) (client As IDurableOrchestrationClient, orchestratorFunctionName As String, input As T) As Task(Of String)" />
      <MemberSignature Language="F#" Value="static member StartNewAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * string * 'T -&gt; System.Threading.Tasks.Task&lt;string&gt; (requires 'T : null)" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.StartNewAsync (client, orchestratorFunctionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="orchestratorFunctionName" Type="System.String" />
        <Parameter Name="input" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the input value for the orchestrator function.</typeparam>
        <param name="client">The client object.</param>
        <param name="orchestratorFunctionName">The name of the orchestrator function to start.</param>
        <param name="input">JSON-serializeable input value for the orchestrator function.</param>
        <summary>
            Starts a new execution of the specified orchestrator function.
            </summary>
        <returns>A task that completes when the orchestration is started. The task contains the instance id of the started
            orchestratation instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionOrCreateCheckStatusResponseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.IActionResult&gt; WaitForCompletionOrCreateCheckStatusResponseAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, Microsoft.AspNetCore.Http.HttpRequest request, string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Mvc.IActionResult&gt; WaitForCompletionOrCreateCheckStatusResponseAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, class Microsoft.AspNetCore.Http.HttpRequest request, string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,Microsoft.AspNetCore.Http.HttpRequest,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForCompletionOrCreateCheckStatusResponseAsync (client As IDurableOrchestrationClient, request As HttpRequest, instanceId As String) As Task(Of IActionResult)" />
      <MemberSignature Language="F#" Value="static member WaitForCompletionOrCreateCheckStatusResponseAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * Microsoft.AspNetCore.Http.HttpRequest * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.IActionResult&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync (client, request, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.IActionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="request">The HTTP request that triggered the current function.</param>
        <param name="instanceId">The unique ID of the instance to check.</param>
        <summary>
            Creates an HTTP response which either contains a payload of management URLs for a non-completed instance
            or contains the payload containing the output of the completed orchestration.
            </summary>
        <returns>An HTTP response which may include a 202 and location header or a 200 with the durable function output in the response body.</returns>
        <remarks>
            If the orchestration instance completes within the default 10 second timeout, then the HTTP response payload will
            contain the output of the orchestration instance formatted as JSON. However, if the orchestration does not
            complete within this timeout, then the HTTP response will be identical to that of the
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.CreateCheckStatusResponse(Microsoft.AspNetCore.Http.HttpRequest,System.String,System.Boolean)" /> API.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionOrCreateCheckStatusResponseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, System.Net.Http.HttpRequestMessage request, string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, class System.Net.Http.HttpRequestMessage request, string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.Net.Http.HttpRequestMessage,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForCompletionOrCreateCheckStatusResponseAsync (client As IDurableOrchestrationClient, request As HttpRequestMessage, instanceId As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="F#" Value="static member WaitForCompletionOrCreateCheckStatusResponseAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * System.Net.Http.HttpRequestMessage * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync (client, request, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="request">The HTTP request that triggered the current function.</param>
        <param name="instanceId">The unique ID of the instance to check.</param>
        <summary>
            Creates an HTTP response which either contains a payload of management URLs for a non-completed instance
            or contains the payload containing the output of the completed orchestration.
            </summary>
        <returns>An HTTP response which may include a 202 and location header or a 200 with the durable function output in the response body.</returns>
        <remarks>
            If the orchestration instance completes within the default 10 second timeout, then the HTTP response payload will
            contain the output of the orchestration instance formatted as JSON. However, if the orchestration does not
            complete within this timeout, then the HTTP response will be identical to that of the
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.CreateCheckStatusResponse(System.Net.Http.HttpRequestMessage,System.String,System.Boolean)" /> API.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionOrCreateCheckStatusResponseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.IActionResult&gt; WaitForCompletionOrCreateCheckStatusResponseAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, Microsoft.AspNetCore.Http.HttpRequest request, string instanceId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Mvc.IActionResult&gt; WaitForCompletionOrCreateCheckStatusResponseAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, class Microsoft.AspNetCore.Http.HttpRequest request, string instanceId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,Microsoft.AspNetCore.Http.HttpRequest,System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForCompletionOrCreateCheckStatusResponseAsync (client As IDurableOrchestrationClient, request As HttpRequest, instanceId As String, timeout As TimeSpan) As Task(Of IActionResult)" />
      <MemberSignature Language="F#" Value="static member WaitForCompletionOrCreateCheckStatusResponseAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * Microsoft.AspNetCore.Http.HttpRequest * string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.IActionResult&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync (client, request, instanceId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Mvc.IActionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="request">The HTTP request that triggered the current function.</param>
        <param name="instanceId">The unique ID of the instance to check.</param>
        <param name="timeout">Total allowed timeout for output from the durable function. The default value is 10 seconds.</param>
        <summary>
            Creates an HTTP response which either contains a payload of management URLs for a non-completed instance
            or contains the payload containing the output of the completed orchestration.
            </summary>
        <returns>An HTTP response which may include a 202 and location header or a 200 with the durable function output in the response body.</returns>
        <remarks>
            If the orchestration instance completes within the specified timeout, then the HTTP response payload will
            contain the output of the orchestration instance formatted as JSON. However, if the orchestration does not
            complete within the specified timeout, then the HTTP response will be identical to that of the
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.CreateCheckStatusResponse(Microsoft.AspNetCore.Http.HttpRequest,System.String,System.Boolean)" /> API.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionOrCreateCheckStatusResponseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, System.Net.Http.HttpRequestMessage request, string instanceId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient client, class System.Net.Http.HttpRequestMessage request, string instanceId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient,System.Net.Http.HttpRequestMessage,System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForCompletionOrCreateCheckStatusResponseAsync (client As IDurableOrchestrationClient, request As HttpRequestMessage, instanceId As String, timeout As TimeSpan) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="F#" Value="static member WaitForCompletionOrCreateCheckStatusResponseAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient * System.Net.Http.HttpRequestMessage * string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForCompletionOrCreateCheckStatusResponseAsync (client, request, instanceId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient" RefType="this" />
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">The client object.</param>
        <param name="request">The HTTP request that triggered the current function.</param>
        <param name="instanceId">The unique ID of the instance to check.</param>
        <param name="timeout">Total allowed timeout for output from the durable function. The default value is 10 seconds.</param>
        <summary>
            Creates an HTTP response which either contains a payload of management URLs for a non-completed instance
            or contains the payload containing the output of the completed orchestration.
            </summary>
        <returns>An HTTP response which may include a 202 and location header or a 200 with the durable function output in the response body.</returns>
        <remarks>
            If the orchestration instance completes within the specified timeout, then the HTTP response payload will
            contain the output of the orchestration instance formatted as JSON. However, if the orchestration does not
            complete within the specified timeout, then the HTTP response will be identical to that of the
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.CreateCheckStatusResponse(System.Net.Http.HttpRequestMessage,System.String,System.Boolean)" /> API.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WaitForExternalEvent (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WaitForExternalEvent(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForExternalEvent (context As IDurableOrchestrationContext, name As String) As Task" />
      <MemberSignature Language="F#" Value="static member WaitForExternalEvent : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent (context, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="name">The name of the event to wait for.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" />.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" /> with the object parameter set to <c>null</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WaitForExternalEvent (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WaitForExternalEvent(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForExternalEvent (context As IDurableOrchestrationContext, name As String, timeout As TimeSpan) As Task" />
      <MemberSignature Language="F#" Value="static member WaitForExternalEvent : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * TimeSpan -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent (context, name, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to throw a TimeoutException.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" />.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" /> with the object parameter set to <c>null</c>.
            </remarks>
        <exception cref="T:System.TimeoutException">
            The external event was not received before the timeout expired.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WaitForExternalEvent (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, TimeSpan timeout, System.Threading.CancellationToken cancelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WaitForExternalEvent(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForExternalEvent (context As IDurableOrchestrationContext, name As String, timeout As TimeSpan, cancelToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="static member WaitForExternalEvent : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent (context, name, timeout, cancelToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancelToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="context">The context object.</param>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to throw a TimeoutException.</param>
        <param name="cancelToken">The <c>CancellationToken</c> to use for cancelling <paramref name="timeout" />'s internal timer.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" />.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" /> with the object parameter set to <c>null</c>.
            </remarks>
        <exception cref="T:System.TimeoutException">
            The external event was not received before the timeout expired.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForExternalEvent(Of T) (context As IDurableOrchestrationContext, name As String, timeout As TimeSpan) As Task(Of T)" />
      <MemberSignature Language="F#" Value="static member WaitForExternalEvent : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent (context, name, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="context">The context object.</param>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to throw a TimeoutException.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
        <exception cref="T:System.TimeoutException">
            The external event was not received before the timeout expired.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, TimeSpan timeout, T defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext context, string name, valuetype System.TimeSpan timeout, !!T defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext,System.String,System.TimeSpan,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitForExternalEvent(Of T) (context As IDurableOrchestrationContext, name As String, timeout As TimeSpan, defaultValue As T) As Task(Of T)" />
      <MemberSignature Language="F#" Value="static member WaitForExternalEvent : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext * string * TimeSpan * 'T -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions.WaitForExternalEvent (context, name, timeout, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="defaultValue" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="context">The context object.</param>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to return the value in the <paramref name="defaultValue" /> parameter.</param>
        <param name="defaultValue">The default value to return if the timeout expires before the external event is received.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received, or returns the value of <paramref name="defaultValue" />
            if the timeout expires.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
