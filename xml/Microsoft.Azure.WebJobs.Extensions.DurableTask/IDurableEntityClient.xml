<Type Name="IDurableEntityClient" FullName="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient">
  <TypeSignature Language="C#" Value="public interface IDurableEntityClient" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDurableEntityClient" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDurableEntityClient" />
  <TypeSignature Language="F#" Value="type IDurableEntityClient = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Provides functionality available to durable entity clients.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanEntityStorageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.CleanEntityStorageResult&gt; CleanEntityStorageAsync (bool removeEmptyEntities, bool releaseOrphanedLocks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.CleanEntityStorageResult&gt; CleanEntityStorageAsync(bool removeEmptyEntities, bool releaseOrphanedLocks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.CleanEntityStorageAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CleanEntityStorageAsync (removeEmptyEntities As Boolean, releaseOrphanedLocks As Boolean, cancellationToken As CancellationToken) As Task(Of CleanEntityStorageResult)" />
      <MemberSignature Language="F#" Value="abstract member CleanEntityStorageAsync : bool * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.CleanEntityStorageResult&gt;" Usage="iDurableEntityClient.CleanEntityStorageAsync (removeEmptyEntities, releaseOrphanedLocks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.CleanEntityStorageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="removeEmptyEntities" Type="System.Boolean" />
        <Parameter Name="releaseOrphanedLocks" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="removeEmptyEntities">Whether to remove empty entities.</param>
        <param name="releaseOrphanedLocks">Whether to release orphaned locks.</param>
        <param name="cancellationToken">Cancellation token that can be used to cancel the operation.</param>
        <summary>
            Removes empty entities from storage and releases orphaned locks.
            </summary>
        <returns>A task that completes when the operation is finished.</returns>
        <remarks>An entity is considered empty, and is removed, if it has no state, is not locked, and has
            been idle for more than <see cref="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskOptions.EntityMessageReorderWindowInMinutes" /> minutes.
            Locks are considered orphaned, and are released, if the orchestration that holds them is not in state <see cref="F:Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus.Running" />. This
            should not happen under normal circumstances, but can occur if the orchestration instance holding the lock
            exhibits replay nondeterminism failures, or if it is explicitly purged.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListEntitiesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQueryResult&gt; ListEntitiesAsync (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQuery query, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQueryResult&gt; ListEntitiesAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQuery query, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.ListEntitiesAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListEntitiesAsync (query As EntityQuery, cancellationToken As CancellationToken) As Task(Of EntityQueryResult)" />
      <MemberSignature Language="F#" Value="abstract member ListEntitiesAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQueryResult&gt;" Usage="iDurableEntityClient.ListEntitiesAsync (query, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="query">Return entity instances that match the specified query conditions.</param>
        <param name="cancellationToken">Cancellation token that can be used to cancel the query operation.</param>
        <summary>
            Gets the status of all entity instances with paging that match the specified query conditions.
            </summary>
        <returns>Returns a page of entity instances and a continuation token for fetching the next page.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEntityStateAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityStateResponse&lt;T&gt;&gt; ReadEntityStateAsync&lt;T&gt; (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string taskHubName = default, string connectionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityStateResponse`1&lt;!!T&gt;&gt; ReadEntityStateAsync&lt;T&gt;(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string taskHubName, string connectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.ReadEntityStateAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadEntityStateAsync(Of T) (entityId As EntityId, Optional taskHubName As String = Nothing, Optional connectionName As String = Nothing) As Task(Of EntityStateResponse(Of T))" />
      <MemberSignature Language="F#" Value="abstract member ReadEntityStateAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * string * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityStateResponse&lt;'T&gt;&gt;" Usage="iDurableEntityClient.ReadEntityStateAsync (entityId, taskHubName, connectionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityStateResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="taskHubName" Type="System.String" />
        <Parameter Name="connectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">The JSON-serializable type of the entity.</typeparam>
        <param name="entityId">The target entity.</param>
        <param name="taskHubName">The TaskHubName of the target entity.</param>
        <param name="connectionName">The name of the connection string associated with <paramref name="taskHubName" />.</param>
        <summary>
            Tries to read the current state of an entity. Returns default(<typeparamref name="T" />) if the entity does not
            exist, or if the JSON-serialized state of the entity is larger than 16KB.
            </summary>
        <returns>a response containing the current state of the entity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntityAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignalEntityAsync (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName, object operationInput = default, string taskHubName = default, string connectionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignalEntityAsync(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName, object operationInput, string taskHubName, string connectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.String,System.Object,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalEntityAsync (entityId As EntityId, operationName As String, Optional operationInput As Object = Nothing, Optional taskHubName As String = Nothing, Optional connectionName As String = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignalEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * string * obj * string * string -&gt; System.Threading.Tasks.Task" Usage="iDurableEntityClient.SignalEntityAsync (entityId, operationName, operationInput, taskHubName, connectionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="operationInput" Type="System.Object" />
        <Parameter Name="taskHubName" Type="System.String" />
        <Parameter Name="connectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityId">The target entity.</param>
        <param name="operationName">The name of the operation.</param>
        <param name="operationInput">The input for the operation.</param>
        <param name="taskHubName">The TaskHubName of the target entity.</param>
        <param name="connectionName">The name of the connection string associated with <paramref name="taskHubName" />.</param>
        <summary>
            Signals an entity to perform an operation.
            </summary>
        <returns>A task that completes when the message has been reliably enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntityAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignalEntityAsync (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, DateTime scheduledTimeUtc, string operationName, object operationInput = default, string taskHubName = default, string connectionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignalEntityAsync(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, valuetype System.DateTime scheduledTimeUtc, string operationName, object operationInput, string taskHubName, string connectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.DateTime,System.String,System.Object,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalEntityAsync (entityId As EntityId, scheduledTimeUtc As DateTime, operationName As String, Optional operationInput As Object = Nothing, Optional taskHubName As String = Nothing, Optional connectionName As String = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignalEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * DateTime * string * obj * string * string -&gt; System.Threading.Tasks.Task" Usage="iDurableEntityClient.SignalEntityAsync (entityId, scheduledTimeUtc, operationName, operationInput, taskHubName, connectionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="scheduledTimeUtc" Type="System.DateTime" />
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="operationInput" Type="System.Object" />
        <Parameter Name="taskHubName" Type="System.String" />
        <Parameter Name="connectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityId">The target entity.</param>
        <param name="scheduledTimeUtc">The time at which to start the operation.</param>
        <param name="operationName">The name of the operation.</param>
        <param name="operationInput">The input for the operation.</param>
        <param name="taskHubName">The TaskHubName of the target entity.</param>
        <param name="connectionName">The name of the connection string associated with <paramref name="taskHubName" />.</param>
        <summary>
            Signals an entity to perform an operation, at a specified time.
            </summary>
        <returns>A task that completes when the message has been reliably enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntityAsync&lt;TEntityInterface&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt; (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, Action&lt;TEntityInterface&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt;(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, class System.Action`1&lt;!!TEntityInterface&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalEntityAsync(Of TEntityInterface) (entityId As EntityId, operation As Action(Of TEntityInterface)) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignalEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * Action&lt;'EntityInterface&gt; -&gt; System.Threading.Tasks.Task" Usage="iDurableEntityClient.SignalEntityAsync (entityId, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntityInterface" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="operation" Type="System.Action&lt;TEntityInterface&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntityInterface">Entity interface.</typeparam>
        <param name="entityId">The target entity.</param>
        <param name="operation">A delegate that performs the desired operation on the entity.</param>
        <summary>
            Signals an entity to perform an operation.
            </summary>
        <returns>A task that completes when the message has been reliably enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntityAsync&lt;TEntityInterface&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt; (string entityKey, Action&lt;TEntityInterface&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt;(string entityKey, class System.Action`1&lt;!!TEntityInterface&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync``1(System.String,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalEntityAsync(Of TEntityInterface) (entityKey As String, operation As Action(Of TEntityInterface)) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignalEntityAsync : string * Action&lt;'EntityInterface&gt; -&gt; System.Threading.Tasks.Task" Usage="iDurableEntityClient.SignalEntityAsync (entityKey, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntityInterface" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityKey" Type="System.String" />
        <Parameter Name="operation" Type="System.Action&lt;TEntityInterface&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntityInterface">Entity interface.</typeparam>
        <param name="entityKey">The target entity key.</param>
        <param name="operation">A delegate that performs the desired operation on the entity.</param>
        <summary>
            Signals an entity to perform an operation.
            </summary>
        <returns>A task that completes when the message has been reliably enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntityAsync&lt;TEntityInterface&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt; (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, DateTime scheduledTimeUtc, Action&lt;TEntityInterface&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt;(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, valuetype System.DateTime scheduledTimeUtc, class System.Action`1&lt;!!TEntityInterface&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.DateTime,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalEntityAsync(Of TEntityInterface) (entityId As EntityId, scheduledTimeUtc As DateTime, operation As Action(Of TEntityInterface)) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignalEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * DateTime * Action&lt;'EntityInterface&gt; -&gt; System.Threading.Tasks.Task" Usage="iDurableEntityClient.SignalEntityAsync (entityId, scheduledTimeUtc, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntityInterface" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="scheduledTimeUtc" Type="System.DateTime" />
        <Parameter Name="operation" Type="System.Action&lt;TEntityInterface&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntityInterface">Entity interface.</typeparam>
        <param name="entityId">The target entity.</param>
        <param name="scheduledTimeUtc">The time at which to start the operation.</param>
        <param name="operation">A delegate that performs the desired operation on the entity.</param>
        <summary>
            Signals an entity to perform an operation, at a specified time.
            </summary>
        <returns>A task that completes when the message has been reliably enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntityAsync&lt;TEntityInterface&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt; (string entityKey, DateTime scheduledTimeUtc, Action&lt;TEntityInterface&gt; operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignalEntityAsync&lt;TEntityInterface&gt;(string entityKey, valuetype System.DateTime scheduledTimeUtc, class System.Action`1&lt;!!TEntityInterface&gt; operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync``1(System.String,System.DateTime,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SignalEntityAsync(Of TEntityInterface) (entityKey As String, scheduledTimeUtc As DateTime, operation As Action(Of TEntityInterface)) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignalEntityAsync : string * DateTime * Action&lt;'EntityInterface&gt; -&gt; System.Threading.Tasks.Task" Usage="iDurableEntityClient.SignalEntityAsync (entityKey, scheduledTimeUtc, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntityInterface" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityKey" Type="System.String" />
        <Parameter Name="scheduledTimeUtc" Type="System.DateTime" />
        <Parameter Name="operation" Type="System.Action&lt;TEntityInterface&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntityInterface">Entity interface.</typeparam>
        <param name="entityKey">The target entity key.</param>
        <param name="scheduledTimeUtc">The time at which to start the operation.</param>
        <param name="operation">A delegate that performs the desired operation on the entity.</param>
        <summary>
            Signals an entity to perform an operation, at a specified time.
            </summary>
        <returns>A task that completes when the message has been reliably enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaskHubName">
      <MemberSignature Language="C#" Value="public string TaskHubName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TaskHubName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.TaskHubName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TaskHubName As String" />
      <MemberSignature Language="F#" Value="member this.TaskHubName : string" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.TaskHubName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the task hub configured on this client instance.
            </summary>
        <value>
            The name of the task hub.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
