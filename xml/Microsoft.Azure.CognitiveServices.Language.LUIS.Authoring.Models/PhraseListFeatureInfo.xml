<Type Name="PhraseListFeatureInfo" FullName="Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo">
  <TypeSignature Language="C#" Value="public class PhraseListFeatureInfo : Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.FeatureInfoObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PhraseListFeatureInfo extends Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.FeatureInfoObject" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class PhraseListFeatureInfo&#xA;Inherits FeatureInfoObject" />
  <TypeSignature Language="F#" Value="type PhraseListFeatureInfo = class&#xA;    inherit FeatureInfoObject" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.FeatureInfoObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Phraselist Feature.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhraseListFeatureInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the PhraseListFeatureInfo class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhraseListFeatureInfo (Nullable&lt;int&gt; id = null, string name = null, Nullable&lt;bool&gt; isActive = null, string phrases = null, Nullable&lt;bool&gt; isExchangeable = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Nullable`1&lt;int32&gt; id, string name, valuetype System.Nullable`1&lt;bool&gt; isActive, string phrases, valuetype System.Nullable`1&lt;bool&gt; isExchangeable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo.#ctor(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional id As Nullable(Of Integer) = null, Optional name As String = null, Optional isActive As Nullable(Of Boolean) = null, Optional phrases As String = null, Optional isExchangeable As Nullable(Of Boolean) = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo : Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; -&gt; Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo" Usage="new Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo (id, name, isActive, phrases, isExchangeable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isActive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="phrases" Type="System.String" />
        <Parameter Name="isExchangeable" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="id">A six-digit ID used for Features.</param>
        <param name="name">The name of the Feature.</param>
        <param name="isActive">Indicates if the feature is enabled.</param>
        <param name="phrases">A list of comma-separated values.</param>
        <param name="isExchangeable">An exchangeable phrase list feature
            are serves as single feature to the LUIS underlying training
            algorithm. It is used as a lexicon lookup feature where its value
            is 1 if the lexicon contains a given word or 0 if it doesn’t. Think
            of an exchangeable as a synonyms list. A non-exchangeable phrase
            list feature has all the phrases in the list serve as separate
            features to the underlying training algorithm. So, if you your
            phrase list feature contains 5 phrases, they will be mapped to 5
            separate features. You can think of the non-exchangeable phrase
            list feature as an additional bag of words that you are willing to
            add to LUIS existing vocabulary features. Think of a
            non-exchangeable as set of different words. Default value is
            true.</param>
        <summary>
            Initializes a new instance of the PhraseListFeatureInfo class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExchangeable">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsExchangeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsExchangeable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo.IsExchangeable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsExchangeable As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.IsExchangeable : Nullable&lt;bool&gt; with get, set" Usage="Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo.IsExchangeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="isExchangeable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets an exchangeable phrase list feature are serves as
            single feature to the LUIS underlying training algorithm. It is
            used as a lexicon lookup feature where its value is 1 if the
            lexicon contains a given word or 0 if it doesn’t. Think of an
            exchangeable as a synonyms list. A non-exchangeable phrase list
            feature has all the phrases in the list serve as separate features
            to the underlying training algorithm. So, if you your phrase list
            feature contains 5 phrases, they will be mapped to 5 separate
            features. You can think of the non-exchangeable phrase list feature
            as an additional bag of words that you are willing to add to LUIS
            existing vocabulary features. Think of a non-exchangeable as set of
            different words. Default value is true.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phrases">
      <MemberSignature Language="C#" Value="public string Phrases { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Phrases" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo.Phrases" />
      <MemberSignature Language="VB.NET" Value="Public Property Phrases As String" />
      <MemberSignature Language="F#" Value="member this.Phrases : string with get, set" Usage="Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring.Models.PhraseListFeatureInfo.Phrases" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.LUIS.Authoring</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="phrases")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a list of comma-separated values.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>