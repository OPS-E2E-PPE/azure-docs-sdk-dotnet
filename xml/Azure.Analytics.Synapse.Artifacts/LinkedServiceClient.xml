<Type Name="LinkedServiceClient" FullName="Azure.Analytics.Synapse.Artifacts.LinkedServiceClient">
  <TypeSignature Language="C#" Value="public class LinkedServiceClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinkedServiceClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient" />
  <TypeSignature Language="VB.NET" Value="Public Class LinkedServiceClient" />
  <TypeSignature Language="F#" Value="type LinkedServiceClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The LinkedService service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LinkedServiceClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of LinkedServiceClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkedServiceClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Synapse.Artifacts.LinkedServiceClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceClient" Usage="new Azure.Analytics.Synapse.Artifacts.LinkedServiceClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">To be added.</param>
        <param name="credential">To be added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkedServiceClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Synapse.Artifacts.ArtifactsClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Synapse.Artifacts.ArtifactsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Analytics.Synapse.Artifacts.ArtifactsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As ArtifactsClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Synapse.Artifacts.LinkedServiceClient : Uri * Azure.Core.TokenCredential * Azure.Analytics.Synapse.Artifacts.ArtifactsClientOptions -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceClient" Usage="new Azure.Analytics.Synapse.Artifacts.LinkedServiceClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Synapse.Artifacts.ArtifactsClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">To be added.</param>
        <param name="credential">To be added.</param>
        <param name="options">To be added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinkedService">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt; GetLinkedService (string linkedServiceName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt; GetLinkedService(string linkedServiceName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.GetLinkedService(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkedService (linkedServiceName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LinkedServiceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLinkedService : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&#xA;override this.GetLinkedService : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;" Usage="linkedServiceClient.GetLinkedService (linkedServiceName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="ifNoneMatch"> ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinkedServiceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&gt; GetLinkedServiceAsync (string linkedServiceName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&gt; GetLinkedServiceAsync(string linkedServiceName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.GetLinkedServiceAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkedServiceAsync (linkedServiceName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LinkedServiceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLinkedServiceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&gt;&#xA;override this.GetLinkedServiceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&gt;" Usage="linkedServiceClient.GetLinkedServiceAsync (linkedServiceName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="ifNoneMatch"> ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinkedServicesByWorkspace">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt; GetLinkedServicesByWorkspace (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt; GetLinkedServicesByWorkspace(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.GetLinkedServicesByWorkspace(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkedServicesByWorkspace (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of LinkedServiceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLinkedServicesByWorkspace : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&#xA;override this.GetLinkedServicesByWorkspace : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;" Usage="linkedServiceClient.GetLinkedServicesByWorkspace cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists linked services. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinkedServicesByWorkspaceAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt; GetLinkedServicesByWorkspaceAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt; GetLinkedServicesByWorkspaceAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.GetLinkedServicesByWorkspaceAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkedServicesByWorkspaceAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of LinkedServiceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLinkedServicesByWorkspaceAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;&#xA;override this.GetLinkedServicesByWorkspaceAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;" Usage="linkedServiceClient.GetLinkedServicesByWorkspaceAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists linked services. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCreateOrUpdateLinkedService">
      <MemberSignature Language="C#" Value="public virtual Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation StartCreateOrUpdateLinkedService (string linkedServiceName, Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource linkedService, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation StartCreateOrUpdateLinkedService(string linkedServiceName, class Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource linkedService, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.StartCreateOrUpdateLinkedService(System.String,Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartCreateOrUpdateLinkedService (linkedServiceName As String, linkedService As LinkedServiceResource, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As LinkedServiceCreateOrUpdateLinkedServiceOperation" />
      <MemberSignature Language="F#" Value="abstract member StartCreateOrUpdateLinkedService : string * Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource * string * System.Threading.CancellationToken -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation&#xA;override this.StartCreateOrUpdateLinkedService : string * Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource * string * System.Threading.CancellationToken -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation" Usage="linkedServiceClient.StartCreateOrUpdateLinkedService (linkedServiceName, linkedService, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="linkedService" Type="Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="linkedService"> Linked service resource definition. </param>
        <param name="ifMatch"> ETag of the linkedService entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or updates a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> or <paramref name="linkedService" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="StartCreateOrUpdateLinkedServiceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation&gt; StartCreateOrUpdateLinkedServiceAsync (string linkedServiceName, Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource linkedService, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation&gt; StartCreateOrUpdateLinkedServiceAsync(string linkedServiceName, class Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource linkedService, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.StartCreateOrUpdateLinkedServiceAsync(System.String,Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartCreateOrUpdateLinkedServiceAsync (linkedServiceName As String, linkedService As LinkedServiceResource, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of LinkedServiceCreateOrUpdateLinkedServiceOperation)" />
      <MemberSignature Language="F#" Value="abstract member StartCreateOrUpdateLinkedServiceAsync : string * Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation&gt;&#xA;override this.StartCreateOrUpdateLinkedServiceAsync : string * Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation&gt;" Usage="linkedServiceClient.StartCreateOrUpdateLinkedServiceAsync (linkedServiceName, linkedService, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceCreateOrUpdateLinkedServiceOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="linkedService" Type="Azure.Analytics.Synapse.Artifacts.Models.LinkedServiceResource" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="linkedService"> Linked service resource definition. </param>
        <param name="ifMatch"> ETag of the linkedService entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or updates a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> or <paramref name="linkedService" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="StartDeleteLinkedService">
      <MemberSignature Language="C#" Value="public virtual Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation StartDeleteLinkedService (string linkedServiceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation StartDeleteLinkedService(string linkedServiceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.StartDeleteLinkedService(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartDeleteLinkedService (linkedServiceName As String, Optional cancellationToken As CancellationToken = Nothing) As LinkedServiceDeleteLinkedServiceOperation" />
      <MemberSignature Language="F#" Value="abstract member StartDeleteLinkedService : string * System.Threading.CancellationToken -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation&#xA;override this.StartDeleteLinkedService : string * System.Threading.CancellationToken -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation" Usage="linkedServiceClient.StartDeleteLinkedService (linkedServiceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="StartDeleteLinkedServiceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation&gt; StartDeleteLinkedServiceAsync (string linkedServiceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation&gt; StartDeleteLinkedServiceAsync(string linkedServiceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.StartDeleteLinkedServiceAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartDeleteLinkedServiceAsync (linkedServiceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of LinkedServiceDeleteLinkedServiceOperation)" />
      <MemberSignature Language="F#" Value="abstract member StartDeleteLinkedServiceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation&gt;&#xA;override this.StartDeleteLinkedServiceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation&gt;" Usage="linkedServiceClient.StartDeleteLinkedServiceAsync (linkedServiceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceDeleteLinkedServiceOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="StartRenameLinkedService">
      <MemberSignature Language="C#" Value="public virtual Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation StartRenameLinkedService (string linkedServiceName, Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest request, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation StartRenameLinkedService(string linkedServiceName, class Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.StartRenameLinkedService(System.String,Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartRenameLinkedService (linkedServiceName As String, request As ArtifactRenameRequest, Optional cancellationToken As CancellationToken = Nothing) As LinkedServiceRenameLinkedServiceOperation" />
      <MemberSignature Language="F#" Value="abstract member StartRenameLinkedService : string * Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest * System.Threading.CancellationToken -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation&#xA;override this.StartRenameLinkedService : string * Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest * System.Threading.CancellationToken -&gt; Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation" Usage="linkedServiceClient.StartRenameLinkedService (linkedServiceName, request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="request" Type="Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="request"> proposed new name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Renames a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> or <paramref name="request" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="StartRenameLinkedServiceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation&gt; StartRenameLinkedServiceAsync (string linkedServiceName, Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest request, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation&gt; StartRenameLinkedServiceAsync(string linkedServiceName, class Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Synapse.Artifacts.LinkedServiceClient.StartRenameLinkedServiceAsync(System.String,Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartRenameLinkedServiceAsync (linkedServiceName As String, request As ArtifactRenameRequest, Optional cancellationToken As CancellationToken = Nothing) As Task(Of LinkedServiceRenameLinkedServiceOperation)" />
      <MemberSignature Language="F#" Value="abstract member StartRenameLinkedServiceAsync : string * Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation&gt;&#xA;override this.StartRenameLinkedServiceAsync : string * Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation&gt;" Usage="linkedServiceClient.StartRenameLinkedServiceAsync (linkedServiceName, request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Synapse.Artifacts</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Analytics.Synapse.Artifacts.LinkedServiceRenameLinkedServiceOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="request" Type="Azure.Analytics.Synapse.Artifacts.Models.ArtifactRenameRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="request"> proposed new name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Renames a linked service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> or <paramref name="request" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
