<Type Name="TenantExtensions" FullName="Azure.ResourceManager.Cdn.TenantExtensions">
  <TypeSignature Language="C#" Value="public static class TenantExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TenantExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Cdn.TenantExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TenantExtensions" />
  <TypeSignature Language="F#" Value="type TenantExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Cdn</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to Tenant. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckNameAvailability">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt; CheckNameAvailability (this Azure.ResourceManager.Resources.Tenant tenant, Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput checkNameAvailabilityInput, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt; CheckNameAvailability(class Azure.ResourceManager.Resources.Tenant tenant, class Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput checkNameAvailabilityInput, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Cdn.TenantExtensions.CheckNameAvailability(Azure.ResourceManager.Resources.Tenant,Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckNameAvailability (tenant As Tenant, checkNameAvailabilityInput As CheckNameAvailabilityInput, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CheckNameAvailabilityOutput)" />
      <MemberSignature Language="F#" Value="static member CheckNameAvailability : Azure.ResourceManager.Resources.Tenant * Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt;" Usage="Azure.ResourceManager.Cdn.TenantExtensions.CheckNameAvailability (tenant, checkNameAvailabilityInput, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Cdn</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tenant" Type="Azure.ResourceManager.Resources.Tenant" RefType="this" />
        <Parameter Name="checkNameAvailabilityInput" Type="Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tenant"> The <see cref="T:Azure.ResourceManager.Resources.Tenant" /> instance the method will execute against. </param>
        <param name="checkNameAvailabilityInput"> Input to check. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="checkNameAvailabilityInput" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt;&gt; CheckNameAvailabilityAsync (this Azure.ResourceManager.Resources.Tenant tenant, Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput checkNameAvailabilityInput, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt;&gt; CheckNameAvailabilityAsync(class Azure.ResourceManager.Resources.Tenant tenant, class Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput checkNameAvailabilityInput, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Cdn.TenantExtensions.CheckNameAvailabilityAsync(Azure.ResourceManager.Resources.Tenant,Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckNameAvailabilityAsync (tenant As Tenant, checkNameAvailabilityInput As CheckNameAvailabilityInput, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CheckNameAvailabilityOutput))" />
      <MemberSignature Language="F#" Value="static member CheckNameAvailabilityAsync : Azure.ResourceManager.Resources.Tenant * Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt;&gt;" Usage="Azure.ResourceManager.Cdn.TenantExtensions.CheckNameAvailabilityAsync (tenant, checkNameAvailabilityInput, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Cdn</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityOutput&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tenant" Type="Azure.ResourceManager.Resources.Tenant" RefType="this" />
        <Parameter Name="checkNameAvailabilityInput" Type="Azure.ResourceManager.Cdn.Models.CheckNameAvailabilityInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tenant"> The <see cref="T:Azure.ResourceManager.Resources.Tenant" /> instance the method will execute against. </param>
        <param name="checkNameAvailabilityInput"> Input to check. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="checkNameAvailabilityInput" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEdgeNodes">
      <MemberSignature Language="C#" Value="public static Azure.Pageable&lt;Azure.ResourceManager.Cdn.Models.EdgeNode&gt; GetEdgeNodes (this Azure.ResourceManager.Resources.Tenant tenant, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Pageable`1&lt;class Azure.ResourceManager.Cdn.Models.EdgeNode&gt; GetEdgeNodes(class Azure.ResourceManager.Resources.Tenant tenant, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Cdn.TenantExtensions.GetEdgeNodes(Azure.ResourceManager.Resources.Tenant,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEdgeNodes (tenant As Tenant, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of EdgeNode)" />
      <MemberSignature Language="F#" Value="static member GetEdgeNodes : Azure.ResourceManager.Resources.Tenant * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Cdn.Models.EdgeNode&gt;" Usage="Azure.ResourceManager.Cdn.TenantExtensions.GetEdgeNodes (tenant, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Cdn</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Cdn.Models.EdgeNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tenant" Type="Azure.ResourceManager.Resources.Tenant" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tenant"> The <see cref="T:Azure.ResourceManager.Resources.Tenant" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the EdgeNodes for this <see cref="T:Azure.ResourceManager.Resources.Tenant" />. </summary>
        <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEdgeNodesAsync">
      <MemberSignature Language="C#" Value="public static Azure.AsyncPageable&lt;Azure.ResourceManager.Cdn.Models.EdgeNode&gt; GetEdgeNodesAsync (this Azure.ResourceManager.Resources.Tenant tenant, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Cdn.Models.EdgeNode&gt; GetEdgeNodesAsync(class Azure.ResourceManager.Resources.Tenant tenant, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Cdn.TenantExtensions.GetEdgeNodesAsync(Azure.ResourceManager.Resources.Tenant,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetEdgeNodesAsync (tenant As Tenant, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of EdgeNode)" />
      <MemberSignature Language="F#" Value="static member GetEdgeNodesAsync : Azure.ResourceManager.Resources.Tenant * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Cdn.Models.EdgeNode&gt;" Usage="Azure.ResourceManager.Cdn.TenantExtensions.GetEdgeNodesAsync (tenant, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Cdn</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Cdn.Models.EdgeNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tenant" Type="Azure.ResourceManager.Resources.Tenant" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tenant"> The <see cref="T:Azure.ResourceManager.Resources.Tenant" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the EdgeNodes for this <see cref="T:Azure.ResourceManager.Resources.Tenant" />. </summary>
        <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
