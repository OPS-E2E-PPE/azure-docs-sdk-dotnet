<Type Name="FuzzySearchOptions" FullName="Azure.Maps.Search.FuzzySearchOptions">
  <TypeSignature Language="C#" Value="public class FuzzySearchOptions : Azure.Maps.Search.SearchPointOfInterestOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FuzzySearchOptions extends Azure.Maps.Search.SearchPointOfInterestOptions" />
  <TypeSignature Language="DocId" Value="T:Azure.Maps.Search.FuzzySearchOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class FuzzySearchOptions&#xA;Inherits SearchPointOfInterestOptions" />
  <TypeSignature Language="F#" Value="type FuzzySearchOptions = class&#xA;    inherit SearchPointOfInterestOptions" />
  <AssemblyInfo>
    <AssemblyName>Azure.Maps.Search</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Maps.Search.SearchPointOfInterestOptions</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Options. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FuzzySearchOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.FuzzySearchOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public Azure.Core.GeoJson.GeoBoundingBox BoundingBox { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.GeoJson.GeoBoundingBox BoundingBox" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.BoundingBox" />
      <MemberSignature Language="VB.NET" Value="Public Property BoundingBox As GeoBoundingBox" />
      <MemberSignature Language="F#" Value="member this.BoundingBox : Azure.Core.GeoJson.GeoBoundingBox with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.GeoJson.GeoBoundingBox</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> bounding box. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public Azure.Maps.Search.GeographicEntity? EntityType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.Maps.Search.GeographicEntity&gt; EntityType" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityType As Nullable(Of GeographicEntity)" />
      <MemberSignature Language="F#" Value="member this.EntityType : Nullable&lt;Azure.Maps.Search.GeographicEntity&gt; with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.EntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.Maps.Search.GeographicEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via <see href="https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon">Get Search Polygon</see> API. The following parameters are ignored when entityType is set:
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <list>
          <item>
            <description> heading </description>
          </item>
          <item>
            <description> number </description>
          </item>
          <item>
            <description> returnRoadUse </description>
          </item>
          <item>
            <description> returnSpeedLimit </description>
          </item>
          <item>
            <description> roadUse </description>
          </item>
          <item>
            <description> returnMatchType </description>
          </item>
        </list>
      </Docs>
    </Member>
    <Member MemberName="ExtendedPostalCodesFor">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.SearchIndex&gt; ExtendedPostalCodesFor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Maps.Search.SearchIndex&gt; ExtendedPostalCodesFor" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.ExtendedPostalCodesFor" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedPostalCodesFor As IEnumerable(Of SearchIndex)" />
      <MemberSignature Language="F#" Value="member this.ExtendedPostalCodesFor : seq&lt;Azure.Maps.Search.SearchIndex&gt; with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.ExtendedPostalCodesFor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.SearchIndex&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Indexes for which extended postal codes should be included in the results.
            
             Available indexes are:
             <list><item><description><c>Addr</c> - Address ranges </description></item><item><description><c>Geo</c> - Geographies </description></item><item><description><c>PAD</c> - Point Addresses </description></item><item><description><c>POI</c> - Points of Interest </description></item><item><description><c>Str</c> - Streets </description></item><item><description><c>XStr</c> - Cross Streets (intersections) </description></item></list>
             Value should be a comma separated list of index types (in any order) or <c>null</c> for no indexes.
            
             By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFilter">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.SearchIndex&gt; IndexFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Maps.Search.SearchIndex&gt; IndexFilter" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.IndexFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property IndexFilter As IEnumerable(Of SearchIndex)" />
      <MemberSignature Language="F#" Value="member this.IndexFilter : seq&lt;Azure.Maps.Search.SearchIndex&gt; with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.IndexFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.SearchIndex&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Indexes which should be utilized for the search.
            
             Available indexes are:
             <list><item><description><c>Addr</c> - Address ranges </description></item><item><description><c>Geo</c> - Geographies </description></item><item><description><c>PAD</c> - Point Addresses </description></item><item><description><c>POI</c> - Points of Interest </description></item><item><description><c>Str</c> - Streets </description></item><item><description><c>XStr</c> - Cross Streets (intersections) </description></item></list>
            
             Value should be a list of search indices (in any order) or <c>null</c> for no indices.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeAhead">
      <MemberSignature Language="C#" Value="public bool? IsTypeAhead { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsTypeAhead" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.IsTypeAhead" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTypeAhead As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.IsTypeAhead : Nullable&lt;bool&gt; with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.IsTypeAhead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxFuzzyLevel">
      <MemberSignature Language="C#" Value="public int? MaxFuzzyLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; MaxFuzzyLevel" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.MaxFuzzyLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFuzzyLevel As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.MaxFuzzyLevel : Nullable&lt;int&gt; with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.MaxFuzzyLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Maximum fuzziness level to be used. Default: 2, minimum: 1 and maximum: 4
            The search engine will start looking for a match on the level defined by minFuzzyLevel, and will stop searching at the level specified by maxFuzzyLevel.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <list>
          <item>
            <description> Level 1 has no spell checking. </description>
          </item>
          <item>
            <description> Level 2 uses normal n-gram spell checking. For example, query "restrant" can be matched to "restaurant." </description>
          </item>
          <item>
            <description> Level 3 uses sound-like spell checking, and shingle spell checking. Sound-like spell checking is for "rstrnt" to "restaurant" matching. Shingle spell checking is for "mountainview" to "mountain view" matching. </description>
          </item>
          <item>
            <description> Level 4 doesn’t add any more spell checking functions. </description>
          </item>
        </list>
      </Docs>
    </Member>
    <Member MemberName="MinFuzzyLevel">
      <MemberSignature Language="C#" Value="public int? MinFuzzyLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; MinFuzzyLevel" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.MinFuzzyLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property MinFuzzyLevel As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.MinFuzzyLevel : Nullable&lt;int&gt; with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.MinFuzzyLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Minimum fuzziness level to be used. Default: 1, minimum: 1 and maximum: 4
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <list>
          <item>
            <description> Level 1 has no spell checking. </description>
          </item>
          <item>
            <description> Level 2 uses normal n-gram spell checking. For example, query "restrant" can be matched to "restaurant." </description>
          </item>
          <item>
            <description> Level 3 uses sound-like spell checking, and shingle spell checking. Sound-like spell checking is for "rstrnt" to "restaurant" matching. Shingle spell checking is for "mountainview" to "mountain view" matching. </description>
          </item>
          <item>
            <description> Level 4 doesn’t add any more spell checking functions. </description>
          </item>
        </list>
      </Docs>
    </Member>
    <Member MemberName="OperatingHours">
      <MemberSignature Language="C#" Value="public Azure.Maps.Search.OperatingHoursRange? OperatingHours { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.Maps.Search.OperatingHoursRange&gt; OperatingHours" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.FuzzySearchOptions.OperatingHours" />
      <MemberSignature Language="VB.NET" Value="Public Property OperatingHours As Nullable(Of OperatingHoursRange)" />
      <MemberSignature Language="F#" Value="member this.OperatingHours : Nullable&lt;Azure.Maps.Search.OperatingHoursRange&gt; with get, set" Usage="Azure.Maps.Search.FuzzySearchOptions.OperatingHours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.Maps.Search.OperatingHoursRange&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Hours of operation for a POI (Points of Interest). The availability of hours of operation will vary based on the data available. If not passed, then no opening hours information will be returned.
            Supported value: nextSevenDays
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
